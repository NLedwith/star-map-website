/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bigdecimal.js/lib/bigdecimal.js":
/*!******************************************************!*\
  !*** ./node_modules/bigdecimal.js/lib/bigdecimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
  Copyright (c) 2021 Serkan Ã–zel. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions andg
  limitations under the License.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MC = exports.Big = exports.BigDecimal = exports.MathContext = exports.RoundingMode = void 0;
/**
 * Specifies a `rounding policy` for numerical operations capable
 * of discarding precision. Each rounding mode indicates how the least
 * significant returned digit of a rounded result is to be calculated.
 * If fewer digits are returned than the digits needed to represent
 * the exact numerical result, the discarded digits will be referred
 * to as the `discarded fraction` regardless the digits'
 * contribution to the value of the number.  In other words,
 * considered as a numerical value, the discarded fraction could have
 * an absolute value greater than one.
 *
 * Each rounding mode description includes a table listing how
 * different two-digit decimal values would round to a one digit
 * decimal value under the rounding mode in question. The result
 * column in the tables could be gotten by creating a
 * `BigDecimal` number with the specified value, forming a
 * {@link MathContext} object with the proper settings
 * (`precision` set to `1`, and the `roundingMode` set to the rounding
 * mode in question), and calling {@link BigDecimal.round | round} on
 * this number with the proper `MathContext`.  A summary table showing the results
 * of these rounding operations for all rounding modes appears below.
 *
 * | Input | UP | DOWN | CEILING | FLOOR | HALF_UP | HALF_DOWN | HALF_EVEN | UNNECESSARY |
 * | --- | --- | --- | --- | --- | --- | --- | --- | --- |
 * | 5.5 | 6 | 5 | 6 | 5 | 6 | 5 | 6 | RangeError |
 * | 2.5 | 3 | 2 | 3 | 2 | 3 | 2 | 2 | RangeError |
 * | 1.6 | 2 | 1 | 2 | 1 | 2 | 2 | 2 | RangeError |
 * | 1.1 | 2 | 1 | 2 | 1 | 1 | 1 | 1 | RangeError |
 * | 1.0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
 * | -1.0 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 |
 * | -1.1 | -2 | -1 | -1 | -2 | -1 | -1 | -1 | RangeError |
 * | -1.6 | -2 | -1 | -1 | -2 | -2 | -2 | -2 | RangeError |
 * | -2.5 | -3 | -2 | -2 | -3 | -3 | -2 | -2 | RangeError |
 * | -5.5 | -6 | -5 | -5 | -6 | -6 | -5 | -6 | RangeError |
 *
 */
var RoundingMode;
(function (RoundingMode) {
    /**
     * Rounding mode to round away from zero.  Always increments the
     * digit prior to a non-zero discarded fraction.  Note that this
     * rounding mode never decreases the magnitude of the calculated
     * value.
     */
    RoundingMode[RoundingMode["UP"] = 0] = "UP";
    /**
     * Rounding mode to round towards zero.  Never increments the digit
     * prior to a discarded fraction (i.e., truncates).  Note that this
     * rounding mode never increases the magnitude of the calculated value.
     * This mode corresponds to the IEEE 754-2019 rounding-direction
     * attribute "roundTowardZero".
     */
    RoundingMode[RoundingMode["DOWN"] = 1] = "DOWN";
    /**
     * Rounding mode to round towards positive infinity.  If the
     * result is positive, behaves as for `RoundingMode.UP`;
     * if negative, behaves as for `RoundingMode.DOWN`.  Note
     * that this rounding mode never decreases the calculated value.
     * This mode corresponds to the IEEE 754-2019 rounding-direction
     * attribute "roundTowardPositive".
     */
    RoundingMode[RoundingMode["CEILING"] = 2] = "CEILING";
    /**
     * Rounding mode to round towards negative infinity.  If the
     * result is positive, behave as for `RoundingMode.DOWN`;
     * if negative, behave as for `RoundingMode.UP`.  Note that
     * this rounding mode never increases the calculated value.
     * This mode corresponds to the IEEE 754-2019 rounding-direction
     * attribute "roundTowardNegative".
     */
    RoundingMode[RoundingMode["FLOOR"] = 3] = "FLOOR";
    /**
     * Rounding mode to round towards "nearest neighbor"
     * unless both neighbors are equidistant, in which case round up.
     * Behaves as for `RoundingMode.UP` if the discarded
     * fraction is &ge; 0.5; otherwise, behaves as for
     * `RoundingMode.DOWN`.  Note that this is the rounding
     * mode commonly taught at school.
     * This mode corresponds to the IEEE 754-2019 rounding-direction
     * attribute "roundTiesToAway".
     */
    RoundingMode[RoundingMode["HALF_UP"] = 4] = "HALF_UP";
    /**
     * Rounding mode to round towards "nearest neighbor"
     * unless both neighbors are equidistant, in which case round
     * down.  Behaves as for `RoundingMode.UP` if the discarded
     * fraction is &gt; 0.5; otherwise, behaves as for
     * `RoundingMode.DOWN`.
     */
    RoundingMode[RoundingMode["HALF_DOWN"] = 5] = "HALF_DOWN";
    /**
     * Rounding mode to round towards the "nearest neighbor"
     * unless both neighbors are equidistant, in which case, round
     * towards the even neighbor.  Behaves as for
     * `RoundingMode.HALF_UP` if the digit to the left of the
     * discarded fraction is odd; behaves as for
     * `RoundingMode.HALF_DOWN` if it's even.  Note that this
     * is the rounding mode that statistically minimizes cumulative
     * error when applied repeatedly over a sequence of calculations.
     * It is sometimes known as "Banker's rounding," and is
     * chiefly used in the USA.
     * This mode corresponds to the IEEE 754-2019 rounding-direction
     * attribute "roundTiesToEven".
     */
    RoundingMode[RoundingMode["HALF_EVEN"] = 6] = "HALF_EVEN";
    /**
     * Rounding mode to assert that the requested operation has an exact
     * result, hence no rounding is necessary.  If this rounding mode is
     * specified on an operation that yields an inexact result, an
     * `RangeError` is thrown.
     */
    RoundingMode[RoundingMode["UNNECESSARY"] = 7] = "UNNECESSARY";
})(RoundingMode || (exports.RoundingMode = RoundingMode = {}));
/**
 * Immutable objects which encapsulate the context settings which
 * describe certain rules for numerical operators, such as those
 * implemented by the {@link BigDecimal} class.
 *
 * The base-independent settings are:
 *
 * * precision: the number of digits to be used for an operation; results are
 * rounded to this precision
 * * roundingMode: a {@link RoundingMode} object which specifies the algorithm to be
 * used for rounding.
 *
 * Sample Usage:
 * ```javascript
 * const { Big, MC, RoundingMode } = require('bigdecimal.js');
 *
 * const x = Big('1');
 * const y = Big('3');
 *
 * const res1 = x.divideWithMathContext(y, new MC(3));
 * console.log(res1.toString()); // 0.333
 *
 * // You can also use without `new` operator
 * const res2 = x.divideWithMathContext(y, MC(3, RoundingMode.UP));
 * console.log(res2.toString()); // 0.334
 *
 * try {
 *     x.divide(y);
 *     // throws since full precision is requested but it is not possible
 * } catch (e) {
 *     console.log(e); // RangeError: Non-terminating decimal expansion; no exact representable decimal result.
 * }
 * ```
 */
class MathContext {
    constructor(precision, roundingMode = MathContext.DEFAULT_ROUNDINGMODE) {
        if (precision < 0) {
            throw new RangeError('MathContext precision cannot be less than 0');
        }
        else if (!RoundingMode[roundingMode]) {
            throw new TypeError(`RoundingMode is invalid: ${roundingMode}`);
        }
        this.precision = precision;
        this.roundingMode = roundingMode;
    }
}
exports.MathContext = MathContext;
/** @internal */
MathContext.DEFAULT_ROUNDINGMODE = RoundingMode.HALF_UP;
/**
 * A `MathContext` object whose settings have the values
 * required for unlimited precision arithmetic.
 * The values of the settings are: `precision=0 roundingMode=HALF_UP`
 */
MathContext.UNLIMITED = new MathContext(0, RoundingMode.HALF_UP);
/**
 * A `MathContext` object with a precision setting
 * matching the precision of the IEEE 754-2019 decimal32 format, 7 digits, and a
 * rounding mode of {@link RoundingMode.HALF_EVEN |  HALF_EVEN}.
 * Note the exponent range of decimal32 is **not** used for
 * rounding.
 */
MathContext.DECIMAL32 = new MathContext(7, RoundingMode.HALF_EVEN);
/**
 * A `MathContext` object with a precision setting
 * matching the precision of the IEEE 754-2019 decimal64 format, 16 digits, and a
 * rounding mode of {@link RoundingMode.HALF_EVEN | HALF_EVEN}.
 * Note the exponent range of decimal64 is **not** used for
 * rounding.
 */
MathContext.DECIMAL64 = new MathContext(16, RoundingMode.HALF_EVEN);
/**
 * A `MathContext` object with a precision setting
 * matching the precision of the IEEE 754-2019 decimal128 format, 34 digits, and a
 * rounding mode of {@link RoundingMode.HALF_EVEN | HALF_EVEN}.
 * Note the exponent range of decimal64 is **not** used for
 * rounding.
 */
MathContext.DECIMAL128 = new MathContext(34, RoundingMode.HALF_EVEN);
/**
 * [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) based BigDecimal
 * implementation. This class is ported from java.math.BigDecimal. The following documentation is adapted from openjdk/jdk
 * repository.
 *
 * Immutable, arbitrary-precision signed decimal numbers.  A
 * `BigDecimal` consists of an arbitrary precision number
 * {@link unscaledValue | unscaled value} and a {@link scale | scale}.
 * If zero or positive, the scale is the number of digits to the right of the decimal
 * point. If negative, the unscaled value of the number is multiplied
 * by ten to the power of the negation of the scale.  The value of the
 * number represented by the `BigDecimal` is therefore
 * <code>(unscaledValue &times; 10<sup>-scale</sup>)</code>.
 *
 * The `BigDecimal` class provides operations for
 * arithmetic, scale manipulation, rounding, comparison, hashing, and
 * format conversion.  The {@link toString} method provides a
 * canonical representation of a `BigDecimal`.
 *
 * The `BigDecimal` class gives its user complete control
 * over rounding behavior.  If no rounding mode is specified and the
 * exact result cannot be represented, a `RangeError`
 * is thrown; otherwise, calculations can be carried out to a chosen
 * precision and rounding mode by supplying an appropriate {@link
 * MathContext} object to the operation.  In either case, eight
 * <em>rounding modes</em> are provided for the control of rounding.
 *
 * When a `MathContext` object is supplied with a precision
 * setting of 0 (for example, {@link MathContext.UNLIMITED}),
 * arithmetic operations are exact, as are the arithmetic methods
 * which take no `MathContext` object. As a corollary of
 * computing the exact result, the rounding mode setting of a `
 * MathContext` object with a precision setting of 0 is not used and
 * thus irrelevant.  In the case of divide, the exact quotient could
 * have an infinitely long decimal expansion; for example, 1 divided
 * by 3.  If the quotient has a non-terminating decimal expansion and
 * the operation is specified to return an exact result, a RangeError
 * is thrown.  Otherwise, the exact result of the
 * division is returned, as done for other operations.
 *
 * When the precision setting is not 0, the rules of `BigDecimal`
 * arithmetic are broadly compatible with selected modes
 * of operation of the arithmetic defined in ANSI X3.274-1996 and ANSI
 * X3.274-1996/AM 1-2000 (section 7.4).  Unlike those standards,
 * `BigDecimal` includes many rounding modes.  Any conflicts
 * between these ANSI standards and the `BigDecimal`
 * specification are resolved in favor of `BigDecimal`.
 *
 * Since the same numerical value can have different
 * representations (with different scales), the rules of arithmetic
 * and rounding must specify both the numerical result and the scale
 * used in the result's representation.
 *
 * The different representations of the same numerical value are
 * called members of the same <i>cohort</i>. The {@link
 * compareTo |  natural order} of `BigDecimal`
 * considers members of the same cohort to be equal to each other. In
 * contrast, the {@link equals | equals} method requires both the
 * numerical value and representation to be the same for equality to
 * hold. The results of methods like {@link scale} and {@link
 * unscaledValue} will differ for numerically equal values with
 * different representations.
 *
 * In general the rounding modes and precision setting determine
 * how operations return results with a limited number of digits when
 * the exact result has more digits (perhaps infinitely many in the
 * case of division and square root) than the number of digits returned.
 *
 * First, the total number of digits to return is specified by the
 * `MathContext`'s `precision` setting; this determines
 * the result's <i>precision</i>.  The digit count starts from the
 * leftmost nonzero digit of the exact result.  The rounding mode
 * determines how any discarded trailing digits affect the returned
 * result.
 *
 * For all arithmetic operators, the operation is carried out as
 * though an exact intermediate result were first calculated and then
 * rounded to the number of digits specified by the precision setting
 * (if necessary), using the selected rounding mode.  If the exact
 * result is not returned, some digit positions of the exact result
 * are discarded.  When rounding increases the magnitude of the
 * returned result, it is possible for a new digit position to be
 * created by a carry propagating to a leading "9" digit.
 * For example, rounding the value 999.9 to three digits rounding up
 * would be numerically equal to one thousand, represented as
 * 100&times;10<sup>1</sup>.  In such cases, the new "1" is
 * the leading digit position of the returned result.
 *
 * For methods and constructors with a `MathContext`
 * parameter, if the result is inexact but the rounding mode is {@link
 * RoundingMode.UNNECESSARY | UNNECESSARY}, a RangeError will be thrown.
 *
 * Besides a logical exact result, each arithmetic operation has a
 * preferred scale for representing a result.  The preferred
 * scale for each operation is listed in the table below.
 *
 * <table class="striped" style="text-align:left">
 * <caption>Preferred Scales for Results of Arithmetic Operations
 * </caption>
 * <thead>
 * <tr><th scope="col">Operation</th><th scope="col">Preferred Scale of Result</th></tr>
 * </thead>
 * <tbody>
 * <tr><th scope="row">Add</th><td>max(addend.scale(), augend.scale())</td>
 * <tr><th scope="row">Subtract</th><td>max(minuend.scale(), subtrahend.scale())</td>
 * <tr><th scope="row">Multiply</th><td>multiplier.scale() + multiplicand.scale()</td>
 * <tr><th scope="row">Divide</th><td>dividend.scale() - divisor.scale()</td>
 * <tr><th scope="row">Square root</th><td>radicand.scale()/2</td>
 * </tbody>
 * </table>
 *
 * These scales are the ones used by the methods which return exact
 * arithmetic results; except that an exact divide may have to use a
 * larger scale since the exact result may have more digits.  For
 * example, `1/32` is `0.03125`.
 *
 * Before rounding, the scale of the logical exact intermediate
 * result is the preferred scale for that operation. If the exact
 * numerical result cannot be represented in `precision`
 * digits, rounding selects the set of digits to return and the scale
 * of the result is reduced from the scale of the intermediate result
 * to the least scale which can represent the `precision`
 * digits actually returned.  If the exact result can be represented
 * with at most `precision` digits, the representation
 * of the result with the scale closest to the preferred scale is
 * returned.  In particular, an exactly representable quotient may be
 * represented in fewer than `precision` digits by removing
 * trailing zeros and decreasing the scale.  For example, rounding to
 * three digits using the {@link RoundingMode.FLOOR | floor}
 * rounding mode, <br>
 *
 * `19/100 = 0.19   // number=19,  scale=2` <br>
 *
 * but<br>
 *
 * `21/110 = 0.190  // number=190, scale=3` <br>
 *
 * Note that for add, subtract, and multiply, the reduction in
 * scale will equal the number of digit positions of the exact result
 * which are discarded. If the rounding causes a carry propagation to
 * create a new high-order digit position, an additional digit of the
 * result is discarded than when no new digit position is created.
 *
 * Other methods may have slightly different rounding semantics.
 * For example, the result of the `pow` method using the
 * {@link pow | specified algorithm} can
 * occasionally differ from the rounded mathematical result by more
 * than one unit in the last place, one <i>{@link ulp}</i>.
 *
 * Two types of operations are provided for manipulating the scale
 * of a `BigDecimal`: scaling/rounding operations and decimal
 * point motion operations.  Scaling/rounding operations ({@link
 * setScale} and {@link round}) return a
 * `BigDecimal` whose value is approximately (or exactly) equal
 * to that of the operand, but whose scale or precision is the
 * specified value; that is, they increase or decrease the precision
 * of the stored number with minimal effect on its value.  Decimal
 * point motion operations ({@link movePointLeft} and
 * {@link movePointRight}) return a
 * `BigDecimal` created from the operand by moving the decimal
 * point a specified distance in the specified direction.
 *
 * As a number, the set of values for the scale is large,
 * but bounded. If the scale of a result would exceed the range of a
 * safe number, either by overflow or underflow, the operation may
 * throw a RangerError.
 *
 * For the sake of brevity and clarity, pseudo-code is used
 * throughout the descriptions of `BigDecimal` methods.  The
 * pseudo-code expression `(i + j)` is shorthand for "a
 * `BigDecimal` whose value is that of the `BigDecimal`
 * `i` added to that of the `BigDecimal`
 * `j`." The pseudo-code expression `(i == j)` is
 * shorthand for "`true` if and only if the
 * `BigDecimal` `i` represents the same value as the
 * `BigDecimal` `j`." Other pseudo-code expressions
 * are interpreted similarly.  Square brackets are used to represent
 * the particular `BigInt` and scale pair defining a
 * `BigDecimal` value; for example [19, 2] is the
 * `BigDecimal` numerically equal to 0.19 having a scale of 2.
 *
 * <h2>Relation to IEEE 754 Decimal Arithmetic</h2>
 *
 * Starting with its 2008 revision, the <cite>IEEE 754 Standard for
 * Floating-point Arithmetic</cite> has covered decimal formats and
 * operations. While there are broad similarities in the decimal
 * arithmetic defined by IEEE 754 and by this class, there are notable
 * differences as well. The fundamental similarity shared by
 * `BigDecimal` and IEEE 754 decimal arithmetic is the conceptual
 * operation of computing the mathematical infinitely precise real
 * number value of an operation and then mapping that real number to a
 * representable decimal floating-point value under a <em>rounding
 * policy</em>. The rounding policy is called a {@link
 * RoundingMode | rounding mode} for `BigDecimal` and called a
 * rounding-direction attribute in IEEE 754-2019. When the exact value
 * is not representable, the rounding policy determines which of the
 * two representable decimal values bracketing the exact value is
 * selected as the computed result. The notion of a <em>preferred
 * scale/preferred exponent</em> is also shared by both systems.
 *
 * For differences, IEEE 754 includes several kinds of values not
 * modeled by `BigDecimal` including negative zero, signed
 * infinities, and NaN (not-a-number). IEEE 754 defines formats, which
 * are parameterized by base (binary or decimal), number of digits of
 * precision, and exponent range. A format determines the set of
 * representable values. Most operations accept as input one or more
 * values of a given format and produce a result in the same format.
 * A `BigDecimal`'s {@link scale} is equivalent to
 * negating an IEEE 754 value's exponent. `BigDecimal` values do
 * not have a format in the same sense; all values have the same
 * possible range of scale/exponent and the {@link
 * unscaledValue | unscaled value} has arbitrary precision. Instead,
 * for the `BigDecimal` operations taking a `MathContext`
 * parameter, if the `MathContext` has a nonzero precision, the
 * set of possible representable values for the result is determined
 * by the precision of the `MathContext` argument. For example
 * in `BigDecimal`, if a nonzero three-digit number and a
 * nonzero four-digit number are multiplied together in the context of
 * a `MathContext` object having a precision of three, the
 * result will have three digits (assuming no overflow or underflow,
 * etc.).
 *
 * The rounding policies implemented by `BigDecimal`
 * operations indicated by {@link RoundingMode | rounding modes}
 * are a proper superset of the IEEE 754 rounding-direction
 * attributes.
 *
 * `BigDecimal` arithmetic will most resemble IEEE 754
 * decimal arithmetic if a `MathContext` corresponding to an
 * IEEE 754 decimal format, such as {@link MathContext.DECIMAL64 |
 * decimal64} or {@link MathContext.DECIMAL128 | decimal128} is
 * used to round all starting values and intermediate operations. The
 * numerical values computed can differ if the exponent range of the
 * IEEE 754 format being approximated is exceeded since a
 * `MathContext` does not constrain the scale of `BigDecimal`
 * results. Operations that would generate a NaN or exact infinity,
 * such as dividing by zero, throw a RangeError in
 * `BigDecimal` arithmetic.
 *
 */
class BigDecimal {
    /** @internal */
    static adjustScale(scl, exp) {
        const adjustedScale = scl - exp;
        if (adjustedScale > BigDecimal.MAX_INT_VALUE || adjustedScale < BigDecimal.MIN_INT_VALUE)
            throw new RangeError('Scale out of range.');
        scl = adjustedScale;
        return scl;
    }
    /** @internal */
    constructor(bigIntValue, intCompact, scale, precision) {
        this.intVal = bigIntValue;
        this._scale = scale;
        this._precision = precision;
        this.intCompact = intCompact;
    }
    /**
     * Translates a character array representation of a
     * `BigDecimal` into a `BigDecimal`.
     *
     * @param input input string
     * @param offset first character in the string to inspect.
     * @param len number of characters to consider.
     * @param scale scale value
     * @param mc the context to use.
     * @throws RangeError if `input` is not a valid
     * representation of a `BigDecimal` or the defined subarray
     * is not wholly within `input`.
     * @internal
     */
    static fromString(input, offset, len, scale, mc = MathContext.UNLIMITED) {
        // This is the primary string to BigDecimal constructor
        // Use locals for all fields values until completion
        let prec = 0; // record precision value
        let scl = scale || 0; // record scale value
        let rs = 0; // the compact value in long
        let rb = null; // the inflated value in BigInt
        // use array bounds checking to handle too-long, len == 0,
        // bad offset, etc.
        // handle the sign
        let isneg = false; // assume positive
        if (input[offset] === '-') {
            isneg = true; // leading minus means negative
            offset++;
            len--;
        }
        else if (input[offset] === '+') { // leading + allowed
            offset++;
            len--;
        }
        // should now be at numeric part of the significand
        let dot = false; // true when there is a '.'
        let exp = 0; // exponent
        let c; // current character
        const isCompact = len <= this.MAX_COMPACT_DIGITS;
        // integer significand array & idx is the index to it. The array
        // is ONLY used when we can't use a compact representation.
        let idx = 0;
        if (isCompact) {
            // First compact case, we need not to preserve the character
            // and we can just compute the value in place.
            for (; len > 0; offset++, len--) {
                c = input[offset];
                if ((c === '0')) { // have zero
                    if (prec === 0)
                        prec = 1;
                    else if (rs !== 0) {
                        rs *= 10;
                        ++prec;
                    } // else digit is a redundant leading zero
                    if (dot)
                        ++scl;
                }
                else if ((c >= '1' && c <= '9')) { // have digit
                    const digit = +c;
                    if (prec !== 1 || rs !== 0)
                        ++prec; // prec unchanged if preceded by 0s
                    rs = rs * 10 + digit;
                    if (dot)
                        ++scl;
                }
                else if (c === '.') { // have dot
                    if (dot) // two dots
                        throw new RangeError('Character array contains more than one decimal point.');
                    dot = true;
                }
                else if ((c === 'e') || (c === 'E')) {
                    exp = BigDecimal.parseExp(input, offset, len);
                    // Next test is required for backwards compatibility
                    if (exp > BigDecimal.MAX_INT_VALUE || exp < BigDecimal.MIN_INT_VALUE) // overflow
                        throw new RangeError('Exponent overflow.');
                    break; // [saves a test]
                }
                else {
                    throw new RangeError('Character ' + c
                        + ' is neither a decimal digit number, decimal point, nor'
                        + ' "e" notation exponential mark.');
                }
            }
            if (prec === 0) // no digits found
                throw new RangeError('No digits found.');
            // Adjust scale if exp is not zero.
            if (exp !== 0) { // had significant exponent
                scl = BigDecimal.adjustScale(scl, exp);
            }
            rs = isneg ? -rs : rs;
            const mcp = mc.precision;
            let drop = prec - mcp; // prec has range [1, MAX_INT], mcp has range [0, MAX_INT];
            // therefore, this subtract cannot overflow
            if (mcp > 0 && drop > 0) { // do rounding
                while (drop > 0) {
                    scl = BigDecimal.checkScaleNonZero(scl - drop);
                    rs = BigDecimal.divideAndRound(rs, BigDecimal.TEN_POWERS_TABLE[drop], mc.roundingMode);
                    prec = BigDecimal.integerDigitLength(rs);
                    drop = prec - mcp;
                }
            }
        }
        else {
            const coeff = [];
            for (; len > 0; offset++, len--) {
                c = input[offset];
                // have digit
                if (c >= '0' && c <= '9') {
                    // First compact case, we need not to preserve the character
                    // and we can just compute the value in place.
                    if (c === '0') {
                        if (prec === 0) {
                            coeff[idx] = c;
                            prec = 1;
                        }
                        else if (idx !== 0) {
                            coeff[idx++] = c;
                            prec++;
                        } // else c must be a redundant leading zero
                    }
                    else {
                        if (prec !== 1 || idx !== 0)
                            prec++; // prec unchanged if preceded by 0s
                        coeff[idx++] = c;
                    }
                    if (dot)
                        scl++;
                    continue;
                }
                // have dot
                if (c === '.') {
                    if (dot) { // two dots
                        throw new RangeError('String contains more than one decimal point.');
                    }
                    dot = true;
                    continue;
                }
                // exponent expected
                if ((c !== 'e') && (c !== 'E')) {
                    throw new RangeError('String is missing "e" notation exponential mark.');
                }
                exp = BigDecimal.parseExp(input, offset, len);
                // Next test is required for backwards compatibility
                if (exp > BigDecimal.MAX_INT_VALUE || exp < BigDecimal.MIN_INT_VALUE) // overflow
                    throw new RangeError('Exponent overflow.');
                break; // [saves a test]
            }
            // here when no characters left
            if (prec === 0) { // no digits found
                throw new RangeError('No digits found.');
            }
            // Adjust scale if exp is not zero.
            if (exp !== 0) { // had significant exponent
                scl = BigDecimal.adjustScale(scl, exp);
            }
            const stringValue = coeff.join('');
            // Remove leading zeros from precision (digits count)
            if (isneg)
                rb = BigInt('-' + stringValue);
            else
                rb = BigInt(stringValue);
            rs = BigDecimal.compactValFor(rb);
            const mcp = mc.precision;
            if (mcp > 0 && (prec > mcp)) {
                if (rs === BigDecimal.INFLATED) {
                    let drop = prec - mcp;
                    while (drop > 0) {
                        scl = BigDecimal.checkScaleNonZero(scl - drop);
                        rb = BigDecimal.divideAndRoundByTenPow(rb, drop, mc.roundingMode);
                        rs = BigDecimal.compactValFor(rb);
                        if (rs !== BigDecimal.INFLATED) {
                            prec = BigDecimal.integerDigitLength(rs);
                            break;
                        }
                        prec = BigDecimal.bigDigitLength(rb);
                        drop = prec - mcp;
                    }
                }
                if (rs !== BigDecimal.INFLATED) {
                    let drop = prec - mcp;
                    while (drop > 0) {
                        scl = BigDecimal.checkScaleNonZero(scl - drop);
                        rs = BigDecimal.divideAndRound(rs, BigDecimal.TEN_POWERS_TABLE[drop], mc.roundingMode);
                        prec = BigDecimal.integerDigitLength(rs);
                        drop = prec - mcp;
                    }
                    rb = null;
                }
            }
        }
        return new BigDecimal(rb, rs, scl, prec);
    }
    /** @internal */
    static fromBigInt(value, scale, mc) {
        if (scale === undefined) {
            if (mc === undefined) {
                return BigDecimal.fromBigInt3(value);
            }
            else {
                return BigDecimal.fromBigInt2(value, 0, mc);
            }
        }
        else {
            if (mc === undefined) {
                return BigDecimal.fromBigInt4(value, scale);
            }
            else {
                return BigDecimal.fromBigInt2(value, scale, mc);
            }
        }
    }
    /**
     * Translates a `BigInt` unscaled value and a number
     * scale into a `BigDecimal`, with rounding
     * according to the context settings.  The value of the
     * `BigDecimal` is <code>(unscaledVal &times;
     * 10<sup>-scale</sup>)</code>, rounded according to the
     * `precision` and rounding mode settings.
     *
     * @param intVal unscaled value of the `BigDecimal`.
     * @param scale       scale of the `BigDecimal`.
     * @param mc          the context to use.
     * @internal
     */
    static fromBigInt2(intVal, scale, mc) {
        let unscaledVal = intVal;
        let compactVal = BigDecimal.compactValFor(unscaledVal);
        const mcp = mc.precision;
        let prec = 0;
        if (mcp > 0) { // do rounding
            const mode = mc.roundingMode;
            if (compactVal === BigDecimal.INFLATED) {
                prec = BigDecimal.bigDigitLength(unscaledVal);
                let drop = prec - mcp;
                while (drop > 0) {
                    scale = BigDecimal.checkScaleNonZero(scale - drop);
                    unscaledVal = BigDecimal.divideAndRoundByTenPow(unscaledVal, drop, mode);
                    compactVal = BigDecimal.compactValFor(unscaledVal);
                    if (compactVal !== BigDecimal.INFLATED) {
                        break;
                    }
                    prec = BigDecimal.bigDigitLength(unscaledVal);
                    drop = prec - mcp;
                }
            }
            if (compactVal !== BigDecimal.INFLATED) {
                prec = BigDecimal.integerDigitLength(compactVal);
                let drop = prec - mcp; // drop can't be more than 15
                while (drop > 0) {
                    scale = BigDecimal.checkScaleNonZero(scale - drop);
                    compactVal = BigDecimal.divideAndRound(compactVal, BigDecimal.TEN_POWERS_TABLE[drop], mode);
                    prec = BigDecimal.integerDigitLength(compactVal);
                    drop = prec - mcp;
                }
                unscaledVal = null;
            }
        }
        return new BigDecimal(unscaledVal, compactVal, scale, prec);
    }
    /**
     * Translates a `BigInteger` into a `BigDecimal`.
     * The scale of the `BigDecimal` is zero.
     *
     * @param intVal `BigInt` value to be converted to
     *            `BigDecimal`.
     * @internal
     */
    static fromBigInt3(intVal) {
        const intCompact = BigDecimal.compactValFor(intVal);
        return new BigDecimal(intVal, intCompact, 0, 0);
    }
    /**
     * Translates a `BigInt` unscaled value and a number
     * scale into a `BigDecimal`.  The value of
     * the `BigDecimal` is
     * <code>(unscaledVal &times; 10<sup>-scale</sup>)</code>.
     *
     * @param intVal unscaled value of the `BigDecimal`.
     * @param scale       scale of the `BigDecimal`.
     * @internal
     */
    static fromBigInt4(intVal, scale) {
        // Negative scales are now allowed
        const intCompact = BigDecimal.compactValFor(intVal);
        return new BigDecimal(intVal, intCompact, scale, 0);
    }
    /** @internal */
    static fromBigInt5(intVal, scale, prec) {
        const intCompact = BigDecimal.compactValFor(intVal);
        if (intCompact === 0) {
            return BigDecimal.zeroValueOf(scale);
        }
        else if (scale === 0 && intCompact >= 0 && intCompact < BigDecimal.ZERO_THROUGH_TEN.length) {
            return BigDecimal.ZERO_THROUGH_TEN[intCompact];
        }
        return new BigDecimal(intVal, intCompact, scale, prec);
    }
    /**
     * Translates a `double` into a `BigDecimal`, using
     * the `double`'s canonical string representation provided
     * by the String constructor.
     *
     * @param double `double` to convert to a `BigDecimal`.
     * @param mc math context to use
     * @return a `BigDecimal` whose value is equal to or approximately
     * equal to the value of `double`.
     * @throws RangeError if `double` is not a valid `BigDecimal`
     * @internal
     */
    static fromDouble(double, mc) {
        const strValue = String(double);
        return BigDecimal.fromString(strValue, 0, strValue.length, 0, mc);
    }
    /**
     * Construct a new BigDecimal from a number with given scale and precision
     * @param value integer value
     * @param scale scale value
     * @param mc math context value
     * @internal
     */
    static fromInteger(value, scale, mc) {
        if (mc !== undefined) {
            return BigDecimal.fromNumber5(value, mc);
        }
        else {
            if (scale !== undefined) {
                return BigDecimal.fromInteger3(value, scale);
            }
            else {
                return BigDecimal.fromInteger4(value);
            }
        }
    }
    /** @internal */
    static fromInteger2(value, scale, prec) {
        if (scale === 0 && value >= 0 && value < BigDecimal.ZERO_THROUGH_TEN.length) {
            return BigDecimal.ZERO_THROUGH_TEN[value];
        }
        else if (value === 0) {
            return BigDecimal.zeroValueOf(scale);
        }
        return new BigDecimal(value === BigDecimal.INFLATED ? BigDecimal.INFLATED_BIGINT : null, value, scale, prec);
    }
    /**
     * Translates a `number` unscaled value and a `number`
     * scale into a `BigDecimal`.
     *
     * @param value unscaled value of the `BigDecimal`.
     * @param scale       scale of the `BigDecimal`.
     * @return a `BigDecimal` whose value is
     * <code>(unscaledVal &times; 10<sup>-scale</sup>)</code>.
     * @internal
     */
    static fromInteger3(value, scale) {
        if (scale === 0) {
            return BigDecimal.fromInteger4(value);
        }
        else if (value === 0) {
            return BigDecimal.zeroValueOf(scale);
        }
        return new BigDecimal(value === BigDecimal.INFLATED ? BigDecimal.INFLATED_BIGINT : null, value, scale, 0);
    }
    /**
     * Translates an integer value into a `BigDecimal`
     * with a scale of zero.
     *
     * @param value value of the `BigDecimal`.
     * @return a `BigDecimal` whose value is `value`.
     * @internal
     */
    static fromInteger4(value) {
        if (this.ZERO_THROUGH_TEN[value]) {
            return this.ZERO_THROUGH_TEN[value];
        }
        else if (value !== BigDecimal.INFLATED) {
            return new BigDecimal(null, value, 0, 0);
        }
        else {
            return new BigDecimal(this.INFLATED_BIGINT, value, 0, 0);
        }
    }
    /**
     * Translates an integer into a `BigDecimal`, with
     * rounding according to the context settings.  The scale of the
     * `BigDecimal`, before any rounding, is zero.
     *
     * @param value number value to be converted to `BigDecimal`.
     * @param mc  the context to use.
     * @internal
     */
    static fromNumber5(value, mc) {
        const mcp = mc.precision;
        const mode = mc.roundingMode;
        let prec = 0;
        let scl = 0;
        let rb = (value === BigDecimal.INFLATED) ? BigDecimal.INFLATED_BIGINT : null;
        if (mcp > 0) { // do rounding
            if (value === BigDecimal.INFLATED) {
                prec = 16; // number max digits + 1
                let drop = prec - mcp;
                while (drop > 0) {
                    scl = BigDecimal.checkScaleNonZero(scl - drop);
                    rb = BigDecimal.divideAndRoundByTenPow(rb, drop, mode);
                    value = BigDecimal.compactValFor(rb);
                    if (value !== BigDecimal.INFLATED) {
                        break;
                    }
                    prec = BigDecimal.bigDigitLength(rb);
                    drop = prec - mcp;
                }
            }
            if (value !== BigDecimal.INFLATED) {
                prec = BigDecimal.integerDigitLength(value);
                let drop = prec - mcp;
                while (drop > 0) {
                    scl = BigDecimal.checkScaleNonZero(scl - drop);
                    value = BigDecimal.divideAndRound(value, BigDecimal.TEN_POWERS_TABLE[drop], mc.roundingMode);
                    prec = BigDecimal.integerDigitLength(value);
                    drop = prec - mcp;
                }
                rb = null;
            }
        }
        return new BigDecimal(rb, value, scl, prec);
    }
    /**
     * Returns number of digits in a integer
     * @param value integer value
     * @internal
     */
    static integerDigitLength(value) {
        let length = 0;
        let n = Math.abs(value);
        do {
            n /= 10;
            length++;
        } while (n >= 1);
        return length;
    }
    /**
     * parse exponent
     * @internal
     */
    static parseExp(input, offset, len) {
        let exp = 0;
        offset++;
        let c = input[offset];
        len--;
        const negexp = (c === '-');
        // optional sign
        if (negexp || c === '+') {
            offset++;
            c = input[offset];
            len--;
        }
        if (len <= 0) { // no exponent digits
            throw new RangeError('No exponent digits');
        }
        // skip leading zeros in the exponent
        while (len > 10 && c === '0') {
            offset++;
            c = input[offset];
            len--;
        }
        if (len > 10) { // too many nonzero exponent digits
            throw new RangeError('Too many nonzero exponent digits');
        }
        // c now holds first digit of exponent
        for (;; len--) {
            let v;
            if (c >= '0' && c <= '9') {
                v = +c;
            }
            else {
                // not a digit
                throw new RangeError('Not a digit.');
            }
            exp = exp * 10 + v;
            if (len === 1)
                break; // that was final character
            offset++;
            c = input[offset];
        }
        if (negexp) // apply sign
            exp = -exp;
        return exp;
    }
    /** @internal */
    static fromValue(value, scale, mc) {
        if (typeof value === 'number') {
            if (value > Number.MAX_VALUE || value < -Number.MAX_VALUE) {
                throw new RangeError('Number must be in the range [-Number.MAX_VALUE, Number.MAX_VALUE]');
            }
            if (scale !== undefined && mc !== undefined) {
                throw new RangeError('When constructing from a number, you cannot give both scale and MathContext.');
            }
            if (!Number.isInteger(value)) {
                if (scale !== undefined) {
                    throw new RangeError('You should not give scale when number is a double');
                }
                return BigDecimal.fromDouble(value, mc);
            }
            if (!(value > Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER)) {
                // Unsafe range, build from string
                value = String(value);
                return BigDecimal.fromString(value, 0, value.length, scale, mc);
            }
            return BigDecimal.fromInteger(value, scale, mc);
        }
        if (typeof value === 'bigint') {
            return BigDecimal.fromBigInt(value, scale, mc);
        }
        if (value instanceof BigDecimal) {
            return new BigDecimal(value.intVal, value.intCompact, value.scale(), value._precision);
        }
        if (scale !== undefined) {
            throw new RangeError('You should give scale only with BigInts or integers');
        }
        value = String(value);
        return BigDecimal.fromString(value, 0, value.length, 0, mc);
    }
    /**
     * Converts a value to BigDecimal if it is not already.
     * @param value
     * @internal
     */
    static convertToBigDecimal(value) {
        if (value instanceof BigDecimal)
            return value;
        return BigDecimal.fromValue(value);
    }
    /** @internal */
    static add1(fst, scale1, snd, scale2) {
        let rscale = scale1;
        const sdiff = rscale - scale2;
        if (sdiff !== 0) {
            if (sdiff < 0) {
                const raise = this.checkScale3(fst, -sdiff);
                rscale = scale2;
                fst = BigDecimal.bigMultiplyPowerTen3(fst, raise);
            }
            else {
                const raise = this.checkScale3(snd, sdiff);
                snd = BigDecimal.bigMultiplyPowerTen3(snd, raise);
            }
        }
        const sum = fst.valueOf() + snd.valueOf();
        const sameSignum = (fst === BigDecimal.zeroBigInt && snd === BigDecimal.zeroBigInt) ||
            (fst > BigDecimal.zeroBigInt && snd > BigDecimal.zeroBigInt) ||
            (fst < BigDecimal.zeroBigInt && snd < BigDecimal.zeroBigInt);
        return sameSignum ? new BigDecimal(sum, BigDecimal.INFLATED, rscale, 0) : BigDecimal.fromBigInt5(sum, rscale, 0);
    }
    /** @internal */
    static add2(xs, scale1, snd, scale2) {
        let rscale = scale1;
        const sdiff = rscale - scale2;
        const sameSigns = (snd === BigDecimal.zeroBigInt && xs === 0) ||
            (snd > BigDecimal.zeroBigInt && xs > 0) ||
            (snd < BigDecimal.zeroBigInt && xs < 0);
        let sum;
        if (sdiff < 0) {
            const raise = this.checkScale2(xs, -sdiff);
            rscale = scale2;
            const scaledX = BigDecimal.integerMultiplyPowerTen(xs, raise);
            if (scaledX === BigDecimal.INFLATED) {
                sum = snd.valueOf() + BigDecimal.bigMultiplyPowerTen2(xs, raise).valueOf();
            }
            else {
                sum = snd.valueOf() + BigInt(scaledX).valueOf();
            }
        }
        else { // if (sdiff > 0) {
            const raise = this.checkScale3(snd, sdiff);
            snd = BigDecimal.bigMultiplyPowerTen3(snd, raise);
            sum = snd.valueOf() + BigInt(xs);
        }
        return (sameSigns) ?
            new BigDecimal(sum, BigDecimal.INFLATED, rscale, 0) : BigDecimal.fromBigInt5(sum, rscale, 0);
    }
    /** @internal */
    static add3(xs, scale1, ys, scale2) {
        const sdiff = scale1 - scale2;
        if (sdiff === 0) {
            return BigDecimal.add4(xs, ys, scale1);
        }
        else if (sdiff < 0) {
            const raise = this.checkScale2(xs, -sdiff);
            const scaledX = BigDecimal.integerMultiplyPowerTen(xs, raise);
            if (scaledX !== BigDecimal.INFLATED) {
                return BigDecimal.add4(scaledX, ys, scale2);
            }
            else {
                const bigsum = BigDecimal.bigMultiplyPowerTen2(xs, raise).valueOf() + BigInt(ys).valueOf();
                return ((xs ^ ys) >= 0) ?
                    new BigDecimal(bigsum, BigDecimal.INFLATED, scale2, 0) : BigDecimal.fromBigInt5(bigsum, scale2, 0);
            }
        }
        else {
            const raise = this.checkScale2(ys, sdiff);
            const scaledY = BigDecimal.integerMultiplyPowerTen(ys, raise);
            if (scaledY !== BigDecimal.INFLATED) {
                return BigDecimal.add4(xs, scaledY, scale1);
            }
            else {
                const bigsum = BigDecimal.bigMultiplyPowerTen2(ys, raise).valueOf() + BigInt(xs).valueOf();
                return ((xs ^ ys) >= 0) ?
                    new BigDecimal(bigsum, BigDecimal.INFLATED, scale1, 0) : BigDecimal.fromBigInt5(bigsum, scale1, 0);
            }
        }
    }
    /** @internal */
    static add4(xs, ys, scale) {
        const sum = BigDecimal.add5(xs, ys);
        if (sum !== BigDecimal.INFLATED)
            return BigDecimal.fromInteger3(sum, scale);
        return BigDecimal.fromBigInt5(BigInt(xs) + BigInt(ys), scale, 0);
    }
    /**
     * returns INFLATED if overflows
     * @internal
     */
    static add5(xs, ys) {
        const sum = xs + ys;
        if (sum >= Number.MAX_SAFE_INTEGER)
            return BigDecimal.INFLATED;
        return sum;
    }
    /**
     * Compute val * 10 ^ n; return this product if it is
     * representable as a long, INFLATED otherwise.
     * @internal
     */
    static integerMultiplyPowerTen(val, n) {
        if (val === 0 || n <= 0)
            return val;
        const tab = BigDecimal.TEN_POWERS_TABLE;
        const bounds = BigDecimal.THRESHOLDS_TABLE;
        if (n < tab.length && n < bounds.length) {
            const tenpower = tab[n];
            if (val === 1)
                return tenpower;
            if (Math.abs(val) <= bounds[n])
                return val * tenpower;
        }
        return BigDecimal.INFLATED;
    }
    /**
     * Returns the signum function of this `BigDecimal`.
     *
     * @return -1, 0, or 1 as the value of this `BigDecimal`
     *         is negative, zero, or positive.
     */
    signum() {
        const intCompactSignum = this.intCompact > 0 ? 1 : (this.intCompact < 0 ? -1 : 0);
        const intValSignum = BigDecimal.bigIntSignum(this.intVal);
        return this.intCompact !== BigDecimal.INFLATED ? intCompactSignum : intValSignum;
    }
    /**
     * Returns unscaled value of this `BigDecimal` as `BigInt`
     * @internal
     */
    inflated() {
        return this.intVal === null ? BigInt(this.intCompact) : this.intVal;
    }
    /**
     * Returns the compact value for given `BigInt`, or
     * INFLATED if too big. Relies on internal representation of
     * `BigInt`.
     * @internal
     */
    static compactValFor(value) {
        if (value.valueOf() > Number.MAX_SAFE_INTEGER || value.valueOf() < Number.MIN_SAFE_INTEGER) {
            return BigDecimal.INFLATED;
        }
        return Number(value);
    }
    /** @internal */
    checkScale(val) {
        if (val > BigDecimal.MAX_INT_VALUE || val < BigDecimal.MIN_INT_VALUE) {
            val = val > BigDecimal.MAX_INT_VALUE ? BigDecimal.MAX_INT_VALUE : BigDecimal.MIN_INT_VALUE;
            if (this.intCompact !== 0 && (this.intVal === null || BigDecimal.bigIntSignum(this.intVal) !== 0))
                throw new RangeError(val > 0 ? 'Scale too high' : 'Scale too less');
        }
        return val;
    }
    /** @internal */
    static checkScale2(intCompact, val) {
        if (val > BigDecimal.MAX_INT_VALUE || val < BigDecimal.MIN_INT_VALUE) {
            val = (val > BigDecimal.MAX_INT_VALUE) ? BigDecimal.MAX_INT_VALUE : BigDecimal.MIN_INT_VALUE;
            if (intCompact !== 0) {
                throw new RangeError(val > 0 ? 'Scale too high' : 'Scale too less');
            }
        }
        return val;
    }
    /** @internal */
    static checkScale3(intVal, val) {
        if (val > BigDecimal.MAX_INT_VALUE || val < BigDecimal.MIN_INT_VALUE) {
            val = (val > BigDecimal.MAX_INT_VALUE) ? BigDecimal.MAX_INT_VALUE : BigDecimal.MIN_INT_VALUE;
            if (intVal !== BigDecimal.zeroBigInt) {
                throw new RangeError(val > 0 ? 'Scale too high' : 'Scale too less');
            }
        }
        return val;
    }
    /**
     * the same as checkScale where value!=0
     * @internal
     */
    static checkScaleNonZero(val) {
        if (val > BigDecimal.MAX_INT_VALUE || val < BigDecimal.MIN_INT_VALUE) {
            throw new RangeError(val > 0 ? 'Scale too high' : 'Scale too less');
        }
        return val;
    }
    /**
     * Divides `BigInt` value by ten power.
     * @internal
     */
    static divideAndRoundByTenPow(intVal, tenPow, roundingMode) {
        if (tenPow < BigDecimal.TEN_POWERS_TABLE.length)
            intVal = BigDecimal.divideAndRound5(intVal, BigDecimal.TEN_POWERS_TABLE[tenPow], roundingMode);
        else
            intVal = BigDecimal.divideAndRound6(intVal, BigInt(10) ** BigInt(tenPow), roundingMode);
        return intVal;
    }
    /**
     * Divides `number by `number and do rounding based on the
     * passed in roundingMode.
     * @internal
     */
    static divideAndRound(ldividend, ldivisor, roundingMode) {
        const q = Math.trunc(ldividend / ldivisor);
        if (roundingMode === RoundingMode.DOWN)
            return q;
        const r = ldividend % ldivisor;
        const qsign = ((ldividend < 0) === (ldivisor < 0)) ? 1 : -1;
        if (r !== 0) {
            const increment = BigDecimal.needIncrement(ldivisor, roundingMode, qsign, q, r);
            return increment ? q + qsign : q;
        }
        else {
            return q;
        }
    }
    /**
     * Compute this * 10 ^ n.
     * Needed mainly to allow special casing to trap zero value
     * @internal
     */
    bigMultiplyPowerTen(n) {
        if (n <= 0)
            return this.inflated();
        if (this.intCompact !== BigDecimal.INFLATED)
            return BigInt(10) ** BigInt(n) * BigInt(this.intCompact);
        else
            return this.intVal.valueOf() * BigInt(10) ** BigInt(n);
    }
    /** @internal */
    static bigMultiplyPowerTen2(value, n) {
        if (n <= 0)
            return BigInt(value);
        return BigInt(10) ** BigInt(n) * BigInt(value);
    }
    /** @internal */
    static bigMultiplyPowerTen3(value, n) {
        if (n <= 0)
            return value;
        if (n < BigDecimal.TEN_POWERS_TABLE.length) {
            return value.valueOf() * BigInt(BigDecimal.TEN_POWERS_TABLE[n]);
        }
        return BigInt(10) ** BigInt(n) * value.valueOf();
    }
    /** @internal */
    static zeroValueOf(scale) {
        if (scale >= 0 && scale < BigDecimal.ZERO_SCALED_BY.length)
            return BigDecimal.ZERO_SCALED_BY[scale];
        else
            return new BigDecimal(BigDecimal.zeroBigInt, 0, scale, 1);
    }
    precision() {
        let result = this._precision;
        if (result === 0) {
            const s = this.intCompact;
            if (s !== BigDecimal.INFLATED)
                result = BigDecimal.integerDigitLength(s);
            else
                result = BigDecimal.bigDigitLength(this.intVal);
            this._precision = result;
        }
        return result;
    }
    /**
     * Returns a `BigDecimal` rounded according to the MathContext
     * settings;
     * If rounding is needed a new `BigDecimal` is created and returned.
     *
     * @param val the value to be rounded
     * @param mc  the context to use.
     * @return a `BigDecimal` rounded according to the MathContext
     * settings.  May return `value`, if no rounding needed.
     * @throws RangeError if the rounding mode is
     *                             `RoundingMode.UNNECESSARY` and the
     *                             result is inexact.
     * @internal
     */
    static doRound(val, mc) {
        const mcp = mc.precision;
        let wasDivided = false;
        if (mcp > 0) {
            let intVal = val.intVal;
            let compactVal = val.intCompact;
            let scale = val._scale;
            let prec = val.precision();
            const mode = mc.roundingMode;
            let drop;
            if (compactVal === BigDecimal.INFLATED) {
                drop = prec - mcp;
                while (drop > 0) {
                    scale = BigDecimal.checkScaleNonZero(scale - drop);
                    intVal = BigDecimal.divideAndRoundByTenPow(intVal, drop, mode);
                    wasDivided = true;
                    compactVal = BigDecimal.compactValFor(intVal);
                    if (compactVal !== BigDecimal.INFLATED) {
                        prec = BigDecimal.integerDigitLength(compactVal);
                        break;
                    }
                    prec = BigDecimal.bigDigitLength(intVal);
                    drop = prec - mcp;
                }
            }
            if (compactVal !== BigDecimal.INFLATED) {
                drop = prec - mcp; // drop can't be more than 15
                while (drop > 0) {
                    scale = BigDecimal.checkScaleNonZero(scale - drop);
                    compactVal = BigDecimal.divideAndRound(compactVal, BigDecimal.TEN_POWERS_TABLE[drop], mc.roundingMode);
                    wasDivided = true;
                    prec = BigDecimal.integerDigitLength(compactVal);
                    drop = prec - mcp;
                    intVal = null;
                }
            }
            return wasDivided ? new BigDecimal(intVal, compactVal, scale, prec) : val;
        }
        return val;
    }
    /**
     * Returns length of a bigint
     * @internal
     */
    static bigDigitLength(b) {
        if (b < BigDecimal.zeroBigInt)
            b = b.valueOf() * BigDecimal.minusOneBigInt;
        return b.toString().length;
    }
    /**
     * Returns a `BigDecimal` created from `BigInt` value with
     * given scale rounded according to the MathContext settings
     * @internal
     */
    static doRound2(intVal, scale, mc) {
        const mcp = mc.precision;
        let prec = 0;
        if (mcp > 0) {
            let compactVal = BigDecimal.compactValFor(intVal);
            const mode = mc.roundingMode;
            let drop;
            if (compactVal === BigDecimal.INFLATED) {
                prec = BigDecimal.bigDigitLength(intVal);
                drop = prec - mcp;
                while (drop > 0) {
                    scale = BigDecimal.checkScaleNonZero(scale - drop);
                    intVal = BigDecimal.divideAndRoundByTenPow(intVal, drop, mode);
                    compactVal = BigDecimal.compactValFor(intVal);
                    if (compactVal !== BigDecimal.INFLATED) {
                        break;
                    }
                    prec = BigDecimal.bigDigitLength(intVal);
                    drop = prec - mcp;
                }
            }
            if (compactVal !== BigDecimal.INFLATED) {
                prec = BigDecimal.integerDigitLength(compactVal);
                drop = prec - mcp; // drop can't be more than 18
                while (drop > 0) {
                    scale = BigDecimal.checkScaleNonZero(scale - drop);
                    compactVal = BigDecimal.divideAndRound(compactVal, BigDecimal.TEN_POWERS_TABLE[drop], mc.roundingMode);
                    prec = BigDecimal.integerDigitLength(compactVal);
                    drop = prec - mcp;
                }
                return BigDecimal.fromInteger2(compactVal, scale, prec);
            }
        }
        return new BigDecimal(intVal, BigDecimal.INFLATED, scale, prec);
    }
    /**
     * Returns a `BigDecimal` created from `number` value with
     * given scale rounded according to the MathContext settings
     * @internal
     */
    static doRound3(compactVal, scale, mc) {
        const mcp = mc.precision;
        if (mcp > 0 && mcp < 16) {
            let prec = BigDecimal.integerDigitLength(compactVal);
            let drop = prec - mcp; // drop can't be more than 15
            while (drop > 0) {
                scale = BigDecimal.checkScaleNonZero(scale - drop);
                compactVal = BigDecimal.divideAndRound(compactVal, BigDecimal.TEN_POWERS_TABLE[drop], mc.roundingMode);
                prec = BigDecimal.integerDigitLength(compactVal);
                drop = prec - mcp;
            }
            return BigDecimal.fromInteger2(compactVal, scale, prec);
        }
        return BigDecimal.fromInteger3(compactVal, scale);
    }
    /** @internal */
    static stripZerosToMatchScale(intVal, intCompact, scale, preferredScale) {
        if (intCompact !== BigDecimal.INFLATED) {
            return BigDecimal.createAndStripZerosToMatchScale(intCompact, scale, preferredScale);
        }
        else {
            return BigDecimal.createAndStripZerosToMatchScale2(intVal === null ? BigDecimal.INFLATED_BIGINT : intVal.valueOf(), scale, preferredScale);
        }
    }
    /**
     * Remove insignificant trailing zeros from this
     * value until the preferred scale is reached or no
     * more zeros can be removed. If the preferred scale is less than
     * BigDecimal.MIN_INT_VALUE, all the trailing zeros will be removed.
     *
     * @return new `BigDecimal` with a scale possibly reduced
     * to be closed to the preferred scale.
     * @throws RangeError if scale overflows.
     * @internal
     */
    static createAndStripZerosToMatchScale(compactVal, scale, preferredScale) {
        while (Math.abs(compactVal) >= 10 && scale > preferredScale) {
            if ((compactVal & 1) !== 0)
                break;
            const r = compactVal % 10;
            if (r !== 0)
                break;
            compactVal /= 10;
            scale = this.checkScale2(compactVal, scale - 1);
        }
        return BigDecimal.fromInteger3(compactVal, scale);
    }
    /**
     * Remove insignificant trailing zeros from this
     * bigint value until the preferred scale is reached or no
     * more zeros can be removed. If the preferred scale is less than
     * BigDecimal.MIN_INT_VALUE, all the trailing zeros will be removed.
     *
     * @return new `BigDecimal` with a scale possibly reduced
     * to be closed to the preferred scale.
     * @throws RangeError if scale overflows.
     * @internal
     */
    static createAndStripZerosToMatchScale2(intVal, scale, preferredScale) {
        let qr;
        while (BigDecimal.bigIntCompareMagnitude(intVal, BigInt(10)) >= 0 && scale > preferredScale) {
            if (intVal.valueOf() % BigDecimal.twoBigInt === BigDecimal.oneBigInt)
                break;
            qr = [intVal.valueOf() / BigInt(10), intVal.valueOf() % BigInt(10)];
            if (BigDecimal.bigIntSignum(qr[1]) !== 0)
                break;
            intVal = qr[0];
            scale = this.checkScale3(intVal, scale - 1);
        }
        return BigDecimal.fromBigInt5(intVal, scale, 0);
    }
    /**
     * Match the scales of two `BigDecimal`s to align their
     * least significant digits.
     *
     * If the scales of val[0] and val[1] differ, rescale
     * (non-destructively) the lower-scaled `BigDecimal` so
     * they match.  That is, the lower-scaled reference will be
     * replaced by a reference to a new object with the same scale as
     * the other `BigDecimal`.
     *
     * @param val array of two elements referring to the two
     *            `BigDecimal`s to be aligned.
     * @internal
     */
    static matchScale(val) {
        if (val[0]._scale < val[1]._scale) {
            val[0] = val[0].setScale(val[1]._scale, RoundingMode.UNNECESSARY);
        }
        else if (val[1]._scale < val[0]._scale) {
            val[1] = val[1].setScale(val[0]._scale, RoundingMode.UNNECESSARY);
        }
    }
    /**
     * Returns an array of length two, the sum of whose entries is
     * equal to the rounded sum of the `BigDecimal` arguments.
     *
     * If the digit positions of the arguments have a sufficient
     * gap between them, the value smaller in magnitude can be
     * condensed into a "sticky bit" and the end result will
     * round the same way <em>if</em> the precision of the final
     * result does not include the high order digit of the small
     * magnitude operand.
     *
     * Note that while strictly speaking this is an optimization,
     * it makes a much wider range of additions practical.
     *
     * This corresponds to a pre-shift operation in a fixed
     * precision floating-point adder; this method is complicated by
     * variable precision of the result as determined by the
     * MathContext.  A more nuanced operation could implement a
     * "right shift" on the smaller magnitude operand so
     * that the number of digits of the smaller operand could be
     * reduced even though the significands partially overlapped.
     * @internal
     */
    preAlign(augend, padding, mc) {
        let big;
        let small;
        if (padding < 0) {
            big = this;
            small = augend;
        }
        else {
            big = augend;
            small = this;
        }
        const estResultUlpScale = big._scale - big.precision() + mc.precision;
        const smallHighDigitPos = small._scale - small.precision() + 1;
        if (smallHighDigitPos > big._scale + 2 &&
            smallHighDigitPos > estResultUlpScale + 2) {
            small = BigDecimal.fromInteger3(small.signum(), this.checkScale(Math.max(big._scale, estResultUlpScale) + 3));
        }
        return [big, small];
    }
    /**
     * Returns a `BigDecimal` whose value is `(-this)`,
     * with rounding according to the context settings.
     *
     * @param mc the context to use.
     * @return `-this`, rounded as necessary.
     */
    negate(mc) {
        let result = this.intCompact === BigDecimal.INFLATED ?
            new BigDecimal(BigDecimal.minusOneBigInt * this.intVal.valueOf(), BigDecimal.INFLATED, this._scale, this._precision) :
            BigDecimal.fromInteger2(-this.intCompact, this._scale, this._precision);
        if (mc) {
            result = result.plus(mc);
        }
        return result;
    }
    /**
     * Returns a `BigDecimal` whose value is `(this + augend)`,
     * with rounding according to the context settings.
     *
     * If either number is zero and the precision setting is nonzero then
     * the other number, rounded if necessary, is used as the result.
     *
     * @param augend value to be added to this `BigDecimal`. This value will
     * be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @return `this + augend`, rounded as necessary.
     */
    add(augend, mc) {
        augend = BigDecimal.convertToBigDecimal(augend);
        if (!mc || (mc && mc.precision === 0)) {
            if (this.intCompact !== BigDecimal.INFLATED) {
                if (augend.intCompact !== BigDecimal.INFLATED) {
                    return BigDecimal.add3(this.intCompact, this._scale, augend.intCompact, augend._scale);
                }
                else {
                    return BigDecimal.add2(this.intCompact, this._scale, augend.intVal, augend._scale);
                }
            }
            else {
                if (augend.intCompact !== BigDecimal.INFLATED) {
                    return BigDecimal.add2(augend.intCompact, augend._scale, this.intVal, this._scale);
                }
                else {
                    return BigDecimal.add1(this.intVal, this._scale, augend.intVal, augend._scale);
                }
            }
        }
        // If either number is zero then the other number, rounded and
        // scaled if necessary, is used as the result.
        let lhs = this;
        const lhsIsZero = lhs.signum() === 0;
        const augendIsZero = augend.signum() === 0;
        if (lhsIsZero || augendIsZero) {
            const preferredScale = Math.max(lhs._scale, augend._scale);
            if (lhsIsZero && augendIsZero)
                return BigDecimal.zeroValueOf(preferredScale);
            const result = lhsIsZero ? BigDecimal.doRound(augend, mc) : BigDecimal.doRound(lhs, mc);
            if (result._scale === preferredScale)
                return result;
            else if (result._scale > preferredScale) {
                return BigDecimal.stripZerosToMatchScale(result.intVal, result.intCompact, result._scale, preferredScale);
            }
            else { // result.scale < preferredScale
                const precisionDiff = mc.precision - result.precision();
                const scaleDiff = preferredScale - result._scale;
                if (precisionDiff >= scaleDiff)
                    return result.setScale(preferredScale); // can achieve target scale
                else
                    return result.setScale(result._scale + precisionDiff);
            }
        }
        const padding = lhs._scale - augend._scale;
        if (padding !== 0) { // scales differ; alignment needed
            const arg = this.preAlign(augend, padding, mc);
            BigDecimal.matchScale(arg);
            lhs = arg[0];
            augend = arg[1];
        }
        return BigDecimal.doRound2(lhs.inflated().valueOf() + augend.inflated().valueOf(), lhs._scale, mc);
    }
    /**
     * Returns a `BigDecimal` whose value is `(this - subtrahend)`,
     * with rounding according to the context settings.
     *
     * If `subtrahend` is zero then this, rounded if necessary, is used as the
     * result.  If this is zero then the result is `subtrahend.negate(mc)`.
     *
     * @param subtrahend value to be subtracted from this `BigDecimal`. This value
     * will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @return `this - subtrahend`, rounded as necessary.
     */
    subtract(subtrahend, mc) {
        subtrahend = BigDecimal.convertToBigDecimal(subtrahend);
        if (!mc || (mc && mc.precision === 0)) {
            if (this.intCompact !== BigDecimal.INFLATED) {
                if ((subtrahend.intCompact !== BigDecimal.INFLATED)) {
                    return BigDecimal.add3(this.intCompact, this._scale, -subtrahend.intCompact, subtrahend._scale);
                }
                else {
                    return BigDecimal.add2(this.intCompact, this._scale, BigDecimal.minusOneBigInt * subtrahend.intVal.valueOf(), subtrahend._scale);
                }
            }
            else {
                if ((subtrahend.intCompact !== BigDecimal.INFLATED)) {
                    // Pair of subtrahend values given before pair of
                    // values from this BigDecimal to avoid need for
                    // method overloading on the specialized add method
                    return BigDecimal.add2(-subtrahend.intCompact, subtrahend._scale, this.intVal, this._scale);
                }
                else {
                    return BigDecimal.add1(this.intVal, this._scale, BigDecimal.minusOneBigInt * subtrahend.intVal.valueOf(), subtrahend._scale);
                }
            }
        }
        // share the special rounding code in add()
        return this.add(subtrahend.negate(), mc);
    }
    /**
     * Returns a `BigDecimal` whose value is <code>(this &times;
     * multiplicand)</code>, with rounding according to the context settings.
     *
     * @param multiplicand value to be multiplied by this `BigDecimal`. This
     * value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @return `this * multiplicand`, rounded as necessary.
     */
    multiply(multiplicand, mc) {
        multiplicand = BigDecimal.convertToBigDecimal(multiplicand);
        if (!mc || (mc && mc.precision === 0)) {
            const productScale = this.checkScale(this._scale + multiplicand._scale);
            if (this.intCompact !== BigDecimal.INFLATED) {
                if ((multiplicand.intCompact !== BigDecimal.INFLATED)) {
                    return BigDecimal.multiply2(this.intCompact, multiplicand.intCompact, productScale);
                }
                else {
                    return BigDecimal.multiply3(this.intCompact, multiplicand.intVal, productScale);
                }
            }
            else {
                if ((multiplicand.intCompact !== BigDecimal.INFLATED)) {
                    return BigDecimal.multiply3(multiplicand.intCompact, this.intVal, productScale);
                }
                else {
                    return BigDecimal.multiply4(this.intVal, multiplicand.intVal, productScale);
                }
            }
        }
        const productScale = this.checkScale(this._scale + multiplicand._scale);
        if (this.intCompact !== BigDecimal.INFLATED) {
            if ((multiplicand.intCompact !== BigDecimal.INFLATED)) {
                return BigDecimal.multiplyAndRound1(this.intCompact, multiplicand.intCompact, productScale, mc);
            }
            else {
                return BigDecimal.multiplyAndRound2(this.intCompact, multiplicand.intVal, productScale, mc);
            }
        }
        else {
            if ((multiplicand.intCompact !== BigDecimal.INFLATED)) {
                return BigDecimal.multiplyAndRound2(multiplicand.intCompact, this.intVal, productScale, mc);
            }
            else {
                return BigDecimal.multiplyAndRound3(this.intVal, multiplicand.intVal, productScale, mc);
            }
        }
    }
    /**
     * Returns a `BigDecimal` whose value is `(this / divisor)`,
     * and whose scale is as specified.  If rounding must
     * be performed to generate a result with the specified scale, the
     * specified rounding mode is applied.
     *
     * @param divisor value by which this `BigDecimal` is to be divided.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param scale scale of the `BigDecimal` quotient to be returned.
     * @param roundingMode rounding mode to apply.
     * @return `this / divisor`
     * @throws RangeError
     * * If `divisor` is zero
     * * If `roundingMode==RoundingMode.UNNECESSARY` and the specified scale is insufficient to represent the result
     *   of the division exactly.
     * * If scale is given but rounding mode is not given.
     */
    divide(divisor, scale, roundingMode) {
        divisor = BigDecimal.convertToBigDecimal(divisor);
        /*
         * Handle zero cases first.
         */
        if (divisor.signum() === 0) {
            if (this.signum() === 0)
                throw new RangeError('Division undefined');
            throw new RangeError('Division by zero');
        }
        if (roundingMode === undefined) {
            if (scale !== undefined) {
                throw new RangeError('Rounding mode is necessary if scale is given.');
            }
            else {
                return this.divide6(divisor);
            }
        }
        else {
            if (scale === undefined) {
                scale = this._scale;
            }
            if (roundingMode < RoundingMode.UP || roundingMode > RoundingMode.UNNECESSARY)
                throw new RangeError('Invalid rounding mode');
            if (this.intCompact !== BigDecimal.INFLATED) {
                if ((divisor.intCompact !== BigDecimal.INFLATED)) {
                    return BigDecimal.divide7(this.intCompact, this._scale, divisor.intCompact, divisor._scale, scale, roundingMode);
                }
                else {
                    return BigDecimal.divide8(this.intCompact, this._scale, divisor.intVal, divisor._scale, scale, roundingMode);
                }
            }
            else {
                if ((divisor.intCompact !== BigDecimal.INFLATED)) {
                    return BigDecimal.divide9(this.intVal, this._scale, divisor.intCompact, divisor._scale, scale, roundingMode);
                }
                else {
                    return BigDecimal.divide10(this.intVal, this._scale, divisor.intVal, divisor._scale, scale, roundingMode);
                }
            }
        }
    }
    /** @internal */
    static saturateScale(scale) {
        if (scale <= BigDecimal.MAX_INT_VALUE && scale >= BigDecimal.MIN_INT_VALUE) {
            return scale;
        }
        else {
            return (scale < 0 ? BigDecimal.MIN_INT_VALUE : BigDecimal.MAX_INT_VALUE);
        }
    }
    /** @internal */
    divide6(divisor) {
        // Calculate preferred scale
        const preferredScale = BigDecimal.saturateScale(this._scale - divisor._scale);
        if (this.signum() === 0) // 0/y
            return BigDecimal.zeroValueOf(preferredScale);
        else {
            /*
             * If the quotient this/divisor has a terminating decimal
             * expansion, the expansion can have no more than
             * (a.precision() + ceil(10*b.precision)/3) digits.
             * Therefore, create a MathContext object with this
             * precision and do a divide with the UNNECESSARY rounding
             * mode.
             */
            const mc = new MathContext(Math.min(this.precision() + Math.ceil(10.0 * divisor.precision() / 3.0), BigDecimal.MAX_INT_VALUE), RoundingMode.UNNECESSARY);
            let quotient;
            try {
                quotient = this.divideWithMathContext(divisor, mc);
            }
            catch (e) {
                throw new RangeError('Non-terminating decimal expansion; ' +
                    'no exact representable decimal result.');
            }
            const quotientScale = quotient.scale();
            // divide(BigDecimal, mc) tries to adjust the quotient to
            // the desired one by removing trailing zeros; since the
            // exact divide method does not have an explicit digit
            // limit, we can add zeros too.
            if (preferredScale > quotientScale)
                return quotient.setScale(preferredScale, RoundingMode.UNNECESSARY);
            return quotient;
        }
    }
    /**
     * Returns a `BigDecimal` whose value is `(this /
     * divisor)`, with rounding according to the context settings.
     *
     * @param divisor value by which this `BigDecimal` is to be divided.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @throws RangeError if the exact quotient does not have a
     *         terminating decimal expansion, including dividing by zero
     * @return `this / divisor`
     */
    divideWithMathContext(divisor, mc) {
        divisor = BigDecimal.convertToBigDecimal(divisor);
        if (divisor.signum() === 0) { // x/0
            if (this.signum() === 0) // 0/0
                throw new RangeError('Division undefined'); // NaN
            throw new RangeError('Division by zero');
        }
        if (!mc || (mc && mc.precision === 0)) {
            const preferredScale = BigDecimal.saturateScale(this._scale - divisor._scale);
            if (this.signum() === 0)
                return BigDecimal.zeroValueOf(preferredScale);
            else {
                const mc = new MathContext(Math.min(this.precision() + Math.ceil(10.0 * divisor.precision() / 3.0), Number.MAX_SAFE_INTEGER), RoundingMode.UNNECESSARY);
                let quotient;
                try {
                    quotient = this.divideWithMathContext(divisor, mc);
                }
                catch (e) {
                    throw new RangeError('Non-terminating decimal expansion; no exact representable decimal result.');
                }
                const quotientScale = quotient._scale;
                if (preferredScale > quotientScale)
                    return quotient.setScale(preferredScale, RoundingMode.UNNECESSARY);
                return quotient;
            }
        }
        const preferredScale = this._scale - divisor._scale;
        // Now calculate the answer.  We use the existing
        // divide-and-round method, but as this rounds to scale we have
        // to normalize the values here to achieve the desired result.
        // For x/y we first handle y=0 and x=0, and then normalize x and
        // y to give x' and y' with the following constraints:
        //   (a) 0.1 <= x' < 1
        //   (b)  x' <= y' < 10*x'
        // Dividing x'/y' with the required scale set to mc.precision then
        // will give a result in the range 0.1 to 1 rounded to exactly
        // the right number of digits (except in the case of a result of
        // 1.000... which can arise when x=y, or when rounding overflows
        // The 1.000... case will reduce properly to 1.
        if (this.signum() === 0)
            return BigDecimal.zeroValueOf(BigDecimal.saturateScale(preferredScale));
        const xscale = this.precision();
        const yscale = divisor.precision();
        if (this.intCompact !== BigDecimal.INFLATED) {
            if (divisor.intCompact !== BigDecimal.INFLATED) {
                return BigDecimal.divide2(this.intCompact, xscale, divisor.intCompact, yscale, preferredScale, mc);
            }
            else {
                return BigDecimal.divide3(this.intCompact, xscale, divisor.intVal, yscale, preferredScale, mc);
            }
        }
        else {
            if (divisor.intCompact !== BigDecimal.INFLATED) {
                return BigDecimal.divide4(this.intVal, xscale, divisor.intCompact, yscale, preferredScale, mc);
            }
            else {
                return BigDecimal.divide5(this.intVal, xscale, divisor.intVal, yscale, preferredScale, mc);
            }
        }
    }
    /** @internal */
    static multiply1(x, y) {
        const product = x * y;
        if (product <= Number.MAX_SAFE_INTEGER && product > Number.MIN_SAFE_INTEGER) {
            return product;
        }
        return BigDecimal.INFLATED;
    }
    /** @internal */
    static multiply2(x, y, scale) {
        const product = BigDecimal.multiply1(x, y);
        if (product !== BigDecimal.INFLATED) {
            return BigDecimal.fromInteger3(product, scale);
        }
        return new BigDecimal(BigInt(x) * BigInt(y), BigDecimal.INFLATED, scale, 0);
    }
    /** @internal */
    static multiply3(x, y, scale) {
        if (x === 0) {
            return BigDecimal.zeroValueOf(scale);
        }
        return new BigDecimal(y.valueOf() * BigInt(x), BigDecimal.INFLATED, scale, 0);
    }
    /** @internal */
    static multiply4(x, y, scale) {
        return new BigDecimal(x.valueOf() * y.valueOf(), BigDecimal.INFLATED, scale, 0);
    }
    /**
     * Multiplies two integers and rounds according to `MathContext`
     * @internal
     */
    static multiplyAndRound1(x, y, scale, mc) {
        const product = BigDecimal.multiply1(x, y);
        if (product !== BigDecimal.INFLATED) {
            return BigDecimal.doRound3(product, scale, mc);
        }
        let rsign = 1;
        if (x < 0) {
            x = -x;
            rsign = -1;
        }
        if (y < 0) {
            y = -y;
            rsign *= -1;
        }
        const res = new BigDecimal(BigInt(x) * BigInt(y) * BigInt(rsign), BigDecimal.INFLATED, scale, 0);
        return BigDecimal.doRound(res, mc);
    }
    /** @internal */
    static multiplyAndRound2(x, y, scale, mc) {
        if (x === 0) {
            return BigDecimal.zeroValueOf(scale);
        }
        return BigDecimal.doRound2(y.valueOf() * BigInt(x), scale, mc);
    }
    /** @internal */
    static multiplyAndRound3(x, y, scale, mc) {
        return BigDecimal.doRound2(x.valueOf() * y.valueOf(), scale, mc);
    }
    /** @internal */
    static divide2(xs, xscale, ys, yscale, preferredScale, mc) {
        const mcp = mc.precision;
        if (xscale <= yscale && yscale < 15 && mcp < 15) {
            return BigDecimal.divideSmallFastPath(xs, xscale, ys, yscale, preferredScale, mc);
        }
        if (BigDecimal.compareMagnitudeNormalized(xs, xscale, ys, yscale) > 0) { // satisfy constraint (b)
            yscale -= 1; // [that is, divisor *= 10]
        }
        const roundingMode = mc.roundingMode;
        // In order to find out whether the divide generates the exact result,
        // we avoid calling the above divide method. 'quotient' holds the
        // return BigDecimal object whose scale will be set to 'scl'.
        const scl = BigDecimal.checkScaleNonZero(preferredScale + yscale - xscale + mcp);
        let quotient;
        if (BigDecimal.checkScaleNonZero(mcp + yscale - xscale) > 0) {
            const raise = BigDecimal.checkScaleNonZero(mcp + yscale - xscale);
            let scaledXs;
            if ((scaledXs = BigDecimal.integerMultiplyPowerTen(xs, raise)) === BigDecimal.INFLATED) {
                const rb = BigDecimal.bigMultiplyPowerTen2(xs, raise);
                quotient = BigDecimal.divideAndRound4(rb, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
            }
            else {
                quotient = BigDecimal.divideAndRound2(scaledXs, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
            }
        }
        else {
            const newScale = BigDecimal.checkScaleNonZero(xscale - mcp);
            if (newScale === yscale) { // easy case
                quotient = BigDecimal.divideAndRound2(xs, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
            }
            else {
                const raise = BigDecimal.checkScaleNonZero(newScale - yscale);
                let scaledYs;
                if ((scaledYs = BigDecimal.integerMultiplyPowerTen(ys, raise)) === BigDecimal.INFLATED) {
                    const rb = BigDecimal.bigMultiplyPowerTen2(ys, raise);
                    quotient = BigDecimal.divideAndRound3(BigInt(xs), rb, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
                else {
                    quotient = BigDecimal.divideAndRound2(xs, scaledYs, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
            }
        }
        // doRound, here, only affects 1000000000 case.
        return BigDecimal.doRound(quotient, mc);
    }
    /** @internal */
    static divide3(xs, xscale, ys, yscale, preferredScale, mc) {
        // Normalize dividend & divisor so that both fall into [0.1, 0.999...]
        if (BigDecimal.compareMagnitudeNormalized2(xs, xscale, ys, yscale) > 0) { // satisfy constraint (b)
            yscale -= 1; // [that is, divisor *= 10]
        }
        const mcp = mc.precision;
        const roundingMode = mc.roundingMode;
        // In order to find out whether the divide generates the exact result,
        // we avoid calling the above divide method. 'quotient' holds the
        // return BigDecimal object whose scale will be set to 'scl'.
        let quotient;
        const scl = BigDecimal.checkScaleNonZero(preferredScale + yscale - xscale + mcp);
        if (BigDecimal.checkScaleNonZero(mcp + yscale - xscale) > 0) {
            const raise = BigDecimal.checkScaleNonZero(mcp + yscale - xscale);
            const rb = BigDecimal.bigMultiplyPowerTen2(xs, raise);
            quotient = BigDecimal.divideAndRound3(rb, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
        }
        else {
            const newScale = BigDecimal.checkScaleNonZero(xscale - mcp);
            const raise = BigDecimal.checkScaleNonZero(newScale - yscale);
            const rb = BigDecimal.bigMultiplyPowerTen3(ys, raise);
            quotient = BigDecimal.divideAndRound3(BigInt(xs), rb, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
        }
        // doRound, here, only affects 1000000000 case.
        return BigDecimal.doRound(quotient, mc);
    }
    /** @internal */
    static divide4(xs, xscale, ys, yscale, preferredScale, mc) {
        // Normalize dividend & divisor so that both fall into [0.1, 0.999...]
        if ((-BigDecimal.compareMagnitudeNormalized2(ys, yscale, xs, xscale)) > 0) { // satisfy constraint (b)
            yscale -= 1; // [that is, divisor *= 10]
        }
        const mcp = mc.precision;
        const roundingMode = mc.roundingMode;
        // In order to find out whether the divide generates the exact result,
        // we avoid calling the above divide method. 'quotient' holds the
        // return BigDecimal object whose scale will be set to 'scl'.
        let quotient;
        const scl = BigDecimal.checkScaleNonZero(preferredScale + yscale - xscale + mcp);
        if (BigDecimal.checkScaleNonZero(mcp + yscale - xscale) > 0) {
            const raise = BigDecimal.checkScaleNonZero(mcp + yscale - xscale);
            const rb = BigDecimal.bigMultiplyPowerTen3(xs, raise);
            quotient = BigDecimal.divideAndRound4(rb, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
        }
        else {
            const newScale = BigDecimal.checkScaleNonZero(xscale - mcp);
            if (newScale === yscale) { // easy case
                quotient = BigDecimal.divideAndRound4(xs, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
            }
            else {
                const raise = BigDecimal.checkScaleNonZero(newScale - yscale);
                let scaledYs;
                if ((scaledYs = BigDecimal.integerMultiplyPowerTen(ys, raise)) === BigDecimal.INFLATED) {
                    const rb = BigDecimal.bigMultiplyPowerTen2(ys, raise);
                    quotient = BigDecimal.divideAndRound3(xs, rb, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
                else {
                    quotient = BigDecimal.divideAndRound4(xs, scaledYs, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
            }
        }
        // doRound, here, only affects 1000000000 case.
        return BigDecimal.doRound(quotient, mc);
    }
    /** @internal */
    static divide5(xs, xscale, ys, yscale, preferredScale, mc) {
        // Normalize dividend & divisor so that both fall into [0.1, 0.999...]
        if (BigDecimal.compareMagnitudeNormalized3(xs, xscale, ys, yscale) > 0) { // satisfy constraint (b)
            yscale -= 1; // [that is, divisor *= 10]
        }
        const mcp = mc.precision;
        const roundingMode = mc.roundingMode;
        // In order to find out whether the divide generates the exact result,
        // we avoid calling the above divide method. 'quotient' holds the
        // return BigDecimal object whose scale will be set to 'scl'.
        let quotient;
        const scl = BigDecimal.checkScaleNonZero(preferredScale + yscale - xscale + mcp);
        if (BigDecimal.checkScaleNonZero(mcp + yscale - xscale) > 0) {
            const raise = BigDecimal.checkScaleNonZero(mcp + yscale - xscale);
            const rb = BigDecimal.bigMultiplyPowerTen3(xs, raise);
            quotient = BigDecimal.divideAndRound3(rb, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
        }
        else {
            const newScale = BigDecimal.checkScaleNonZero(xscale - mcp);
            const raise = BigDecimal.checkScaleNonZero(newScale - yscale);
            const rb = BigDecimal.bigMultiplyPowerTen3(ys, raise);
            quotient = BigDecimal.divideAndRound3(xs, rb, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
        }
        // doRound, here, only affects 1000000000 case.
        return BigDecimal.doRound(quotient, mc);
    }
    /**
     * Returns a `BigDecimal` whose value is the integer part
     * of `(this / divisor)`.  Since the integer part of the
     * exact quotient does not depend on the rounding mode, the
     * rounding mode does not affect the values returned by this
     * method.  The preferred scale of the result is
     * `(this.scale() - divisor.scale())`. A
     * `RangeError` is thrown if the integer part of
     * the exact quotient needs more than `mc.precision`
     * digits.
     *
     * @param divisor value by which this `BigDecimal` is to be divided.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @return The integer part of `this / divisor`.
     * @throws RangeError if divisor is 0
     * @throws RangeError if `mc.precision > 0` and the result
     *         requires a precision of more than `mc.precision` digits.
     */
    divideToIntegralValue(divisor, mc) {
        divisor = BigDecimal.convertToBigDecimal(divisor);
        if (!mc || (mc && (mc.precision === 0 || this.compareMagnitude(divisor) < 0))) {
            // Calculate preferred scale
            const preferredScale = BigDecimal.saturateScale(this._scale - divisor._scale);
            if (this.compareMagnitude(divisor) < 0) {
                // much faster when this << divisor
                return BigDecimal.zeroValueOf(preferredScale);
            }
            if (this.signum() === 0 && divisor.signum() !== 0)
                return this.setScale(preferredScale, RoundingMode.UNNECESSARY);
            // Perform a divide with enough digits to round to a correct
            // integer value; then remove any fractional digits
            const maxDigits = Math.min(this.precision() + Math.ceil(10.0 * divisor.precision() / 3.0) + Math.abs(this._scale - divisor._scale) + 2, Number.MAX_SAFE_INTEGER);
            let quotient = this.divideWithMathContext(divisor, new MathContext(maxDigits, RoundingMode.DOWN));
            if (quotient._scale > 0) {
                quotient = quotient.setScale(0, RoundingMode.DOWN);
                quotient = BigDecimal.stripZerosToMatchScale(quotient.intVal, quotient.intCompact, quotient._scale, preferredScale);
            }
            if (quotient._scale < preferredScale) {
                // pad with zeros if necessary
                quotient = quotient.setScale(preferredScale, RoundingMode.UNNECESSARY);
            }
            return quotient;
        }
        // Calculate preferred scale
        const preferredScale = BigDecimal.saturateScale(this._scale - divisor._scale);
        /*
         * Perform a normal divide to mc.precision digits.  If the
         * remainder has absolute value less than the divisor, the
         * integer portion of the quotient fits into mc.precision
         * digits.  Next, remove any fractional digits from the
         * quotient and adjust the scale to the preferred value.
         */
        let result = this.divideWithMathContext(divisor, new MathContext(mc.precision, RoundingMode.DOWN));
        if (result._scale < 0) {
            /*
             * Result is an integer. See if quotient represents the
             * full integer portion of the exact quotient; if it does,
             * the computed remainder will be less than the divisor.
             */
            const product = result.multiply(divisor);
            // If the quotient is the full integer value,
            // |dividend-product| < |divisor|.
            if (this.subtract(product).compareMagnitude(divisor) >= 0) {
                throw new RangeError('Division impossible');
            }
        }
        else if (result._scale > 0) {
            /*
             * Integer portion of quotient will fit into precision
             * digits; recompute quotient to scale 0 to avoid double
             * rounding and then try to adjust, if necessary.
             */
            result = result.setScale(0, RoundingMode.DOWN);
        }
        // else result.scale() == 0;
        let precisionDiff;
        if ((preferredScale > result._scale) &&
            (precisionDiff = mc.precision - result.precision()) > 0) {
            return result.setScale(result._scale + Math.min(precisionDiff, preferredScale - result._scale));
        }
        else {
            return BigDecimal.stripZerosToMatchScale(result.intVal, result.intCompact, result._scale, preferredScale);
        }
    }
    /**
     * Returns a `BigDecimal` whose value is `(this % divisor)`, with rounding according to the context settings.
     * The `MathContext` settings affect the implicit divide
     * used to compute the remainder.  The remainder computation
     * itself is by definition exact.  Therefore, the remainder may
     * contain more than `mc.getPrecision()` digits.
     *
     * The remainder is given by
     * `this.subtract(this.divideToIntegralValue(divisor,
     * mc).multiply(divisor))`.  Note that this is not the modulo
     * operation (the result can be negative).
     *
     * @param divisor value by which this `BigDecimal` is to be divided.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @return `this % divisor`, rounded as necessary.
     * @throws RangeError if divisor is 0
     * @throws RangeError if the result is inexact but the
     *         rounding mode is `UNNECESSARY`, or `mc.precision`
     *         > 0 and the result of `this.divideToIntegralValue(divisor)` would
     *         require a precision of more than `mc.precision` digits.
     * @see    {@link divideToIntegralValue}
     */
    remainder(divisor, mc) {
        return this.divideAndRemainder(divisor, mc)[1];
    }
    /**
     * Version of compareTo that ignores sign.
     * @internal
     */
    compareMagnitude(val) {
        // Match scales, avoid unnecessary inflation
        let ys = val.intCompact;
        let xs = this.intCompact;
        if (xs === 0)
            return (ys === 0) ? 0 : -1;
        if (ys === 0)
            return 1;
        const sdiff = this._scale - val._scale;
        if (sdiff !== 0) {
            // Avoid matching scales if the (adjusted) exponents differ
            const xae = this.precision() - this._scale; // [-1]
            const yae = val.precision() - val._scale; // [-1]
            if (xae < yae)
                return -1;
            if (xae > yae)
                return 1;
            if (sdiff < 0) {
                // The cases sdiff <= BigDecimal.MIN_INT_VALUE intentionally fall through.
                if (sdiff > Number.MIN_SAFE_INTEGER &&
                    (xs === BigDecimal.INFLATED ||
                        (xs = BigDecimal.integerMultiplyPowerTen(xs, -sdiff)) === BigDecimal.INFLATED) &&
                    ys === BigDecimal.INFLATED) {
                    const rb = this.bigMultiplyPowerTen(-sdiff);
                    return BigDecimal.bigIntCompareMagnitude(rb, val.intVal);
                }
            }
            else { // sdiff > 0
                // The cases sdiff > Integer.MAX_INT_VALUE intentionally fall through.
                if (sdiff <= Number.MAX_SAFE_INTEGER &&
                    (ys === BigDecimal.INFLATED ||
                        (ys = BigDecimal.integerMultiplyPowerTen(ys, sdiff)) === BigDecimal.INFLATED) &&
                    xs === BigDecimal.INFLATED) {
                    const rb = val.bigMultiplyPowerTen(sdiff);
                    return BigDecimal.bigIntCompareMagnitude(this.intVal, rb);
                }
            }
        }
        if (xs !== BigDecimal.INFLATED)
            return (ys !== BigDecimal.INFLATED) ? BigDecimal.integerCompareMagnitude(xs, ys) : -1;
        else if (ys !== BigDecimal.INFLATED)
            return 1;
        else
            return BigDecimal.bigIntCompareMagnitude(this.intVal, val.intVal);
    }
    /**
     * Compares this `BigDecimal` with the specified
     * object for equality.  Unlike {@link compareTo},
     * this method considers two `BigDecimal`
     * objects equal only if they are equal in value and
     * scale. Therefore 2.0 is not equal to 2.00 when compared by this
     * method since the former has [`BigInt`, `scale`]
     * components equal to [20, 1] while the latter has components
     * equal to [200, 2].
     *
     * One example that shows how 2.0 and 2.00 are **not**
     * substitutable for each other under some arithmetic operations
     * are the two expressions:
     *
     * ```
     * Big("2.0" ).divide(Big(3), undefined, HALF_UP) // which evaluates to 0.7
     *
     * Big("2.00").divide(Big(3), undefined, HALF_UP) // which evaluates to 0.67.
     *```
     *
     * @param value to which this `BigDecimal` is
     *         to be compared.
     * @return true if and only if the specified value is a
     *         BigDecimal whose value and scale are equal to this
     *         BigDecimal's.
     * @see    {@link compareTo}
     */
    equals(value) {
        if (!(value instanceof BigDecimal))
            return false;
        if (value === this)
            return true;
        if (this._scale !== value._scale)
            return false;
        const s = this.intCompact;
        let xs = value.intCompact;
        if (s !== BigDecimal.INFLATED) {
            if (xs === BigDecimal.INFLATED)
                xs = BigDecimal.compactValFor(value.intVal);
            return xs === s;
        }
        else if (xs !== BigDecimal.INFLATED)
            return xs === BigDecimal.compactValFor(this.intVal);
        return this.inflated() === value.inflated();
    }
    /**
     * Returns a two-element `BigDecimal` array containing the
     * result of `divideToIntegralValue` followed by the result of
     * `remainder` on the two operands calculated with rounding
     * according to the context settings.
     *
     * Note that if both the quotient and remainder are
     * needed, this method is faster than using the
     * `divideToIntegralValue` and `remainder` methods
     * separately because the division need only be carried out once.
     *
     * @param divisor value by which this `BigDecimal` is to be divided,
     *         and the remainder computed. This value will be converted to a
     *         `BigDecimal` before the operation. See the
     *         {@link Big | constructor} to learn more about the conversion.
     * @param mc the context to use.
     * @return a two element `BigDecimal` array: the quotient
     *         (the result of `divideToIntegralValue`) is the
     *         initial element and the remainder is the final element.
     * @throws RangeError if divisor is 0
     * @throws RangeError if the result is inexact but the
     *         rounding mode is `UNNECESSARY`, or `mc.precision > 0`
     *         and the result of `this.divideToIntegralValue(divisor)` would
     *         require a precision of more than `mc.precision` digits.
     * @see    {@link divideToIntegralValue}
     * @see    {@link remainder}
     */
    divideAndRemainder(divisor, mc) {
        divisor = BigDecimal.convertToBigDecimal(divisor);
        const result = new Array(2);
        result[0] = this.divideToIntegralValue(divisor, mc);
        result[1] = this.subtract(result[0].multiply(divisor));
        return result;
    }
    /**
     * Returns an approximation to the square root of `this`
     * with rounding according to the context settings.
     *
     * The preferred scale of the returned result is equal to
     * `this.scale()/2`. The value of the returned result is
     * always within one ulp of the exact decimal value for the
     * precision in question.  If the rounding mode is
     *  {@link RoundingMode.HALF_UP}, {@link RoundingMode.HALF_DOWN},
     * or {@link RoundingMode.HALF_EVEN}, the
     * result is within one half an ulp of the exact decimal value.
     *
     * @param mc the context to use.
     * @return the square root of `this`.
     * @throws RangeError if `this` is less than zero.
     * @throws RangeError if an exact result is requested
     * mc.getPrecision() is 0 and there is no finite decimal
     * expansion of the exact result
     * @throws RangeError if mc.getRoundingMode() is `RoundingMode.UNNECESSARY` and
     * the exact result cannot fit in `mc.getPrecision()`
     * digits.
     */
    sqrt(mc) {
        const signum = this.signum();
        if (signum !== 1) {
            let result = null;
            switch (signum) {
                case -1:
                    throw new RangeError('Attempted square root of negative BigDecimal');
                case 0:
                    result = BigDecimal.fromInteger3(0, Math.trunc(this._scale / 2));
                    return result;
                default:
                    throw new RangeError('Bad value from signum');
            }
        }
        else {
            /*
             * The following code draws on the algorithm presented in
             * "Properly Rounded Variable Precision Square Root," Hull and
             * Abrham, ACM Transactions on Mathematical Software, Vol 11,
             * No. 3, September 1985, Pages 229-237.
             *
             * The BigDecimal computational model differs from the one
             * presented in the paper in several ways: first BigDecimal
             * numbers aren't necessarily normalized, second many more
             * rounding modes are supported, including UNNECESSARY, and
             * exact results can be requested.
             *
             * The main steps of the algorithm below are as follows,
             * first argument reduce the value to the numerical range
             * [1, 10) using the following relations:
             *
             * x = y * 10 ^ exp
             * sqrt(x) = sqrt(y) * 10^(exp / 2) if exp is even
             * sqrt(x) = sqrt(y/10) * 10 ^((exp+1)/2) is exp is odd
             *
             * Then use Newton's iteration on the reduced value to compute
             * the numerical digits of the desired result.
             *
             * Finally, scale back to the desired exponent range and
             * perform any adjustment to get the preferred scale in the
             * representation.
             */
            // The code below favors relative simplicity over checking
            // for special cases that could run faster.
            const preferredScale = Math.trunc(this._scale / 2);
            const zeroWithFinalPreferredScale = BigDecimal.fromInteger3(0, preferredScale);
            // First phase of numerical normalization, strip trailing
            // zeros and check for even powers of 10.
            const stripped = this.stripTrailingZeros();
            const strippedScale = stripped._scale;
            // Numerically sqrt(10^2N) = 10^N
            if (stripped.isPowerOfTen() && strippedScale % 2 === 0) {
                let result = BigDecimal.fromInteger3(1, Math.trunc(strippedScale / 2));
                if (result._scale !== preferredScale) {
                    // Adjust to requested precision and preferred
                    // scale as appropriate.
                    result = result.add(zeroWithFinalPreferredScale, mc);
                }
                return result;
            }
            // After stripTrailingZeros, the representation is normalized as
            //
            // unscaledValue * 10^(-scale)
            //
            // where unscaledValue is an integer with the mimimum
            // precision for the cohort of the numerical value. To
            // allow binary floating-point hardware to be used to get
            // approximately a 15 digit approximation to the square
            // root, it is helpful to instead normalize this so that
            // the significand portion is to right of the decimal
            // point by roughly (scale() - precision() + 1).
            // Now the precision / scale adjustment
            let scaleAdjust;
            const scale = stripped._scale - stripped.precision() + 1;
            if (scale % 2 === 0) {
                scaleAdjust = scale;
            }
            else {
                scaleAdjust = scale - 1;
            }
            const working = stripped.scaleByPowerOfTen(scaleAdjust);
            // Use good ole' Math.sqrt to get the initial guess for
            // the Newton iteration, good to at least 15 decimal
            // digits. This approach does incur the cost of a
            //
            // BigDecimal -> double -> BigDecimal
            //
            // conversion cycle, but it avoids the need for several
            // Newton iterations in BigDecimal arithmetic to get the
            // working answer to 15 digits of precision. If many fewer
            // than 15 digits were needed, it might be faster to do
            // the loop entirely in BigDecimal arithmetic.
            //
            // (A double value might have as many as 17 decimal
            // digits of precision; it depends on the relative density
            // of binary and decimal numbers at different regions of
            // the number line.)
            //
            // (It would be possible to check for certain special
            // cases to avoid doing any Newton iterations. For
            // example, if the BigDecimal -> double conversion was
            // known to be exact and the rounding mode had a
            // low-enough precision, the post-Newton rounding logic
            // could be applied directly.)
            const guess = BigDecimal.fromValue(Math.sqrt(working.numberValue()));
            let guessPrecision = 15;
            const originalPrecision = mc.precision;
            let targetPrecision;
            // If an exact value is requested, it must only need about
            // half of the input digits to represent since multiplying
            // an N digit number by itself yield a 2N-1 digit or 2N
            // digit result.
            if (originalPrecision === 0) {
                targetPrecision = Math.trunc(stripped.precision() / 2) + 1;
            }
            else {
                /*
                 * To avoid the need for post-Newton fix-up logic, in
                 * the case of half-way rounding modes, double the
                 * target precision so that the "2p + 2" property can
                 * be relied on to accomplish the final rounding.
                 */
                switch (mc.roundingMode) {
                    case RoundingMode.HALF_UP:
                    case RoundingMode.HALF_DOWN:
                    case RoundingMode.HALF_EVEN:
                        targetPrecision = 2 * originalPrecision;
                        if (targetPrecision < 0)
                            targetPrecision = Number.MAX_SAFE_INTEGER - 2;
                        break;
                    default:
                        targetPrecision = originalPrecision;
                        break;
                }
            }
            // When setting the precision to use inside the Newton
            // iteration loop, take care to avoid the case where the
            // precision of the input exceeds the requested precision
            // and rounding the input value too soon.
            let approx = guess;
            const workingPrecision = working.precision();
            do {
                const tmpPrecision = Math.max(Math.max(guessPrecision, targetPrecision + 2), workingPrecision);
                const mcTmp = new MathContext(tmpPrecision, RoundingMode.HALF_EVEN);
                // approx = 0.5 * (approx + fraction / approx)
                approx = BigDecimal.ONE_HALF.multiply(approx.add(working.divideWithMathContext(approx, mcTmp), mcTmp));
                guessPrecision *= 2;
            } while (guessPrecision < targetPrecision + 2);
            let result;
            const targetRm = mc.roundingMode;
            if (targetRm === RoundingMode.UNNECESSARY || originalPrecision === 0) {
                const tmpRm = (targetRm === RoundingMode.UNNECESSARY) ? RoundingMode.DOWN : targetRm;
                const mcTmp = new MathContext(targetPrecision, tmpRm);
                result = approx.scaleByPowerOfTen(Math.trunc(-scaleAdjust / 2)).round(mcTmp);
                // If result*result != this numerically, the square
                // root isn't exact
                if (this.subtract(result.square()).compareTo(BigDecimal.ZERO) !== 0) {
                    throw new RangeError('Computed square root not exact.');
                }
            }
            else {
                result = approx.scaleByPowerOfTen(Math.trunc(-scaleAdjust / 2)).round(mc);
                switch (targetRm) {
                    case RoundingMode.DOWN:
                    case RoundingMode.FLOOR:
                        // Check if too big
                        if (result.square().compareTo(this) > 0) {
                            let ulp = result.ulp();
                            // Adjust increment down in case of 1.0 = 10^0
                            // since the next smaller number is only 1/10
                            // as far way as the next larger at exponent
                            // boundaries. Test approx and *not* result to
                            // avoid having to detect an arbitrary power
                            // of ten.
                            if (approx.compareTo(BigDecimal.ONE) === 0) {
                                ulp = ulp.multiply(BigDecimal.ONE_TENTH);
                            }
                            result = result.subtract(ulp);
                        }
                        break;
                    case RoundingMode.UP:
                    case RoundingMode.CEILING:
                        // Check if too small
                        if (result.square().compareTo(this) < 0) {
                            result = result.add(result.ulp());
                        }
                        break;
                    default:
                        // No additional work, rely on "2p + 2" property
                        // for correct rounding. Alternatively, could
                        // instead run the Newton iteration to around p
                        // digits and then do tests and fix-ups on the
                        // rounded value. One possible set of tests and
                        // fix-ups is given in the Hull and Abrham paper;
                        // however, additional half-way cases can occur
                        // for BigDecimal given the more varied
                        // combinations of input and output precisions
                        // supported.
                        break;
                }
            }
            if (result._scale !== preferredScale) {
                // The preferred scale of an add is
                // max(addend.scale(), augend.scale()). Therefore, if
                // the scale of the result is first minimized using
                // stripTrailingZeros(), adding a zero of the
                // preferred scale rounding to the correct precision
                // will perform the proper scale vs precision
                // tradeoffs.
                result = result.stripTrailingZeros().add(zeroWithFinalPreferredScale, new MathContext(originalPrecision, RoundingMode.UNNECESSARY));
            }
            return result;
        }
    }
    /** @internal */
    square() {
        return this.multiply(this);
    }
    /**
     * Returns the size of an ulp, a unit in the last place, of this
     * `BigDecimal`.  An ulp of a nonzero `BigDecimal`
     * value is the positive distance between this value and the
     * `BigDecimal` value next larger in magnitude with the
     * same number of digits.  An ulp of a zero value is numerically
     * equal to 1 with the scale of `this`.  The result is
     * stored with the same scale as `this` so the result
     * for zero and nonzero values is equal to `[1, this.scale()]`.
     *
     * @return the size of an ulp of `this`
     */
    ulp() {
        return BigDecimal.fromInteger2(1, this._scale, 1);
    }
    /**
     * Returns signum of a bigint. If negative -1 returned, if positive 1 returned, if zero 0 returned.
     * @param val
     * @internal
     */
    static bigIntSignum(val) {
        return val > BigDecimal.zeroBigInt ? 1 : (val < BigDecimal.zeroBigInt ? -1 : 0);
    }
    /**
     * Returns a `BigDecimal` which is numerically equal to
     * this one but with any trailing zeros removed from the
     * representation.  For example, stripping the trailing zeros from
     * the `BigDecimal` value `600.0`, which has
     * [`BigInt`, `scale`] components equal to
     * [6000n, 1], yields `6E2` with [`BigInt`, `scale`]
     * components equal to [6n, -2].
     *
     * @return a numerically equal `BigDecimal` with any
     * trailing zeros removed.
     * @throws RangeError if scale from max or min safe integer range.
     */
    stripTrailingZeros() {
        if (this.intCompact === 0 || (this.intVal !== null && BigDecimal.bigIntSignum(this.intVal) === 0)) {
            return BigDecimal.ZERO;
        }
        else if (this.intCompact !== BigDecimal.INFLATED) {
            return BigDecimal.createAndStripZerosToMatchScale(this.intCompact, this._scale, Number.MIN_SAFE_INTEGER);
        }
        else {
            return BigDecimal.createAndStripZerosToMatchScale2(this.intVal, this._scale, Number.MIN_SAFE_INTEGER);
        }
    }
    /**
     * Returns whether this `BigDecimal` is a power of ten(negative or positive).
     * @internal
     */
    isPowerOfTen() {
        return this.unscaledValue() === BigDecimal.oneBigInt;
    }
    /**
     * Returns a `BigInt` whose value is the <i>unscaled
     * value</i> of this `BigDecimal`.  (Computes <code>(this *
     * 10<sup>this.scale()</sup>)</code>.)
     *
     * @return the unscaled value of this `BigDecimal`.
     */
    unscaledValue() {
        return this.inflated();
    }
    /**
     * Returns the <i>scale</i> of this `BigDecimal`.  If zero
     * or positive, the scale is the number of digits to the right of
     * the decimal point.  If negative, the unscaled value of the
     * number is multiplied by ten to the power of the negation of the
     * scale.  For example, a scale of `-3` means the unscaled
     * value is multiplied by 1000.
     *
     * The scale will be kept in the integer range, if cannot error will be thrown.
     *
     * @return the scale of this `BigDecimal`.
     */
    scale() {
        return this._scale;
    }
    /**
     * Returns a BigDecimal whose numerical value is equal to
     * (`this` * 10<sup>n</sup>).  The scale of
     * the result is `(this.scale() - n)`.
     *
     * @param n the exponent power of ten to scale by
     * @return a BigDecimal whose numerical value is equal to
     * (`this` * 10<sup>n</sup>)
     * @throws RangeError if the scale would be outside the range of a safe integer.
     */
    scaleByPowerOfTen(n) {
        return new BigDecimal(this.intVal, this.intCompact, this.checkScale(this._scale - n), this._precision);
    }
    /**
     * Compares this `BigDecimal` numerically with the specified
     * `BigDecimal`.  Two `BigDecimal` objects that are
     * equal in value but have a different scale (like 2.0 and 2.00)
     * are considered equal by this method. Such values are in the
     * same <i>cohort</i>.
     *
     * This method is provided in preference to individual methods for
     * each of the six boolean comparison operators (`<`, `==`,
     * `>`, `>=`, `!=`, `<=`).  The suggested
     * idiom for performing these comparisons is:
     * (x.compareTo(y) &lt;<i>op</i>&gt; 0), where
     * &lt;<i>op</i>&gt; is one of the six comparison operators.

     * @param val value to which this `BigDecimal` is to be compared.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @return -1, 0, or 1 as this `BigDecimal` is numerically
     *          less than, equal to, or greater than `val`.
     * @see {@link sameValue}
     * @see {@link greaterThan}
     * @see {@link greaterThanOrEquals}
     * @see {@link lowerThan}
     * @see {@link lowerThanOrEquals}
     */
    compareTo(val) {
        val = BigDecimal.convertToBigDecimal(val);
        // Quick path for equal scale and non-inflated case.
        if (this._scale === val._scale) {
            const xs = this.intCompact;
            const ys = val.intCompact;
            if (xs !== BigDecimal.INFLATED && ys !== BigDecimal.INFLATED) {
                return xs !== ys ? (xs > ys ? 1 : -1) : 0;
            }
        }
        const xsign = this.signum();
        const ysign = val.signum();
        if (xsign !== ysign) {
            return xsign > ysign ? 1 : -1;
        }
        else if (xsign === 0) {
            return 0;
        }
        else {
            const cmp = this.compareMagnitude(val);
            return xsign > 0 ? cmp : -cmp;
        }
    }
    /**
    * Alias for `compareTo(val) === 0`.
    * Consider using {@link equals} in case the scale needs to be considered.
    * @returns true if the value is the same as `val`
    * @see {@link equals}
    * @see {@link compareTo}
    */
    sameValue(val) {
        return this.compareTo(val) === 0;
    }
    /**
     * Alias for `compareTo(val) > 0`.
     *
     * @param val value to which this `BigDecimal` is to be compared.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @returns true if the value is greater than `val`
     * @see     {@link compareTo}
     * @alias   {@link gt}
     */
    greaterThan(val) {
        return this.compareTo(val) > 0;
    }
    /**
     * @alias {@link greaterThan}
     */
    gt(val) {
        return this.greaterThan(val);
    }
    /**
     * Alias for `compareTo(val) >= 0`.
     *
     * @param val value to which this `BigDecimal` is to be compared.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @returns true if the value is greater than or equals to `val`
     * @see     {@link compareTo}
     * @alias   {@link gte}
     */
    greaterThanOrEquals(val) {
        return this.compareTo(val) >= 0;
    }
    /**
     * @alias {@link greaterThanOrEquals}
     */
    gte(val) {
        return this.greaterThanOrEquals(val);
    }
    /**
     * Alias for `compareTo(val) < 0`.
     *
     * @param val value to which this `BigDecimal` is to be compared.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @returns true if the value is lower than `val`
     * @see     {@link compareTo}
     * @alias   {@link lt}
     */
    lowerThan(val) {
        return this.compareTo(val) < 0;
    }
    /**
     * @alias {@link lowerThan}
     */
    lt(val) {
        return this.lowerThan(val);
    }
    /**
     * Alias for `compareTo(val) <= 0`.
     *
     * @param val value to which this `BigDecimal` is to be compared.
     * This value will be converted to a `BigDecimal` before the operation.
     * See the {@link Big | constructor} to learn more about the conversion.
     * @returns true if the value is lower than or equals to `val`
     * @see     {@link compareTo}
     * @alias   {@link lte}
     */
    lowerThanOrEquals(val) {
        return this.compareTo(val) <= 0;
    }
    /**
     * @alias {@link lowerThanOrEquals}
     */
    lte(val) {
        return this.lowerThanOrEquals(val);
    }
    /**
     * Converts this BigDecimal to number.
     * @return number for of this BigDecimal
     */
    numberValue() {
        if (this.intCompact !== BigDecimal.INFLATED) {
            if (this._scale === 0) {
                return this.intCompact;
            }
            else {
                /*
                 * If both intCompact and the scale can be exactly
                 * represented as double values, perform a single
                 * double multiply or divide to compute the (properly
                 * rounded) result.
                 */
                if (Math.abs(this.intCompact) < Number.MAX_SAFE_INTEGER) {
                    // Don't have too guard against
                    // Math.abs(MIN_VALUE) because of outer check
                    // against INFLATED.
                    if (this._scale > 0 && this._scale <= BigDecimal.MAX_COMPACT_DIGITS) {
                        return this.intCompact / BigDecimal.NUMBER_10_POW[this._scale];
                    }
                    else if (this._scale < 0 && this._scale >= -BigDecimal.MAX_COMPACT_DIGITS) {
                        return this.intCompact * BigDecimal.NUMBER_10_POW[-this._scale];
                    }
                }
            }
        }
        // Somewhat inefficient, but guaranteed to work.
        return Number(this.toString());
    }
    /**
     * Returns a `BigDecimal` rounded according to the
     * `MathContext` settings.  If the precision setting is 0 then
     * no rounding takes place.
     *
     * The effect of this method is identical to that of the
     * {@link plus} method.
     *
     * @param mc the context to use.
     * @return a `BigDecimal` rounded according to the
     *         `MathContext` settings.
     * @see    {@link plus}
     */
    round(mc) {
        return this.plus(mc);
    }
    /**
     * Returns a `BigDecimal` whose scale is the specified
     * value, and whose unscaled value is determined by multiplying or
     * dividing this `BigDecimal`'s unscaled value by the
     * appropriate power of ten to maintain its overall value.  If the
     * scale is reduced by the operation, the unscaled value must be
     * divided (rather than multiplied), and the value may be changed;
     * in this case, the specified rounding mode is applied to the
     * division.
     *
     *
     * @param newScale scale of the `BigDecimal` value to be returned.
     * @param roundingMode The rounding mode to apply. By default it is set to `UNNECESSARY`.
     * @return a `BigDecimal` whose scale is the specified value,
     *         and whose unscaled value is determined by multiplying or
     *         dividing this `BigDecimal`'s unscaled value by the
     *         appropriate power of ten to maintain its overall value.
     * @throws RangeError if roundingMode is `UNNECESSARY`
     *         and the specified scaling operation would require
     *         rounding.
     * @see {@link RoundingMode}
     */
    setScale(newScale, roundingMode = RoundingMode.UNNECESSARY) {
        if (roundingMode < RoundingMode.UP || roundingMode > RoundingMode.UNNECESSARY)
            throw new RangeError('Invalid rounding mode');
        const oldScale = this._scale;
        if (newScale === oldScale) // easy case
            return this;
        if (this.signum() === 0) // zero can have any scale
            return BigDecimal.zeroValueOf(newScale);
        if (this.intCompact !== BigDecimal.INFLATED) {
            let rs = this.intCompact;
            if (newScale > oldScale) {
                const raise = this.checkScale(newScale - oldScale);
                if ((rs = BigDecimal.integerMultiplyPowerTen(rs, raise)) !== BigDecimal.INFLATED) {
                    return BigDecimal.fromInteger3(rs, newScale);
                }
                const rb = this.bigMultiplyPowerTen(raise);
                return new BigDecimal(rb, BigDecimal.INFLATED, newScale, (this._precision > 0) ? this._precision + raise : 0);
            }
            else {
                // newScale < oldScale -- drop some digits
                // Can't predict the precision due to the effect of rounding.
                const drop = this.checkScale(oldScale - newScale);
                if (drop < BigDecimal.TEN_POWERS_TABLE.length) {
                    return BigDecimal.divideAndRound2(rs, BigDecimal.TEN_POWERS_TABLE[drop], newScale, roundingMode, newScale);
                }
                else {
                    return BigDecimal.divideAndRound3(this.inflated(), BigInt(10) ** BigInt(drop), newScale, roundingMode, newScale);
                }
            }
        }
        else {
            if (newScale > oldScale) {
                const raise = this.checkScale(newScale - oldScale);
                const rb = BigDecimal.bigMultiplyPowerTen3(this.intVal, raise);
                return new BigDecimal(rb, BigDecimal.INFLATED, newScale, (this._precision > 0) ? this._precision + raise : 0);
            }
            else {
                // newScale < oldScale -- drop some digits
                // Can't predict the precision due to the effect of rounding.
                const drop = this.checkScale(oldScale - newScale);
                if (drop < BigDecimal.TEN_POWERS_TABLE.length)
                    return BigDecimal.divideAndRound4(this.intVal, BigDecimal.TEN_POWERS_TABLE[drop], newScale, roundingMode, newScale);
                else
                    return BigDecimal.divideAndRound3(this.intVal, BigInt(10) ** BigInt(drop), newScale, roundingMode, newScale);
            }
        }
    }
    /**
     * Returns a `BigDecimal` whose value is `(+this)`,
     * with rounding according to the context settings.
     *
     * The effect of this method is identical to that of the {@link round} method.
     *
     * @param mc the context to use.
     * @return `this`, rounded as necessary.  A zero result will
     *         have a scale of 0.
     * @see    {@link round}
     */
    plus(mc) {
        if (!mc)
            return this;
        if (mc.precision === 0) // no rounding please
            return this;
        return BigDecimal.doRound(this, mc);
    }
    /**
     * Returns a `BigDecimal` whose value is
     * <code>(this<sup>n</sup>)</code>.  The current implementation uses
     * the core algorithm defined in ANSI standard X3.274-1996 with
     * rounding according to the context settings.  In general, the
     * returned numerical value is within two ulps of the exact
     * numerical value for the chosen precision.
     *
     * The X3.274-1996 algorithm is:
     *
     * * An `RangeError` exception is thrown if
     *     * `abs(n)` > 999999999
     *     * `mc.precision == 0` and `n < 0`
     *     * `mc.precision > 0` and `n` has more than
     *    `mc.precision` decimal digits
     *
     * * if `n` is zero, a BigDecimal with value 1 is returned even if
     * `this` is zero, otherwise

     *     * if `n` is positive, the result is calculated via
     *   the repeated squaring technique into a single accumulator.
     *   The individual multiplications with the accumulator use the
     *   same math context settings as in `mc` except for a
     *   precision increased to `mc.precision + elength + 1`
     *   where `elength` is the number of decimal digits in
     *   `n`.
     *
     *     * if `n` is negative, the result is calculated as if
     *   `n` were positive; this value is then divided into one
     *   using the working precision specified above.
     *
     *     * The final value from either the positive or negative case
     *   is then rounded to the destination precision.
     *
     * @param n power to raise this `BigDecimal` to.
     * @param mc the context to use.
     * @return <code>this<sup>n</sup></code> using the ANSI standard X3.274-1996
     *         algorithm
     * @throws RangeError if the result is inexact but the
     *         rounding mode is `UNNECESSARY`, or `n` is out
     *         of range.
     */
    pow(n, mc) {
        if (!mc || (mc && mc.precision === 0)) {
            if (n < 0 || n > 999999999)
                throw new RangeError('Invalid operation');
            // No need to calculate pow(n) if result will over/underflow.
            // Don't attempt to support "supernormal" numbers.
            const newScale = this.checkScale(this._scale * n);
            return BigDecimal.fromBigInt5(this.inflated().valueOf() ** BigInt(n), newScale, 0);
        }
        if (n < -999999999 || n > 999999999)
            throw new RangeError('Invalid operation');
        if (n === 0) // x**0 == 1 in X3.274
            return BigDecimal.ONE;
        let workmc = mc; // working settings
        let mag = Math.abs(n); // magnitude of n
        if (mc.precision > 0) {
            const elength = BigDecimal.integerDigitLength(mag); // length of n in digits
            if (elength > mc.precision) // X3.274 rule
                throw new RangeError('Invalid operation');
            workmc = new MathContext(mc.precision + elength + 1, mc.roundingMode);
        }
        // ready to carry out power calculation...
        let acc = BigDecimal.ONE; // accumulator
        let seenbit = false; // set once we've seen a 1-bit
        for (let i = 1;; i++) { // for each bit [top bit ignored]
            mag <<= 1; // shift left 1 bit
            if (mag < 0) { // top bit is set
                seenbit = true; // OK, we're off
                acc = acc.multiply(this, workmc); // acc=acc*x
            }
            if (i === 31)
                break; // that was the last bit
            if (seenbit)
                acc = acc.multiply(acc, workmc); // acc=acc*acc [square]
            // else (!seenbit) no point in squaring ONE
        }
        // if negative n, calculate the reciprocal using working precision
        if (n < 0) // [hence mc.precision>0]
            acc = BigDecimal.ONE.divideWithMathContext(acc, workmc);
        // round to final precision and strip zeros
        return BigDecimal.doRound(acc, mc);
    }
    /**
     * Returns a `BigDecimal` whose value is the absolute value
     * of this `BigDecimal`, with rounding according to the
     * context settings.
     *
     * @param mc the context to use.
     * @return absolute value, rounded as necessary.
     */
    abs(mc) {
        return this.signum() < 0 ? this.negate(mc) : this.plus(mc);
    }
    /**
     * Internally used for division operation for division `number`
     * by `number`.
     * The returned `BigDecimal` object is the quotient whose scale is set
     * to the passed in scale. If the remainder is not zero, it will be rounded
     * based on the passed in roundingMode. Also, if the remainder is zero and
     * the last parameter, i.e. preferredScale is NOT equal to scale, the
     * trailing zeros of the result is stripped to match the preferredScale.
     * @internal
     */
    static divideAndRound2(ldividend, ldivisor, scale, roundingMode, preferredScale) {
        const q = Math.trunc(ldividend / ldivisor);
        if (roundingMode === RoundingMode.DOWN && scale === preferredScale)
            return BigDecimal.fromInteger3(q, scale);
        const r = ldividend % ldivisor;
        const qsign = ((ldividend < 0) === (ldivisor < 0)) ? 1 : -1; // quotient sign
        if (r !== 0) {
            const increment = BigDecimal.needIncrement(ldivisor, roundingMode, qsign, q, r);
            return BigDecimal.fromInteger3((increment ? q + qsign : q), scale);
        }
        else {
            if (preferredScale !== scale)
                return BigDecimal.createAndStripZerosToMatchScale(q, scale, preferredScale);
            else
                return BigDecimal.fromInteger3(q, scale);
        }
    }
    /**
     * Tests if quotient has to be incremented according the roundingMode
     * @internal
     */
    static needIncrement(ldivisor, roundingMode, qsign, q, r) {
        let cmpFracHalf;
        if (r <= BigDecimal.HALF_NUMBER_MIN_VALUE || r > BigDecimal.HALF_NUMBER_MAX_VALUE) {
            cmpFracHalf = 1; // 2 * r can't fit into long
        }
        else {
            cmpFracHalf = BigDecimal.integerCompareMagnitude(2 * r, ldivisor);
        }
        return BigDecimal.commonNeedIncrement(roundingMode, qsign, cmpFracHalf, (q & 1) !== 0);
    }
    /**
     * Shared logic of need increment computation.
     * @internal
     */
    static commonNeedIncrement(roundingMode, qsign, cmpFracHalf, oddQuot) {
        switch (roundingMode) {
            case RoundingMode.UNNECESSARY:
                throw new RangeError('Rounding necessary');
            case RoundingMode.UP: // Away from zero
                return true;
            case RoundingMode.DOWN: // Towards zero
                return false;
            case RoundingMode.CEILING: // Towards +infinity
                return qsign > 0;
            case RoundingMode.FLOOR: // Towards -infinity
                return qsign < 0;
            default: // Some kind of half-way rounding
                if (cmpFracHalf < 0) // We're closer to higher digit
                    return false;
                else if (cmpFracHalf > 0) // We're closer to lower digit
                    return true;
                else { // half-way
                    switch (roundingMode) {
                        case RoundingMode.HALF_DOWN:
                            return false;
                        case RoundingMode.HALF_UP:
                            return true;
                        case RoundingMode.HALF_EVEN:
                            return oddQuot;
                        default:
                            throw new RangeError(`Unexpected rounding mode ${RoundingMode[roundingMode]}`);
                    }
                }
        }
    }
    /** @internal */
    static integerCompareMagnitude(x, y) {
        if (x < 0)
            x = -x;
        if (y < 0)
            y = -y;
        return (x < y) ? -1 : ((x === y) ? 0 : 1);
    }
    /**
     * Compares magnitudes of two bigints if x < y returns -1, if equal 0 if x > y, 1.
     * @param x
     * @param y
     * @internal
     */
    static bigIntCompareMagnitude(x, y) {
        if (x < BigDecimal.zeroBigInt)
            x = BigDecimal.minusOneBigInt * x.valueOf();
        if (y < BigDecimal.zeroBigInt)
            y = BigDecimal.minusOneBigInt * y.valueOf();
        return (x < y) ? -1 : ((x === y) ? 0 : 1);
    }
    /**
     * Converts a bigint to bigdecimal
     * @param bigInt bigint
     * @param qsign sign
     * @param scale scale
     * @internal
     */
    static bigIntToBigDecimal(bigInt, qsign, scale) {
        if (bigInt <= BigInt(Number.MAX_SAFE_INTEGER) && bigInt >= BigInt(Number.MIN_SAFE_INTEGER)) {
            const numberForm = Number(bigInt);
            return new BigDecimal(null, qsign * numberForm, scale, 0);
        }
        else {
            return new BigDecimal(BigInt(qsign) * bigInt.valueOf(), BigDecimal.INFLATED, scale, 0);
        }
    }
    /**
     * Converts a bigint to number, returns INFLATED if it won't be a safe integer
     * @param bigInt bigint
     * @param qsign sign number
     * @internal
     */
    static bigIntToCompactValue(bigInt, qsign) {
        if (bigInt <= BigInt(Number.MAX_SAFE_INTEGER) && bigInt >= BigInt(Number.MIN_SAFE_INTEGER)) {
            return qsign * Number(bigInt);
        }
        else {
            return BigDecimal.INFLATED;
        }
    }
    /**
     * Internally used for division operation for division `BigInt`
     * by `BigInt`.
     * The returned `BigDecimal` object is the quotient whose scale is set
     * to the passed in scale. If the remainder is not zero, it will be rounded
     * based on the passed in roundingMode. Also, if the remainder is zero and
     * the last parameter, i.e. preferredScale is NOT equal to scale, the
     * trailing zeros of the result is stripped to match the preferredScale.
     * @internal
     */
    static divideAndRound3(bdividend, bdivisor, scale, roundingMode, preferredScale) {
        // quotient sign
        const qsign = (BigDecimal.bigIntSignum(bdividend) !== BigDecimal.bigIntSignum(bdivisor)) ? -1 : 1;
        if (bdividend < BigDecimal.zeroBigInt)
            bdividend = bdividend.valueOf() * BigDecimal.minusOneBigInt;
        if (bdivisor < BigDecimal.zeroBigInt)
            bdivisor = bdivisor.valueOf() * BigDecimal.minusOneBigInt;
        let mq = bdividend.valueOf() / bdivisor.valueOf();
        const mr = bdividend.valueOf() % bdivisor.valueOf();
        // record remainder is zero or not
        const isRemainderZero = mr === BigDecimal.zeroBigInt;
        if (!isRemainderZero) {
            if (BigDecimal.needIncrement2(bdivisor, roundingMode, qsign, mq, mr)) {
                mq += BigDecimal.oneBigInt;
            }
            return BigDecimal.bigIntToBigDecimal(mq, qsign, scale);
        }
        else {
            if (preferredScale !== scale) {
                const compactVal = BigDecimal.bigIntToCompactValue(mq, qsign);
                if (compactVal !== BigDecimal.INFLATED) {
                    return BigDecimal.createAndStripZerosToMatchScale(compactVal, scale, preferredScale);
                }
                const intVal = BigInt(qsign) * mq.valueOf();
                return BigDecimal.createAndStripZerosToMatchScale2(intVal, scale, preferredScale);
            }
            else {
                return BigDecimal.bigIntToBigDecimal(mq, qsign, scale);
            }
        }
    }
    /**
     * Tests if quotient has to be incremented according the roundingMode
     * @internal
     */
    static needIncrement2(mdivisor, roundingMode, qsign, mq, mr) {
        const cmpFracHalf = BigDecimal.compareHalf(mr, mdivisor);
        return BigDecimal.commonNeedIncrement(roundingMode, qsign, cmpFracHalf, mq.valueOf() % BigDecimal.twoBigInt === BigDecimal.oneBigInt);
    }
    /**
     * Compares half of second with first
     * @param first
     * @param second
     * @private
     */
    static compareHalf(first, second) {
        second = second.valueOf() / BigDecimal.twoBigInt;
        if (first < second)
            return -1;
        if (first > second)
            return 1;
        return 0;
    }
    /**
     * Internally used for division operation for division `BigInt`
     * by `number`.
     * The returned `BigDecimal` object is the quotient whose scale is set
     * to the passed in scale. If the remainder is not zero, it will be rounded
     * based on the passed in roundingMode. Also, if the remainder is zero and
     * the last parameter, i.e. preferredScale is NOT equal to scale, the
     * trailing zeros of the result is stripped to match the preferredScale.
     * @internal
     */
    static divideAndRound4(bdividend, ldivisor, scale, roundingMode, preferredScale) {
        const divisorNegative = ldivisor < 0;
        const dividendSignum = BigDecimal.bigIntSignum(bdividend);
        if (divisorNegative)
            ldivisor *= -1;
        if (dividendSignum === -1)
            bdividend = bdividend.valueOf() * BigDecimal.minusOneBigInt;
        let mq = bdividend.valueOf() / BigInt(ldivisor);
        let mr;
        const bDividendNumber = Number(bdividend);
        if (Number.isSafeInteger(bDividendNumber)) {
            mr = bDividendNumber % ldivisor;
        }
        else {
            mr = Number(bdividend.valueOf() % BigInt(ldivisor));
        }
        // record remainder is zero or not
        const isRemainderZero = mr === 0;
        // quotient sign
        const qsign = divisorNegative ? -dividendSignum : dividendSignum;
        if (!isRemainderZero) {
            if (BigDecimal.needIncrement3(ldivisor, roundingMode, qsign, mq, mr)) {
                mq += BigDecimal.oneBigInt;
            }
            return BigDecimal.bigIntToBigDecimal(mq, qsign, scale);
        }
        else {
            if (preferredScale !== scale) {
                const compactVal = BigDecimal.bigIntToCompactValue(mq, qsign);
                if (compactVal !== BigDecimal.INFLATED) {
                    return BigDecimal.createAndStripZerosToMatchScale(compactVal, scale, preferredScale);
                }
                const intVal = BigInt(qsign) * mq.valueOf();
                return BigDecimal.createAndStripZerosToMatchScale2(intVal, scale, preferredScale);
            }
            else {
                return BigDecimal.bigIntToBigDecimal(mq, qsign, scale);
            }
        }
    }
    /**
     * Tests if quotient has to be incremented according the roundingMode
     * @internal
     */
    static needIncrement3(ldivisor, roundingMode, qsign, mq, r) {
        let cmpFracHalf;
        if (r <= BigDecimal.HALF_NUMBER_MIN_VALUE || r > BigDecimal.HALF_NUMBER_MAX_VALUE) {
            cmpFracHalf = 1;
        }
        else {
            cmpFracHalf = BigDecimal.integerCompareMagnitude(2 * r, ldivisor);
        }
        return BigDecimal.commonNeedIncrement(roundingMode, qsign, cmpFracHalf, mq.valueOf() % BigDecimal.twoBigInt === BigDecimal.oneBigInt);
    }
    /**
     * Returns a `BigDecimal` which is equivalent to this one
     * with the decimal point moved `n` places to the left.  If
     * `n` is non-negative, the call merely adds `n` to
     * the scale.  If `n` is negative, the call is equivalent
     * to `movePointRight(-n)`.  The `BigDecimal`
     * returned by this call has value <code>(this &times;
     * 10<sup>-n</sup>)</code> and scale `max(this.scale()+n,
     * 0)`.
     *
     * @param n number of places to move the decimal point to the left.
     * @return a `BigDecimal` which is equivalent to this one with the
     *         decimal point moved `n` places to the left.
     * @throws RangeError if scale overflows.
     */
    movePointLeft(n) {
        if (n === 0)
            return this;
        // Cannot use movePointRight(-n) in case of n==BigDecimal.MIN_INT_VALUE
        const newScale = this.checkScale(this._scale + n);
        const num = new BigDecimal(this.intVal, this.intCompact, newScale, 0);
        return num._scale < 0 ? num.setScale(0, RoundingMode.UNNECESSARY) : num;
    }
    /**
     * Returns a `BigDecimal` which is equivalent to this one
     * with the decimal point moved `n` places to the right.
     * If `n` is non-negative, the call merely subtracts
     * `n` from the scale.  If `n` is negative, the call
     * is equivalent to `movePointLeft(-n)`.  The
     * `BigDecimal` returned by this call has value <code>(this
     * &times; 10<sup>n</sup>)</code> and scale `max(this.scale()-n, 0)`.
     *
     * @param n number of places to move the decimal point to the right.
     * @return a `BigDecimal` which is equivalent to this one
     *         with the decimal point moved `n` places to the right.
     * @throws RangeError if scale overflows.
     */
    movePointRight(n) {
        if (n === 0)
            return this;
        // Cannot use movePointLeft(-n) in case of n==BigDecimal.MIN_INT_VALUE
        const newScale = this.checkScale(this._scale - n);
        const num = new BigDecimal(this.intVal, this.intCompact, newScale, 0);
        return num._scale < 0 ? num.setScale(0, RoundingMode.UNNECESSARY) : num;
    }
    /**
     * Returns the minimum of this `BigDecimal` and `val`.
     *
     * @param val value with which the minimum is to be computed.
     * @return the `BigDecimal` whose value is the lesser of this
     *         `BigDecimal` and `val`.  If they are equal,
     *         as defined by the {@link compareTo}
     *         method, `this` is returned.
     * @see    {@link compareTo}
     */
    min(val) {
        return (this.compareTo(val) <= 0 ? this : val);
    }
    /**
     * Returns the maximum of this `BigDecimal` and `val`.
     *
     * @param val value with which the maximum is to be computed.
     * @return the `BigDecimal` whose value is the greater of this
     *         `BigDecimal` and `val`.  If they are equal,
     *         as defined by the {@link compareTo}
     *         method, `this` is returned.
     * @see    {@link compareTo}
     */
    max(val) {
        return (this.compareTo(val) >= 0 ? this : val);
    }
    /**
     * Returns the string representation of this `BigDecimal`,
     * using scientific notation if an exponent is needed.
     *
     * A standard canonical string form of the `BigDecimal`
     * is created as though by the following steps: first, the
     * absolute value of the unscaled value of the `BigDecimal`
     * is converted to a string in base ten using the characters
     * '0' through '9' with no leading zeros (except
     * if its value is zero, in which case a single '0'
     * character is used).
     *
     * Next, an <i>adjusted exponent</i> is calculated; this is the
     * negated scale, plus the number of characters in the converted
     * unscaled value, less one.  That is,
     * `-scale+(ulength-1)`, where `ulength` is the
     * length of the absolute value of the unscaled value in decimal
     * digits (its <i>precision</i>).
     *
     * If the scale is greater than or equal to zero and the
     * adjusted exponent is greater than or equal to `-6`, the
     * number will be converted to a character form without using
     * exponential notation.  In this case, if the scale is zero then
     * no decimal point is added and if the scale is positive a
     * decimal point will be inserted with the scale specifying the
     * number of characters to the right of the decimal point.
     * '0' characters are added to the left of the converted
     * unscaled value as necessary.  If no character precedes the
     * decimal point after this insertion then a conventional
     * '0' character is prefixed.
     *
     * Otherwise (that is, if the scale is negative, or the
     * adjusted exponent is less than `-6`), the number will be
     * converted to a character form using exponential notation.  In
     * this case, if the converted `BigInt` has more than
     * one digit a decimal point is inserted after the first digit.
     * An exponent in character form is then suffixed to the converted
     * unscaled value (perhaps with inserted decimal point); this
     * comprises the letter 'E' followed immediately by the
     * adjusted exponent converted to a character form.  The latter is
     * in base ten, using the characters '0' through
     * '9' with no leading zeros, and is always prefixed by a
     * sign character '-' (<code>'&#92;u002D'</code>) if the
     * adjusted exponent is negative, '+'
     * (<code>'&#92;u002B'</code>) otherwise).
     *
     * Finally, the entire string is prefixed by a minus sign
     * character '-' (<code>'&#92;u002D'</code>) if the unscaled
     * value is less than zero.  No sign character is prefixed if the
     * unscaled value is zero or positive.
     *
     * **Examples:**
     * For each representation [<i>unscaled value</i>, <i>scale</i>]
     * on the left, the resulting string is shown on the right.
     * <pre>
     * [123,0]      "123"
     * [-123,0]     "-123"
     * [123,-1]     "1.23E+3"
     * [123,-3]     "1.23E+5"
     * [123,1]      "12.3"
     * [123,5]      "0.00123"
     * [123,10]     "1.23E-8"
     * [-123,12]    "-1.23E-10"
     * </pre>
     *
     * **Notes:**
     *
     * * There is a one-to-one mapping between the distinguishable
     * `BigDecimal` values and the result of this conversion.
     * That is, every distinguishable `BigDecimal` value
     * (unscaled value and scale) has a unique string representation
     * as a result of using `toString`.  If that string
     * representation is converted back to a `BigDecimal` using
     * the string constructor, then the original
     * value will be recovered.
     *
     * * The {@link toEngineeringString} method may be used for
     * presenting numbers with exponents in engineering notation, and the
     * {@link setScale} method may be used for
     * rounding a `BigDecimal` so it has a known number of digits after
     * the decimal point.
     *
     * @return string representation of this `BigDecimal`.
     */
    toString() {
        let sc = this.stringCache;
        if (sc === undefined) {
            this.stringCache = sc = this.layoutString(true);
        }
        return sc;
    }
    /**
     * Returns a string representation of this `BigDecimal`,
     * using engineering notation if an exponent is needed.
     *
     * Returns a string that represents the `BigDecimal` as
     * described in the {@link toString} method, except that if
     * exponential notation is used, the power of ten is adjusted to
     * be a multiple of three (engineering notation) such that the
     * integer part of nonzero values will be in the range 1 through
     * 999.  If exponential notation is used for zero values, a
     * decimal point and one or two fractional zero digits are used so
     * that the scale of the zero value is preserved.  Note that
     * unlike the output of {@link toString}, the output of this
     * method is <em>not</em> guaranteed to recover the same [number,
     * scale] pair of this `BigDecimal` if the output string is
     * converting back to a `BigDecimal` using the string constructor.
     * The result of this method meets the weaker constraint of always producing a numerically equal
     * result from applying the string constructor to the method's output.
     *
     * @return string representation of this `BigDecimal`, using
     *         engineering notation if an exponent is needed.
     */
    toEngineeringString() {
        return this.layoutString(false);
    }
    /**
     * Returns absolute value of a bigint
     * @internal
     */
    static bigIntAbs(val) {
        if (val < BigDecimal.zeroBigInt) {
            return val.valueOf() * BigDecimal.minusOneBigInt;
        }
        else
            return val;
    }
    /**
     * Lay out this `BigDecimal` into a string.
     *
     * @param sci `true` for Scientific exponential notation;
     *            `false` for Engineering
     * @return string with canonical string representation of this
     * `BigDecimal`
     * @internal
     */
    layoutString(sci) {
        if (this._scale === 0) // zero scale is trivial
            return (this.intCompact !== BigDecimal.INFLATED) ? this.intCompact.toString() : this.intVal.toString();
        if (this._scale === 2 && this.intCompact >= 0 && this.intCompact < Number.MAX_SAFE_INTEGER) {
            // currency fast path
            const lowInt = this.intCompact % 100;
            const highInt = Math.trunc(this.intCompact / 100);
            return (highInt.toString() + '.' + BigDecimal.DIGIT_TENS[lowInt] + BigDecimal.DIGIT_ONES[lowInt]);
        }
        let coeff;
        const offset = 0; // offset is the starting index for coeff array
        // Get the significand as an absolute value
        if (this.intCompact !== BigDecimal.INFLATED) {
            coeff = Math.abs(this.intCompact).toString();
        }
        else {
            coeff = BigDecimal.bigIntAbs(this.intVal).toString();
        }
        // Construct a string.
        let str = '';
        if (this.signum() < 0) // prefix '-' if negative
            str += '-';
        const coeffLen = coeff.length - offset;
        let adjusted = -this._scale + (coeffLen - 1);
        if ((this._scale >= 0) && (adjusted >= -6)) { // plain number
            let pad = this._scale - coeffLen; // count of padding zeros
            if (pad >= 0) { // 0.xxx form
                str += '0';
                str += '.';
                for (; pad > 0; pad--) {
                    str += '0';
                }
                str += coeff.substr(offset, coeffLen);
            }
            else { // xx.xx form
                str += coeff.substr(offset, -pad);
                str += '.';
                str += coeff.substr(-pad + offset, this._scale);
            }
        }
        else { // E-notation is needed
            if (sci) { // Scientific notation
                str += coeff[offset]; // first character
                if (coeffLen > 1) { // more to come
                    str += '.';
                    str += coeff.substr(offset + 1, coeffLen - 1);
                }
            }
            else { // Engineering notation
                let sig = (adjusted % 3);
                if (sig < 0)
                    sig += 3; // [adjusted was negative]
                adjusted -= sig; // now a multiple of 3
                sig++;
                if (this.signum() === 0) {
                    switch (sig) {
                        case 1:
                            str += '0'; // exponent is a multiple of three
                            break;
                        case 2:
                            str += '0.00';
                            adjusted += 3;
                            break;
                        case 3:
                            str += '0.0';
                            adjusted += 3;
                            break;
                        default:
                            throw new RangeError('Unexpected sig value ' + sig);
                    }
                }
                else if (sig >= coeffLen) { // significand all in integer
                    str += coeff.substr(offset, coeffLen);
                    // may need some zeros, too
                    for (let i = sig - coeffLen; i > 0; i--) {
                        str += '0';
                    }
                }
                else { // xx.xxE form
                    str += coeff.substr(offset, sig);
                    str += '.';
                    str += coeff.substr(offset + sig, coeffLen - sig);
                }
            }
            if (adjusted !== 0) { // [!sci could have made 0]
                str += 'E';
                if (adjusted > 0) // force sign for positive
                    str += '+';
                str += adjusted.toString();
            }
        }
        return str;
    }
    /**
     * Returns a string representation of this `BigDecimal`
     * without an exponent field.  For values with a positive scale,
     * the number of digits to the right of the decimal point is used
     * to indicate scale.  For values with a zero or negative scale,
     * the resulting string is generated as if the value were
     * converted to a numerically equal value with zero scale and as
     * if all the trailing zeros of the zero scale value were present
     * in the result.
     *
     * The entire string is prefixed by a minus sign character '-'
     * (<code>'&#92;u002D'</code>) if the unscaled value is less than
     * zero. No sign character is prefixed if the unscaled value is
     * zero or positive.
     *
     * Note that if the result of this method is passed to the
     * string constructor, only the
     * numerical value of this `BigDecimal` will necessarily be
     * recovered; the representation of the new `BigDecimal`
     * may have a different scale.  In particular, if this
     * `BigDecimal` has a negative scale, the string resulting
     * from this method will have a scale of zero when processed by
     * the string constructor.
     *
     * @return a string representation of this `BigDecimal`
     * without an exponent field.
     * @see {@link toString}
     * @see {@link toEngineeringString}
     */
    toPlainString() {
        if (this._scale === 0) {
            if (this.intCompact !== BigDecimal.INFLATED) {
                return this.intCompact.toString();
            }
            else {
                return this.intVal.toString();
            }
        }
        if (this._scale < 0) { // No decimal point
            if (this.signum() === 0) {
                return '0';
            }
            const trailingZeros = this.checkScale(-this._scale);
            let buf = '';
            if (this.intCompact !== BigDecimal.INFLATED) {
                buf += this.intCompact.toString();
            }
            else {
                buf += this.intVal.toString();
            }
            for (let i = 0; i < trailingZeros; i++) {
                buf += '0';
            }
            return buf;
        }
        let str;
        if (this.intCompact !== BigDecimal.INFLATED) {
            str = Math.abs(this.intCompact).toString();
        }
        else {
            str = BigDecimal.bigIntAbs(this.intVal).toString();
        }
        return BigDecimal.getValueString(this.signum(), str, this._scale);
    }
    /**
     * Returns a digit.digit string
     * @internal
     */
    static getValueString(signum, intString, scale) {
        /* Insert decimal point */
        let buf = '';
        const insertionPoint = intString.length - scale;
        if (insertionPoint === 0) { /* Point goes right before intVal */
            return (signum < 0 ? '-0.' : '0.') + intString;
        }
        else if (insertionPoint > 0) { /* Point goes inside intVal */
            buf = intString.slice(0, insertionPoint) + '.' + intString.slice(insertionPoint);
            if (signum < 0)
                buf = '-' + buf;
        }
        else { /* We must insert zeros between point and intVal */
            buf += signum < 0 ? '-0.' : '0.';
            for (let i = 0; i < -insertionPoint; i++) {
                buf += '0';
            }
            buf += intString;
        }
        return buf.toString();
    }
    /**
     * Converts this `BigDecimal` to a `BigInt`.
     * Any fractional part of this will be discarded.  Note that this
     * conversion can lose information about the precision of the
     * `BigDecimal` value.
     *
     * To have an exception thrown if the conversion is inexact (in
     * other words if a nonzero fractional part is discarded), use the
     * {@link toBigIntExact} method.
     *
     * @return this `BigDecimal` converted to a `BigInt`.
     */
    toBigInt() {
        // force to an integer, quietly
        return this.setScale(0, RoundingMode.DOWN).inflated();
    }
    /**
     * Converts this `BigDecimal` to a `BigInt`,
     * checking for lost information.  An exception is thrown if this
     * `BigDecimal` has a nonzero fractional part.
     *
     * @return this `BigDecimal` converted to a `BigInt`.
     * @throws RangeError if `this` has a nonzero fractional part.
     */
    toBigIntExact() {
        // round to an integer, with Exception if decimal part non-0
        return this.setScale(0, RoundingMode.UNNECESSARY).inflated();
    }
    /**
     * Divides `BigInt` value by number value and
     * do rounding based on the passed in roundingMode.
     * @internal
     */
    static divideAndRound5(bdividend, ldivisor, roundingMode) {
        const dividendSignum = BigDecimal.bigIntSignum(bdividend);
        const divisorNegative = ldivisor < 0;
        if (dividendSignum === -1)
            bdividend = bdividend.valueOf() * BigDecimal.minusOneBigInt;
        if (divisorNegative)
            ldivisor *= -1;
        let mq = bdividend.valueOf() / BigInt(ldivisor);
        let r;
        const bDividendNumber = Number(bdividend);
        if (Number.isSafeInteger(bDividendNumber)) {
            r = bDividendNumber % ldivisor;
        }
        else {
            r = Number(bdividend.valueOf() % BigInt(ldivisor));
        }
        // record remainder is zero or not
        const isRemainderZero = (r === 0);
        // quotient sign
        const qsign = divisorNegative ? (dividendSignum * -1) : dividendSignum;
        if (!isRemainderZero) {
            if (BigDecimal.needIncrement3(ldivisor, roundingMode, qsign, mq, r)) {
                mq += BigDecimal.oneBigInt;
            }
        }
        return mq * BigInt(qsign);
    }
    /**
     * Divides `BigInt` value by `BigInt` value and
     * do rounding based on the passed in roundingMode.
     * @internal
     */
    static divideAndRound6(bdividend, bdivisor, roundingMode) {
        const bdividendSignum = BigDecimal.bigIntSignum(bdividend);
        const bdivisorSignum = BigDecimal.bigIntSignum(bdivisor);
        if (bdividend < BigDecimal.zeroBigInt)
            bdividend = bdividend.valueOf() * BigDecimal.minusOneBigInt;
        if (bdivisor < BigDecimal.zeroBigInt)
            bdivisor = bdivisor.valueOf() * BigDecimal.minusOneBigInt;
        let mq = bdividend.valueOf() / bdivisor.valueOf();
        const mr = bdividend.valueOf() % bdivisor.valueOf();
        const isRemainderZero = mr === BigDecimal.zeroBigInt; // record remainder is zero or not
        const qsign = (bdividendSignum !== bdivisorSignum) ? -1 : 1; // quotient sign
        if (!isRemainderZero) {
            if (BigDecimal.needIncrement2(bdivisor, roundingMode, qsign, mq, mr)) {
                mq += BigDecimal.oneBigInt;
            }
        }
        return mq * BigInt(qsign);
    }
    /**
     * Returns a `BigDecimal` whose value is `(xs /
     * ys)`, with rounding according to the context settings.
     *
     * Fast path - used only when (xscale <= yscale && yscale < 15
     * && mc.presision<15)
     * @internal
     */
    static divideSmallFastPath(xs, xscale, ys, yscale, preferredScale, mc) {
        const mcp = mc.precision;
        const roundingMode = mc.roundingMode;
        const xraise = yscale - xscale; // xraise >=0
        const scaledX = (xraise === 0) ? xs : BigDecimal.integerMultiplyPowerTen(xs, xraise); // can't overflow here!
        let quotient;
        const cmp = BigDecimal.integerCompareMagnitude(scaledX, ys);
        if (cmp > 0) { // satisfy constraint (b)
            yscale -= 1; // [that is, divisor *= 10]
            const scl = BigDecimal.checkScaleNonZero(preferredScale + yscale - xscale + mcp);
            if (BigDecimal.checkScaleNonZero(mcp + yscale - xscale) > 0) {
                const raise = BigDecimal.checkScaleNonZero(mcp + yscale - xscale);
                const scaledXs = BigDecimal.integerMultiplyPowerTen(xs, raise);
                if (scaledXs === BigDecimal.INFLATED) {
                    quotient = null;
                    if ((mcp - 1) >= 0 && (mcp - 1) < BigDecimal.TEN_POWERS_TABLE.length) {
                        quotient = BigDecimal.divideAndRound4(BigInt(BigDecimal.TEN_POWERS_TABLE[mcp - 1]) * BigInt(scaledX), ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                    }
                    if (quotient === null) {
                        const rb = BigDecimal.bigMultiplyPowerTen2(scaledX, mcp - 1);
                        quotient = BigDecimal.divideAndRound4(rb, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                    }
                }
                else {
                    quotient = BigDecimal.divideAndRound2(scaledXs, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
            }
            else {
                const newScale = BigDecimal.checkScaleNonZero(xscale - mcp);
                if (newScale === yscale) {
                    quotient = BigDecimal.divideAndRound2(xs, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
                else {
                    const raise = BigDecimal.checkScaleNonZero(newScale - yscale);
                    const scaledYs = BigDecimal.integerMultiplyPowerTen(ys, raise);
                    if (scaledYs === BigDecimal.INFLATED) {
                        const rb = BigDecimal.bigMultiplyPowerTen2(ys, raise);
                        quotient = BigDecimal.divideAndRound3(BigInt(xs), rb, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                    }
                    else {
                        quotient = BigDecimal.divideAndRound2(xs, scaledYs, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                    }
                }
            }
        }
        else {
            // abs(scaledX) <= abs(ys)
            // result is "scaledX * 10^msp / ys"
            const scl = BigDecimal.checkScaleNonZero(preferredScale + yscale - xscale + mcp);
            if (cmp === 0) {
                // abs(scaleX)== abs(ys) => result will be scaled 10^mcp + correct sign
                quotient = BigDecimal.roundedTenPower(((scaledX < 0) === (ys < 0)) ? 1 : -1, mcp, scl, BigDecimal.checkScaleNonZero(preferredScale));
            }
            else {
                // abs(scaledX) < abs(ys)
                const scaledXs = BigDecimal.integerMultiplyPowerTen(scaledX, mcp);
                if (scaledXs === BigDecimal.INFLATED) {
                    quotient = null;
                    if (mcp < BigDecimal.TEN_POWERS_TABLE.length) {
                        quotient = BigDecimal.divideAndRound4(BigInt(BigDecimal.TEN_POWERS_TABLE[mcp]) * BigInt(scaledX), ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                    }
                    if (quotient === null) {
                        const rb = BigDecimal.bigMultiplyPowerTen2(scaledX, mcp);
                        quotient = BigDecimal.divideAndRound4(rb, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                    }
                }
                else {
                    quotient = BigDecimal.divideAndRound2(scaledXs, ys, scl, roundingMode, BigDecimal.checkScaleNonZero(preferredScale));
                }
            }
        }
        // doRound, here, only affects 1000000000 case.
        return BigDecimal.doRound(quotient, mc);
    }
    /**
     * calculate divideAndRound for ldividend*10^raise / divisor
     * when abs(dividend)==abs(divisor);
     * @internal
     */
    static roundedTenPower(qsign, raise, scale, preferredScale) {
        if (scale > preferredScale) {
            const diff = scale - preferredScale;
            if (diff < raise) {
                return BigDecimal.scaledTenPow(raise - diff, qsign, preferredScale);
            }
            else {
                return BigDecimal.fromInteger3(qsign, scale - raise);
            }
        }
        else {
            return BigDecimal.scaledTenPow(raise, qsign, scale);
        }
    }
    /** @internal */
    static scaledTenPow(n, sign, scale) {
        if (n < BigDecimal.TEN_POWERS_TABLE.length)
            return BigDecimal.fromInteger3(sign * BigDecimal.TEN_POWERS_TABLE[n], scale);
        else {
            let unscaledVal = BigInt(10) ** BigInt(n);
            if (sign === -1) {
                unscaledVal = unscaledVal * BigDecimal.minusOneBigInt;
            }
            return new BigDecimal(unscaledVal, BigDecimal.INFLATED, scale, n + 1);
        }
    }
    /**
     * Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]
     * @internal
     */
    static compareMagnitudeNormalized(xs, xscale, ys, yscale) {
        const sdiff = xscale - yscale;
        if (sdiff !== 0) {
            if (sdiff < 0) {
                xs = BigDecimal.integerMultiplyPowerTen(xs, -sdiff);
            }
            else {
                ys = BigDecimal.integerMultiplyPowerTen(ys, sdiff);
            }
        }
        if (xs !== BigDecimal.INFLATED)
            return (ys !== BigDecimal.INFLATED) ? BigDecimal.integerCompareMagnitude(xs, ys) : -1;
        else
            return 1;
    }
    /**
     * Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]
     * @internal
     */
    static compareMagnitudeNormalized2(xs, xscale, ys, yscale) {
        if (xs === 0)
            return -1;
        const sdiff = xscale - yscale;
        if (sdiff < 0) {
            if (BigDecimal.integerMultiplyPowerTen(xs, -sdiff) === BigDecimal.INFLATED) {
                return BigDecimal.bigIntCompareMagnitude(BigDecimal.bigMultiplyPowerTen2(xs, -sdiff), ys);
            }
        }
        return -1;
    }
    /**
     * Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]
     * @internal
     */
    static compareMagnitudeNormalized3(xs, xscale, ys, yscale) {
        const sdiff = xscale - yscale;
        if (sdiff < 0) {
            return BigDecimal.bigIntCompareMagnitude(BigDecimal.bigMultiplyPowerTen3(xs, -sdiff), ys);
        }
        else { // sdiff >= 0
            return BigDecimal.bigIntCompareMagnitude(xs, BigDecimal.bigMultiplyPowerTen3(ys, sdiff));
        }
    }
    /** @internal */
    static divide7(dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
        if (BigDecimal.checkScale2(dividend, scale + divisorScale) > dividendScale) {
            const newScale = scale + divisorScale;
            const raise = newScale - dividendScale;
            if (raise < BigDecimal.TEN_POWERS_TABLE.length) {
                let xs = dividend;
                if ((xs = BigDecimal.integerMultiplyPowerTen(xs, raise)) !== BigDecimal.INFLATED) {
                    return BigDecimal.divideAndRound2(xs, divisor, scale, roundingMode, scale);
                }
            }
            const scaledDividend = BigDecimal.bigMultiplyPowerTen2(dividend, raise);
            return BigDecimal.divideAndRound4(scaledDividend, divisor, scale, roundingMode, scale);
        }
        else {
            const newScale = BigDecimal.checkScale2(divisor, dividendScale - scale);
            const raise = newScale - divisorScale;
            if (raise < BigDecimal.TEN_POWERS_TABLE.length) {
                let ys = divisor;
                if ((ys = BigDecimal.integerMultiplyPowerTen(ys, raise)) !== BigDecimal.INFLATED) {
                    return BigDecimal.divideAndRound2(dividend, ys, scale, roundingMode, scale);
                }
            }
            const scaledDivisor = BigDecimal.bigMultiplyPowerTen2(divisor, raise);
            return BigDecimal.divideAndRound3(BigInt(dividend), scaledDivisor, scale, roundingMode, scale);
        }
    }
    /** @internal */
    static divide8(dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
        if (BigDecimal.checkScale2(dividend, scale + divisorScale) > dividendScale) {
            const newScale = scale + divisorScale;
            const raise = newScale - dividendScale;
            const scaledDividend = BigDecimal.bigMultiplyPowerTen2(dividend, raise);
            return BigDecimal.divideAndRound3(scaledDividend, divisor, scale, roundingMode, scale);
        }
        else {
            const newScale = BigDecimal.checkScale3(divisor, dividendScale - scale);
            const raise = newScale - divisorScale;
            const scaledDivisor = BigDecimal.bigMultiplyPowerTen3(divisor, raise);
            return BigDecimal.divideAndRound3(BigInt(dividend), scaledDivisor, scale, roundingMode, scale);
        }
    }
    /** @internal */
    static divide9(dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
        if (BigDecimal.checkScale3(dividend, scale + divisorScale) > dividendScale) {
            const newScale = scale + divisorScale;
            const raise = newScale - dividendScale;
            const scaledDividend = BigDecimal.bigMultiplyPowerTen3(dividend, raise);
            return BigDecimal.divideAndRound4(scaledDividend, divisor, scale, roundingMode, scale);
        }
        else {
            const newScale = BigDecimal.checkScale2(divisor, dividendScale - scale);
            const raise = newScale - divisorScale;
            if (raise < BigDecimal.TEN_POWERS_TABLE.length) {
                let ys = divisor;
                if ((ys = BigDecimal.integerMultiplyPowerTen(ys, raise)) !== BigDecimal.INFLATED) {
                    return BigDecimal.divideAndRound4(dividend, ys, scale, roundingMode, scale);
                }
            }
            const scaledDivisor = BigDecimal.bigMultiplyPowerTen2(divisor, raise);
            return BigDecimal.divideAndRound3(dividend, scaledDivisor, scale, roundingMode, scale);
        }
    }
    /** @internal */
    static divide10(dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
        if (BigDecimal.checkScale3(dividend, scale + divisorScale) > dividendScale) {
            const newScale = scale + divisorScale;
            const raise = newScale - dividendScale;
            const scaledDividend = BigDecimal.bigMultiplyPowerTen3(dividend, raise);
            return BigDecimal.divideAndRound3(scaledDividend, divisor, scale, roundingMode, scale);
        }
        else {
            const newScale = BigDecimal.checkScale3(divisor, dividendScale - scale);
            const raise = newScale - divisorScale;
            const scaledDivisor = BigDecimal.bigMultiplyPowerTen3(divisor, raise);
            return BigDecimal.divideAndRound3(dividend, scaledDivisor, scale, roundingMode, scale);
        }
    }
}
exports.BigDecimal = BigDecimal;
/** @internal */
BigDecimal.zeroBigInt = BigInt(0);
/** @internal */
BigDecimal.oneBigInt = BigInt(1);
/** @internal */
BigDecimal.twoBigInt = BigInt(2);
/** @internal */
BigDecimal.minusOneBigInt = BigInt(-1);
/**
 * Sentinel value for {@link intCompact} indicating the
 * significand information is only available from intVal.
 * @internal
 */
BigDecimal.INFLATED = Number.MIN_SAFE_INTEGER;
/** @internal */
BigDecimal.INFLATED_BIGINT = BigInt(BigDecimal.INFLATED);
/** @internal */
BigDecimal.MAX_INT_VALUE = 2147483647;
/** @internal */
BigDecimal.MIN_INT_VALUE = -2147483648;
/** @internal */
BigDecimal.MAX_COMPACT_DIGITS = 15;
/** @internal */
BigDecimal.ZERO_THROUGH_TEN = [
    new BigDecimal(BigDecimal.zeroBigInt, 0, 0, 1),
    new BigDecimal(BigDecimal.oneBigInt, 1, 0, 1),
    new BigDecimal(BigDecimal.twoBigInt, 2, 0, 1),
    new BigDecimal(BigInt(3), 3, 0, 1),
    new BigDecimal(BigInt(4), 4, 0, 1),
    new BigDecimal(BigInt(5), 5, 0, 1),
    new BigDecimal(BigInt(6), 6, 0, 1),
    new BigDecimal(BigInt(7), 7, 0, 1),
    new BigDecimal(BigInt(8), 8, 0, 1),
    new BigDecimal(BigInt(9), 9, 0, 1),
    new BigDecimal(BigInt(10), 10, 0, 2),
];
/** @internal */
BigDecimal.ZERO = BigDecimal.ZERO_THROUGH_TEN[0];
/** @internal */
BigDecimal.ONE = BigDecimal.ZERO_THROUGH_TEN[1];
/** @internal */
BigDecimal.ZERO_SCALED_BY = [
    BigDecimal.ZERO_THROUGH_TEN[0],
    new BigDecimal(BigDecimal.zeroBigInt, 0, 1, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 2, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 3, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 4, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 5, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 6, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 7, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 8, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 9, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 10, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 11, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 12, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 13, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 14, 1),
    new BigDecimal(BigDecimal.zeroBigInt, 0, 15, 1),
];
/** @internal */
BigDecimal.TEN_POWERS_TABLE = [
    1,
    10,
    100,
    1000,
    10000,
    100000,
    1000000,
    10000000,
    100000000,
    1000000000,
    10000000000,
    100000000000,
    1000000000000,
    10000000000000,
    100000000000000,
    1000000000000000,
];
/** @internal */
BigDecimal.HALF_NUMBER_MAX_VALUE = Number.MAX_SAFE_INTEGER / 2;
/** @internal */
BigDecimal.HALF_NUMBER_MIN_VALUE = Number.MIN_SAFE_INTEGER / 2;
/** @internal */
BigDecimal.ONE_TENTH = BigDecimal.fromInteger3(1, 1);
/** @internal */
BigDecimal.ONE_HALF = BigDecimal.fromInteger3(5, 1);
/** @internal */
BigDecimal.NUMBER_10_POW = [
    1e0, 1e1, 1e2, 1e3, 1e4, 1e5,
    1e6, 1e7, 1e8, 1e9, 1e10, 1e11,
    1e12, 1e13, 1e14, 1e15
];
/** @internal */
BigDecimal.THRESHOLDS_TABLE = [
    Number.MAX_SAFE_INTEGER,
    Number.MAX_SAFE_INTEGER / 10,
    Number.MAX_SAFE_INTEGER / 100,
    Number.MAX_SAFE_INTEGER / 1000,
    Number.MAX_SAFE_INTEGER / 10000,
    Number.MAX_SAFE_INTEGER / 100000,
    Number.MAX_SAFE_INTEGER / 1000000,
    Number.MAX_SAFE_INTEGER / 10000000,
    Number.MAX_SAFE_INTEGER / 100000000,
    Number.MAX_SAFE_INTEGER / 1000000000,
    Number.MAX_SAFE_INTEGER / 10000000000,
    Number.MAX_SAFE_INTEGER / 100000000000,
    Number.MAX_SAFE_INTEGER / 1000000000000,
    Number.MAX_SAFE_INTEGER / 10000000000000,
    Number.MAX_SAFE_INTEGER / 100000000000000,
    Number.MAX_SAFE_INTEGER / 1000000000000000,
];
/** @internal */
BigDecimal.DIGIT_TENS = [
    '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
    '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
    '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
    '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',
    '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',
    '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',
    '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',
    '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',
    '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',
    '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',
];
/** @internal */
BigDecimal.DIGIT_ONES = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
];
/**
 * Constructor function for {@link BigDecimal}. Can be invoked with new or without new.
 *
 * The values passed must match one of Java BigDecimal's constructors, so the valid usages of this function is listed below:
 * ```javascript
 * Big(123n); // bigint, 123
 * Big(123n, 3); // bigint and scale, 0.123
 * Big(123n, 3, MC(2, RoundingMode.HALF_UP)); // bigint, scale and mc, 0.12
 * Big(aBigDecimal) // Copies the BigDecimal passed. "scale" and "mc" arguments will not used.
 * Big(123n, undefined, MC(2, RoundingMode.HALF_UP)); // bigint and mc, 1.2E+2
 * Big('1.13e12'); // string, 1.13E+12
 * Big('1.11e11', undefined, MC(2, RoundingMode.HALF_UP)); // string and mc, 1.1E+11
 * Big(10000); // number, 10000
 * Big(123, 5); // integer and scale, 0.00123
 * Big(1.1233, undefined, MC(2, RoundingMode.HALF_UP)); // number and scale, 1.1
 * ```
 *
 * Sample Usage:
 *```javascript
 * // Single unified constructor for multiple values
 * const { Big } = require('bigdecimal.js');
 *
 * // Construct from a string and clone it
 * const x = Big('1.1111111111111111111111');
 * const y = new Big(x); // you can also use 'new'
 *
 * const z = x.add(y);
 * console.log(z.toString()); // 2.2222222222222222222222
 *
 * // You can also construct from a number or BigInt:
 * const u = Big(1.1);
 * const v = Big(2n);
 *
 * console.log(u.toString()); // 1.1
 * console.log(v.toString()); // 2
 * ```
 *
 * @param n Any value to build a BigDecimal from. Types other than `Number` (as safe integer), `BigInt` and `BigDecimal`
 * will be internally converted to string and parsed.
 * @param scale Scale to use, by default 0.
 * @param mc MathContext object which allows you to set precision and rounding mode.
 * @throws RangeError on following situations:
 * * If value is a number:
 *     * Value is not in the range `[-Number.MAX_VALUE, Number.MAX_VALUE]`
 *     * Both a scale and a math context is provided. You can only give one of scale and math context.
 *       Passing `undefined` is same as omitting an argument.
 *     * If value is a double and scale is given.
 * * If value is not a `safe integer`, a `BigInt` or a `BigDecimal`, it will be converted to string.
 *   An error will be thrown if the string format is invalid.
 * * If value is not a `BigInt` or `number`, and scale is given.
 */
exports.Big = function _Big(n, scale, mc) {
    return BigDecimal.fromValue(n, scale, mc);
};
/**
 * Constructor function for {@link MathContext}. Can be invoked with new or without new.
 *
 * Sample Usage:
 * ```javascript
 * const { Big, MC, RoundingMode } = require('bigdecimal.js');
 *
 * const x = Big('1');
 * const y = Big('3');
 *
 * const res1 = x.divideWithMathContext(y, new MC(3));
 * console.log(res1.toString()); // 0.333
 *
 * // You can also use without `new` operator
 * const res2 = x.divideWithMathContext(y, MC(3, RoundingMode.UP));
 * console.log(res2.toString()); // 0.334
 *
 * try {
 *     x.divide(y);
 *     // throws since full precision is requested but it is not possible
 * } catch (e) {
 *     console.log(e); // RangeError: Non-terminating decimal expansion; no exact representable decimal result.
 * }
 * ```
 *
 * @param precision Precision value
 * @param roundingMode Optional rounding Mode. By default RoundingMode.HALF_UP.
 */
exports.MC = function _MC(precision, roundingMode) {
    return new MathContext(precision, roundingMode);
};
//# sourceMappingURL=bigdecimal.js.map

/***/ }),

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARRAY_TYPE: () => (/* binding */ ARRAY_TYPE),
/* harmony export */   EPSILON: () => (/* binding */ EPSILON),
/* harmony export */   RANDOM: () => (/* binding */ RANDOM),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   setMatrixArrayType: () => (/* binding */ setMatrixArrayType),
/* harmony export */   toRadian: () => (/* binding */ toRadian)
/* harmony export */ });
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};

/***/ }),

/***/ "./node_modules/gl-matrix/esm/index.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   glMatrix: () => (/* reexport module object */ _common_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   mat2: () => (/* reexport module object */ _mat2_js__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   mat2d: () => (/* reexport module object */ _mat2d_js__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   mat3: () => (/* reexport module object */ _mat3_js__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   mat4: () => (/* reexport module object */ _mat4_js__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   quat: () => (/* reexport module object */ _quat_js__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   quat2: () => (/* reexport module object */ _quat2_js__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   vec2: () => (/* reexport module object */ _vec2_js__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   vec3: () => (/* reexport module object */ _vec3_js__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   vec4: () => (/* reexport module object */ _vec4_js__WEBPACK_IMPORTED_MODULE_9__)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _mat2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat2.js */ "./node_modules/gl-matrix/esm/mat2.js");
/* harmony import */ var _mat2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat2d.js */ "./node_modules/gl-matrix/esm/mat2d.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/esm/mat3.js");
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mat4.js */ "./node_modules/gl-matrix/esm/mat4.js");
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quat.js */ "./node_modules/gl-matrix/esm/quat.js");
/* harmony import */ var _quat2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quat2.js */ "./node_modules/gl-matrix/esm/quat2.js");
/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2.js */ "./node_modules/gl-matrix/esm/vec2.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/esm/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/esm/vec4.js");












/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LDU: () => (/* binding */ LDU),
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   adjoint: () => (/* binding */ adjoint),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   determinant: () => (/* binding */ determinant),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   frob: () => (/* binding */ frob),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromScaling: () => (/* binding */ fromScaling),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),
/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transpose: () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues(m00, m01, m10, m11) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {ReadonlyMat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {ReadonlyMat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3]);
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {ReadonlyMat2} L the lower triangular matrix
 * @param {ReadonlyMat2} D the diagonal matrix
 * @param {ReadonlyMat2} U the upper triangular matrix
 * @param {ReadonlyMat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2d.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2d.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   determinant: () => (/* binding */ determinant),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   frob: () => (/* binding */ frob),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromScaling: () => (/* binding */ fromScaling),
/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),
/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   translate: () => (/* binding */ translate)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2x3 Matrix
 * @module mat2d
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(6);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function fromValues(a, b, c, d, tx, ty) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2d} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {ReadonlyMat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   adjoint: () => (/* binding */ adjoint),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   determinant: () => (/* binding */ determinant),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   frob: () => (/* binding */ frob),
/* harmony export */   fromMat2d: () => (/* binding */ fromMat2d),
/* harmony export */   fromMat4: () => (/* binding */ fromMat4),
/* harmony export */   fromQuat: () => (/* binding */ fromQuat),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromScaling: () => (/* binding */ fromScaling),
/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),
/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),
/* harmony export */   normalFromMat4: () => (/* binding */ normalFromMat4),
/* harmony export */   projection: () => (/* binding */ projection),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   translate: () => (/* binding */ translate),
/* harmony export */   transpose: () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   adjoint: () => (/* binding */ adjoint),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   determinant: () => (/* binding */ determinant),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   frob: () => (/* binding */ frob),
/* harmony export */   fromQuat: () => (/* binding */ fromQuat),
/* harmony export */   fromQuat2: () => (/* binding */ fromQuat2),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromRotationTranslation: () => (/* binding */ fromRotationTranslation),
/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),
/* harmony export */   fromRotationTranslationScaleOrigin: () => (/* binding */ fromRotationTranslationScaleOrigin),
/* harmony export */   fromScaling: () => (/* binding */ fromScaling),
/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   fromXRotation: () => (/* binding */ fromXRotation),
/* harmony export */   fromYRotation: () => (/* binding */ fromYRotation),
/* harmony export */   fromZRotation: () => (/* binding */ fromZRotation),
/* harmony export */   frustum: () => (/* binding */ frustum),
/* harmony export */   getRotation: () => (/* binding */ getRotation),
/* harmony export */   getScaling: () => (/* binding */ getScaling),
/* harmony export */   getTranslation: () => (/* binding */ getTranslation),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   lookAt: () => (/* binding */ lookAt),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),
/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),
/* harmony export */   ortho: () => (/* binding */ ortho),
/* harmony export */   orthoNO: () => (/* binding */ orthoNO),
/* harmony export */   orthoZO: () => (/* binding */ orthoZO),
/* harmony export */   perspective: () => (/* binding */ perspective),
/* harmony export */   perspectiveFromFieldOfView: () => (/* binding */ perspectiveFromFieldOfView),
/* harmony export */   perspectiveNO: () => (/* binding */ perspectiveNO),
/* harmony export */   perspectiveZO: () => (/* binding */ perspectiveZO),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   targetTo: () => (/* binding */ targetTo),
/* harmony export */   translate: () => (/* binding */ translate),
/* harmony export */   transpose: () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */

var perspective = perspectiveNO;
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Alias for {@link mat4.orthoNO}
 * @function
 */

var ortho = orthoNO;
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
    return identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   calculateW: () => (/* binding */ calculateW),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   conjugate: () => (/* binding */ conjugate),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   exp: () => (/* binding */ exp),
/* harmony export */   fromEuler: () => (/* binding */ fromEuler),
/* harmony export */   fromMat3: () => (/* binding */ fromMat3),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   getAngle: () => (/* binding */ getAngle),
/* harmony export */   getAxisAngle: () => (/* binding */ getAxisAngle),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   ln: () => (/* binding */ ln),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pow: () => (/* binding */ pow),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   rotationTo: () => (/* binding */ rotationTo),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   setAxes: () => (/* binding */ setAxes),
/* harmony export */   setAxisAngle: () => (/* binding */ setAxisAngle),
/* harmony export */   slerp: () => (/* binding */ slerp),
/* harmony export */   sqlerp: () => (/* binding */ sqlerp),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/esm/mat3.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/esm/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/esm/vec4.js");




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();
  var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();
  var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var clone = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.clone;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.fromValues;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var copy = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.copy;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var set = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.set;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */

var add = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.add;
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var scale = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.scale;
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.dot;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.lerp;
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */

var length = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.length;
/**
 * Alias for {@link quat.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.squaredLength;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.normalize;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.exactEquals;
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat} a The first vector.
 * @param {ReadonlyQuat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var equals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.equals;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.create();
  var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(1, 0, 0);
  var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0);
  return function (out, a, b) {
    var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.dot(a, b);

    if (dot < -0.999999) {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, xUnitVec3, a);
      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__.len(tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, yUnitVec3, a);
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__.normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = create();
  var temp2 = create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_3__.create();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize(out, fromMat3(out, matr));
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat2.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat2.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   conjugate: () => (/* binding */ conjugate),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   fromMat4: () => (/* binding */ fromMat4),
/* harmony export */   fromRotation: () => (/* binding */ fromRotation),
/* harmony export */   fromRotationTranslation: () => (/* binding */ fromRotationTranslation),
/* harmony export */   fromRotationTranslationValues: () => (/* binding */ fromRotationTranslationValues),
/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   getDual: () => (/* binding */ getDual),
/* harmony export */   getReal: () => (/* binding */ getReal),
/* harmony export */   getTranslation: () => (/* binding */ getTranslation),
/* harmony export */   identity: () => (/* binding */ identity),
/* harmony export */   invert: () => (/* binding */ invert),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   rotateAroundAxis: () => (/* binding */ rotateAroundAxis),
/* harmony export */   rotateByQuatAppend: () => (/* binding */ rotateByQuatAppend),
/* harmony export */   rotateByQuatPrepend: () => (/* binding */ rotateByQuatPrepend),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   setDual: () => (/* binding */ setDual),
/* harmony export */   setReal: () => (/* binding */ setReal),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   translate: () => (/* binding */ translate)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ "./node_modules/gl-matrix/esm/quat.js");
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat4.js */ "./node_modules/gl-matrix/esm/mat4.js");



/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function create() {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(8);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function clone(a) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q a normalized quaternion
 * @param {ReadonlyVec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyVec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {ReadonlyMat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function fromMat4(out, a) {
  //TODO Optimize this
  var outer = _quat_js__WEBPACK_IMPORTED_MODULE_1__.create();
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__.getRotation(outer, a);
  var t = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__.getTranslation(t, a);
  fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__.copy;
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__.copy;
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {quat2} out
 */

function translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__.rotateX(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__.rotateY(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__.rotateZ(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {
    return copy(out, a);
  }

  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 */

function multiply(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _quat_js__WEBPACK_IMPORTED_MODULE_1__.dot;
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function lerp(out, a, b, t) {
  var mt = 1 - t;
  if (dot(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function invert(out, a) {
  var sqlen = squaredLength(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var length = _quat_js__WEBPACK_IMPORTED_MODULE_1__.length;
/**
 * Alias for {@link quat2.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _quat_js__WEBPACK_IMPORTED_MODULE_1__.squaredLength;
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function normalize(out, a) {
  var magnitude = squaredLength(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {ReadonlyQuat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function str(a) {
  return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat2} a the first dual quaternion.
 * @param {ReadonlyQuat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat2} a the first dual quat.
 * @param {ReadonlyQuat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   angle: () => (/* binding */ angle),
/* harmony export */   ceil: () => (/* binding */ ceil),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   cross: () => (/* binding */ cross),
/* harmony export */   dist: () => (/* binding */ dist),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   div: () => (/* binding */ div),
/* harmony export */   divide: () => (/* binding */ divide),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   floor: () => (/* binding */ floor),
/* harmony export */   forEach: () => (/* binding */ forEach),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   inverse: () => (/* binding */ inverse),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   max: () => (/* binding */ max),
/* harmony export */   min: () => (/* binding */ min),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   negate: () => (/* binding */ negate),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   sqrDist: () => (/* binding */ sqrDist),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transformMat2: () => (/* binding */ transformMat2),
/* harmony export */   transformMat2d: () => (/* binding */ transformMat2d),
/* harmony export */   transformMat3: () => (/* binding */ transformMat3),
/* harmony export */   transformMat4: () => (/* binding */ transformMat4),
/* harmony export */   zero: () => (/* binding */ zero)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function fromValues(x, y) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */

function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */

function rotate(out, a, b, rad) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(rad),
      cosC = Math.cos(rad); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1],
      // mag is the product of the magnitudes of a and b
  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),
      // mag &&.. short circuits if mag == 0
  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1

  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   angle: () => (/* binding */ angle),
/* harmony export */   bezier: () => (/* binding */ bezier),
/* harmony export */   ceil: () => (/* binding */ ceil),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   cross: () => (/* binding */ cross),
/* harmony export */   dist: () => (/* binding */ dist),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   div: () => (/* binding */ div),
/* harmony export */   divide: () => (/* binding */ divide),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   floor: () => (/* binding */ floor),
/* harmony export */   forEach: () => (/* binding */ forEach),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   hermite: () => (/* binding */ hermite),
/* harmony export */   inverse: () => (/* binding */ inverse),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   max: () => (/* binding */ max),
/* harmony export */   min: () => (/* binding */ min),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   negate: () => (/* binding */ negate),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   rotateX: () => (/* binding */ rotateX),
/* harmony export */   rotateY: () => (/* binding */ rotateY),
/* harmony export */   rotateZ: () => (/* binding */ rotateZ),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   sqrDist: () => (/* binding */ sqrDist),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transformMat3: () => (/* binding */ transformMat3),
/* harmony export */   transformMat4: () => (/* binding */ transformMat4),
/* harmony export */   transformQuat: () => (/* binding */ transformQuat),
/* harmony export */   zero: () => (/* binding */ zero)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues(x, y, z) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;
  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateX(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateY(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateZ(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   ceil: () => (/* binding */ ceil),
/* harmony export */   clone: () => (/* binding */ clone),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   cross: () => (/* binding */ cross),
/* harmony export */   dist: () => (/* binding */ dist),
/* harmony export */   distance: () => (/* binding */ distance),
/* harmony export */   div: () => (/* binding */ div),
/* harmony export */   divide: () => (/* binding */ divide),
/* harmony export */   dot: () => (/* binding */ dot),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   exactEquals: () => (/* binding */ exactEquals),
/* harmony export */   floor: () => (/* binding */ floor),
/* harmony export */   forEach: () => (/* binding */ forEach),
/* harmony export */   fromValues: () => (/* binding */ fromValues),
/* harmony export */   inverse: () => (/* binding */ inverse),
/* harmony export */   len: () => (/* binding */ len),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   max: () => (/* binding */ max),
/* harmony export */   min: () => (/* binding */ min),
/* harmony export */   mul: () => (/* binding */ mul),
/* harmony export */   multiply: () => (/* binding */ multiply),
/* harmony export */   negate: () => (/* binding */ negate),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   scale: () => (/* binding */ scale),
/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),
/* harmony export */   set: () => (/* binding */ set),
/* harmony export */   sqrDist: () => (/* binding */ sqrDist),
/* harmony export */   sqrLen: () => (/* binding */ sqrLen),
/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),
/* harmony export */   squaredLength: () => (/* binding */ squaredLength),
/* harmony export */   str: () => (/* binding */ str),
/* harmony export */   sub: () => (/* binding */ sub),
/* harmony export */   subtract: () => (/* binding */ subtract),
/* harmony export */   transformMat4: () => (/* binding */ transformMat4),
/* harmony export */   transformQuat: () => (/* binding */ transformQuat),
/* harmony export */   zero: () => (/* binding */ zero)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues(x, y, z, w) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */

function cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */

function transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const gl_utils_1 = __webpack_require__(/*! ./utils/gl-utils */ "./src/utils/gl-utils.ts");
const gl_matrix_1 = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
const UserController_1 = __webpack_require__(/*! ./controllers/UserController */ "./src/controllers/UserController.ts");
const ApiClient_1 = __webpack_require__(/*! ./services/ApiClient */ "./src/services/ApiClient.ts");
const astroobjectdata_json_1 = __importDefault(__webpack_require__(/*! ./config/astroobjectdata.json */ "./src/config/astroobjectdata.json"));
const LODManager_1 = __webpack_require__(/*! ./models/LODManager */ "./src/models/LODManager.ts");
const WebGLShape_1 = __webpack_require__(/*! ./models/WebGLShape */ "./src/models/WebGLShape.ts");
const AstroBody_1 = __webpack_require__(/*! ./models/AstroBody */ "./src/models/AstroBody.ts");
const AstroSystem_1 = __webpack_require__(/*! ./models/AstroSystem */ "./src/models/AstroSystem.ts");
const bVec3 = __importStar(__webpack_require__(/*! ./utils/big-vec3 */ "./src/utils/big-vec3.ts"));
const bigdecimal_js_1 = __webpack_require__(/*! bigdecimal.js */ "./node_modules/bigdecimal.js/lib/bigdecimal.js");
const nearbystars_json_1 = __importDefault(__webpack_require__(/*! ./config/nearbystars.json */ "./src/config/nearbystars.json"));
const astroobject_json_1 = __importDefault(__webpack_require__(/*! ./config/astroobject.json */ "./src/config/astroobject.json"));
const G = (6.6743 * (10 ** -11));
const vertexShaderSourceCode = `#version 300 es
    precision highp float;
    
    in vec3 vertexPosition;
    in vec3 vertexColor;

    out vec3 fragmentColor;

    uniform mat4 matWorld;
    uniform mat4 matViewProj;

    void main() {
        fragmentColor = vertexColor;

        gl_Position = matViewProj * matWorld * vec4(vertexPosition, 1.0);
    }`;
const fragmentShaderSourceCode = `#version 300 es
    precision highp float;
    
    in vec3 fragmentColor;
    out vec4 outputColor;

    void main() {
        outputColor = vec4(fragmentColor, 1.0);
    }`;
let user = new UserController_1.UserController();
function scrollFunc() {
}
let moveForward = false;
let moveBackward = false;
let moveRight = false;
let moveLeft = false;
let moveUp = false;
let moveDown = false;
function keyDown(e) {
    if (user.isMoving == false) {
        user.isMoving = true;
    }
    if (e.code == "KeyW") {
        user.velocity[2] = user.speed;
    }
    if (e.code == "KeyS") {
        user.velocity[2] = -user.speed;
    }
    if (e.code == "KeyD") {
        user.velocity[0] = user.speed;
    }
    if (e.code == "KeyA") {
        user.velocity[0] = -user.speed;
    }
    if (e.code == "Space") {
        user.velocity[1] = user.speed;
    }
    if (e.code == "ControlLeft") {
        user.velocity[1] = -user.speed;
    }
    if (e.code == "KeyB") {
        if (user.speed >= 0.1) {
            user.speed -= 0.1;
        }
        else {
            user.speed -= 0.001;
        }
    }
}
function keyUp(e) {
    if (e.code == "KeyW") {
        user.velocity[2] = 0;
    }
    if (e.code == "KeyS") {
        user.velocity[2] = 0;
    }
    if (e.code == "KeyD") {
        user.velocity[0] = 0;
    }
    if (e.code == "KeyA") {
        user.velocity[0] = 0;
    }
    if (e.code == "Space") {
        user.velocity[1] = 0;
    }
    if (e.code == "ControlLeft") {
        user.velocity[1] = 0;
    }
}
let rotating = false;
function click(e) {
    if (e.button == 1) {
        if (rotating == false) {
            user.setUserOrientation[0] = e.offsetX;
            user.setUserOrientation[1] = e.offsetY;
            user.targetUserOrientation[0] = user.setUserOrientation[0];
            user.targetUserOrientation[1] = user.setUserOrientation[1];
            rotating = true;
        }
    }
}
function click2(e) {
    if (e.button == 1) {
        user.targetUserOrientation[0] = user.setUserOrientation[0];
        user.targetUserOrientation[1] = user.setUserOrientation[1];
        user.rotationVec[0] = 0;
        user.rotationVec[1] = 0;
        rotating = false;
    }
}
function rotateCamera(e) {
    if (rotating == true) {
        user.targetUserOrientation[0] = e.offsetX;
        user.targetUserOrientation[1] = e.offsetY;
        //console.log(user.setUserOrientation[0] - user.targetUserOrientation[0],  user.setUserOrientation[1] - user.targetUserOrientation[1])
        user.rotationVec[0] = e.movementX;
        user.rotationVec[1] = e.movementY;
    }
}
function whee(e) {
    if (e.deltaY <= -100) {
        moveBackward = false;
        moveForward = true;
    }
    if (e.deltaY >= 100) {
        moveForward = false;
        moveBackward = true;
    }
}
async function main() {
    //	var loader = document.querySelector("#loader")!;
    const canvas = document.getElementById('demo-canvas');
    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {
        (0, gl_utils_1.showError)('Could not get Canvas reference');
        return;
    }
    var loader = document.querySelector("#loader");
    var divContainerElement = document.querySelector("#divcontainer");
    var dataContainer = document.getElementById("datacontainer");
    var dataContainerName = document.getElementById("datacontainerName");
    var dataContainerClassification = document.getElementById("datacontainerClassification");
    var dataContainerPosition = document.getElementById("datacontainerPosition");
    var dataContainerVelocity = document.getElementById("datacontainerVelocity");
    var dataContainerAcceleration = document.getElementById("datacontainerAcceleration");
    window.addEventListener("keydown", keyDown);
    window.addEventListener("keyup", keyUp);
    window.addEventListener("mousedown", click);
    window.addEventListener("mouseup", click2);
    window.addEventListener("mousemove", rotateCamera);
    window.addEventListener("wheel", whee, { passive: false });
    const gl = (0, gl_utils_1.getContext)(canvas);
    const demoProgram = (0, gl_utils_1.createProgram)(gl, vertexShaderSourceCode, fragmentShaderSourceCode);
    if (!demoProgram) {
        (0, gl_utils_1.showError)('Failed to compile WebGL program');
        return;
    }
    const posAttrib = gl.getAttribLocation(demoProgram, 'vertexPosition');
    const colorAttrib = gl.getAttribLocation(demoProgram, 'vertexColor');
    const matWorldUniform = gl.getUniformLocation(demoProgram, 'matWorld');
    const matViewProjUniform = gl.getUniformLocation(demoProgram, 'matViewProj');
    if (posAttrib < 0 || colorAttrib < 0 || !matWorldUniform || !matViewProjUniform) {
        (0, gl_utils_1.showError)(`Failed to get attribs/uniforms: ` +
            `pos=${posAttrib}, color=${colorAttrib} ` +
            `matWorld=${!!matWorldUniform} matViewProj=${!!matViewProjUniform}`);
        return;
    }
    let astroObjectList = await buildAstroObjects(gl, posAttrib, colorAttrib, user);
    let system = new AstroSystem_1.AstroSystem(astroObjectList);
    const matWorld = gl_matrix_1.mat4.create();
    const matView = gl_matrix_1.mat4.create();
    const matProj = gl_matrix_1.mat4.create();
    const loaderText = document.getElementById('loader-text');
    if (loaderText != null) {
        loaderText.style.animationIterationCount = '1';
        loaderText.addEventListener('animationend', (event) => {
            loader.classList.add("loader-overlay--hidden");
        });
    }
    else {
        loader.classList.add("loader-overlay--hidden");
    }
    //loader.classList.add("loader-overlay--hidden");
    let lastFrameTime = performance.now();
    const frame = function () {
        const thisFrameTime = performance.now();
        const dt = (thisFrameTime - lastFrameTime) / 1000;
        // Update system here
        lastFrameTime = thisFrameTime;
        user.translate(dt);
        user.rotate(dt);
        const cameraX = user.userPosition[0];
        const cameraY = user.userPosition[1];
        const cameraZ = user.userPosition[2];
        // Updating system where every second updates a day
        //system.updateAstroSystem(dt)
        gl_matrix_1.mat4.lookAt(matView, gl_matrix_1.vec3.fromValues(cameraX, cameraY, cameraZ), gl_matrix_1.vec3.fromValues(user.viewVec[0], user.viewVec[1], user.viewVec[2]), gl_matrix_1.vec3.fromValues(0, 1, 0));
        gl_matrix_1.mat4.perspective(matProj, gl_matrix_1.glMatrix.toRadian(50), canvas.width / canvas.height, 0.001, 100.0);
        const matViewProj = gl_matrix_1.mat4.create();
        gl_matrix_1.mat4.multiply(matViewProj, matProj, matView);
        canvas.width = canvas.clientWidth * devicePixelRatio;
        canvas.height = canvas.clientHeight * devicePixelRatio;
        gl.clearColor(0.0039, 0.0429, 0.0976, 1);
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
        gl.enable(gl.DEPTH_TEST);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.viewport(0, 0, canvas.width, canvas.height);
        gl.useProgram(demoProgram);
        gl.uniformMatrix4fv(matViewProjUniform, false, matViewProj);
        /*
        system._astroObjectList = system._astroObjectList.sort((a, b) => {
            let bIVecA = bVec3.create();
            let bIVecB = bVec3.create();
            bVec3.scale(bIVecA, a.position, Big("10").pow(-9, new MC(20)));
            bVec3.scale(bIVecB, b.position, Big("10").pow(-9, new MC(20)));
            let iVecA = vec3.fromValues(Number(bIVecA[0].toBigInt()), Number(bIVecA[1].toBigInt()), Number(bIVecA[2].toBigInt()));
            let iVecB = vec3.fromValues(Number(bIVecB[0].toBigInt()), Number(bIVecB[1].toBigInt()), Number(bIVecB[2].toBigInt()));
            return vec3.distance(user.userPosition, iVecB)-vec3.distance(user.userPosition, iVecA)
        });*/
        if (user.coupledAstroObject == null) {
            dataContainer.style.visibility = "hidden";
        }
        else {
            dataContainer.style.visibility = "visible";
            dataContainerName.innerHTML = user.coupledAstroObject.name;
            dataContainerClassification.innerHTML = user.coupledAstroObject.classification;
            dataContainerPosition.innerHTML = ``;
            dataContainerVelocity.innerHTML = `${user.coupledAstroObject.getVelocity()[0]}, ${user.coupledAstroObject.getVelocity()[1]}, ${user.coupledAstroObject.getVelocity()[2]}`;
            dataContainerAcceleration.innerHTML = `${user.coupledAstroObject.getAcceleration()[0]}, ${user.coupledAstroObject.getAcceleration()[1]}, ${user.coupledAstroObject.getAcceleration()[2]}`;
        }
        // Here I need to check distance from camera for each item and choose to draw HTML element or 3d model
        let i = 0;
        let retList = system.getDrawList(user.userPosition);
        let v1 = bVec3.create();
        let v2 = bVec3.create();
        system._astroObjectList.forEach((obj) => {
            obj.getLODManager().draw(dt, retList.includes(obj), gl, matWorldUniform, obj.getDrawPosition(), matViewProj, i, gl_matrix_1.vec3.distance(user.userPosition, obj.getDrawPosition()));
            i++;
        });
        requestAnimationFrame(frame);
    };
    requestAnimationFrame(frame);
}
function buildAstroObjectsRecur(curObject, depth) {
    // Build astro object
    // Iterate through and build astro bodies	
    console.log(`${String('\t').repeat(depth)}${curObject.name}`);
    for (const bod of curObject.astroBodies) {
        console.log(`${String('\t').repeat(depth + 1)}${bod.name}`);
    }
    if (curObject.astroObjects.length == 0) {
        // Return astro object
        return;
    }
    else {
        for (const obj of curObject.astroObjects) {
            buildAstroObjectsRecur(obj, depth + 1);
            // Append astro object to this astro object
        }
        // return astro object
    }
}
async function buildAstroObjects(gl, posAttrib, colorAttrib, user) {
    let ret = [];
    const api = new ApiClient_1.ApiClient();
    const curEphemeris = await api.getEphemeris(new Date(Date.now()), Object.keys(astroobjectdata_json_1.default));
    const rootObject = astroobject_json_1.default;
    buildAstroObjectsRecur(rootObject, 0);
    var divContainerElement = document.querySelector("#divcontainer");
    var sun;
    const initialData = astroobjectdata_json_1.default;
    let types = ["O", "B", "A", "F", "G", "K", "M"];
    Object.entries(initialData).forEach(([key, data]) => {
        // Get WebGLShape
        let size = data.radius / 696349;
        let tilt = data.axialTilt;
        let rSpeed = data.rotationSpeed;
        let shape = new WebGLShape_1.WebGLShape(gl_matrix_1.vec3.create(), size, gl_matrix_1.vec3.fromValues(0, 1, 0), gl_matrix_1.glMatrix.toRadian(0), tilt, rSpeed, gl, posAttrib, colorAttrib);
        let lodManager = new LODManager_1.LODManager(shape, divContainerElement, data.name, user, "planet", 0, "");
        let x0 = (0, bigdecimal_js_1.Big)((curEphemeris[key].xPos).toString()).multiply((0, bigdecimal_js_1.Big)("10").pow((curEphemeris[key].xPosExpn), new bigdecimal_js_1.MC(20)));
        let y0 = (0, bigdecimal_js_1.Big)((curEphemeris[key].yPos).toString()).multiply((0, bigdecimal_js_1.Big)("10").pow((curEphemeris[key].yPosExpn), new bigdecimal_js_1.MC(20)));
        let z0 = (0, bigdecimal_js_1.Big)((curEphemeris[key].zPos).toString()).multiply((0, bigdecimal_js_1.Big)("10").pow((curEphemeris[key].zPosExpn), new bigdecimal_js_1.MC(20)));
        let position = bVec3.fromValues(x0.toString(), z0.toString(), y0.negate().toString());
        bVec3.scale(position, position, (0, bigdecimal_js_1.Big)("1000"));
        let xV0 = (0, bigdecimal_js_1.Big)((curEphemeris[key].xVel).toString()).multiply((0, bigdecimal_js_1.Big)("10").pow((curEphemeris[key].xVelExpn), new bigdecimal_js_1.MC(20)));
        let yV0 = (0, bigdecimal_js_1.Big)((curEphemeris[key].yVel).toString()).multiply((0, bigdecimal_js_1.Big)("10").pow((curEphemeris[key].yVelExpn), new bigdecimal_js_1.MC(20)));
        let zV0 = (0, bigdecimal_js_1.Big)((curEphemeris[key].zVel).toString()).multiply((0, bigdecimal_js_1.Big)("10").pow((curEphemeris[key].zVelExpn), new bigdecimal_js_1.MC(20)));
        let velocity = bVec3.fromValues(xV0.toString(), zV0.toString(), yV0.negate().toString());
        bVec3.scale(velocity, velocity, (0, bigdecimal_js_1.Big)("1000"));
        let acceleration = bVec3.create();
        let name = data.name;
        let mass = (0, bigdecimal_js_1.Big)(eval(data.mass).toString());
        let pRadius = 1;
        let eRadius = 1;
        let astroObject = new AstroBody_1.PlanetaryBody(name, [], "Gas Giant", mass, 0, position, velocity, acceleration, pRadius, eRadius, lodManager, data.subsystem);
        astroObject.getLODManager().setAstroObject(astroObject);
        //let newObj = new AstroObject(position, velocity, acceleration, name, mass, pRadius, eRadius, lodManager);
        if (astroObject.name == "Sun") {
            sun = astroObject;
        }
        ret.push(astroObject);
    });
    const starsData = nearbystars_json_1.default;
    Object.entries(starsData).forEach(([key, data]) => {
        let size = 1;
        let tilt = 0;
        let rSpeed = 0;
        let shape = new WebGLShape_1.WebGLShape(gl_matrix_1.vec3.create(), size, gl_matrix_1.vec3.fromValues(0, 1, 0), gl_matrix_1.glMatrix.toRadian(0), tilt, rSpeed, gl, posAttrib, colorAttrib);
        //let data = new StarConfig((Math.random() * 100000).toString(), "", typ, (Math.random() * 7), 1, (Math.random() * 700000), [(Math.random() * 24), (Math.random() * 60), (Math.random() * 60)], [negFlag * (Math.random()*90), Math.random() * 60, Math.random() * 60]);
        let lodManager = new LODManager_1.LODManager(shape, divContainerElement, data.name, user, data.spectralType, 6, data.spectralType);
        let alpha = (data.ra[0] + (data.ra[1] / 60) + (data.ra[2] / 3600)) * 15 * (Math.PI / 180);
        let delta = (data.dec[0] + (data.dec[1] / 60) + (data.dec[2] / 3600)) * (Math.PI / 180);
        let dist = (0, bigdecimal_js_1.Big)(data.d.toString()).multiply((0, bigdecimal_js_1.Big)("9.461").multiply((0, bigdecimal_js_1.Big)("10").pow(15)));
        let x0 = dist.multiply((0, bigdecimal_js_1.Big)(Math.cos(delta).toString()).multiply((0, bigdecimal_js_1.Big)(Math.cos(alpha).toString()))).toString();
        let y0 = dist.multiply((0, bigdecimal_js_1.Big)(Math.cos(delta).toString()).multiply((0, bigdecimal_js_1.Big)(Math.sin(alpha).toString()))).toString();
        let z0 = dist.multiply((0, bigdecimal_js_1.Big)(Math.sin(delta).toString())).toString();
        let position = bVec3.fromValues(x0, z0, y0);
        let velocity = bVec3.fromValues("0", "0", "0");
        let acceleration = bVec3.create();
        let name = data.name;
        let mass = (0, bigdecimal_js_1.Big)(data.mass.toString()).multiply((0, bigdecimal_js_1.Big)("1.989").multiply((0, bigdecimal_js_1.Big)("10").pow(30)));
        let pRadius = 1;
        let eRadius = 1;
        let astroObject = new AstroBody_1.StellarBody(name, [], "Red Hypergiant", mass, 0, velocity, acceleration, eRadius, lodManager, [data.ra[0], data.ra[1], data.ra[2]], [data.dec[0], data.dec[1], data.dec[2]], [3261.56 / data.d, 0], 6, 6, 6, []);
        astroObject.getLODManager().setAstroObject(astroObject);
        ret.push(astroObject);
        sun.subsystem.push(name);
    });
    return ret;
}
try {
    main();
    //const starsData = astroobjectdata as AstroObjectParse;
    //console.log(starsData)
    // Initialize UserController
    // Initialize AstroObjects
    // Initialize AstroSystem
    //
}
catch (e) {
    (0, gl_utils_1.showError)(`Unhandled JavaScript exception: ${e}`);
}


/***/ }),

/***/ "./src/config/astroobject.json":
/*!*************************************!*\
  !*** ./src/config/astroobject.json ***!
  \*************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"Cosmic Web","designations":["The Cosmic Web"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":false,"primaryBodies":[],"astroBodies":[],"astroObjects":[{"name":"Laniakea Supercluster","designations":["Laniakea Supercluster"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":false,"primaryBodies":[],"astroBodies":[],"astroObjects":[{"name":"Virgo Cluster","designations":["Virgo Cluster"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":false,"primaryBodies":[],"astroBodies":[],"astroObjects":[{"name":"Local Group","designations":["Local Group"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":false,"primaryBodies":[],"astroBodies":[],"astroObjects":[{"name":"Milky Way Galaxy","designations":["Milky Way Galaxy"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":false,"primaryBodies":[],"astroBodies":[],"astroObjects":[{"name":"Solar System","designations":["Solar System"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":true,"primaryBodies":["Sun"],"astroBodies":[{"name":"Sun","mass":"(1.99 * (10**30))","radius":696349,"axialTilt":0.1265364,"rotationSpeed":0},{"name":"Mercury"},{"name":"Venus"}],"astroObjects":[{"name":"Earth-Moon System","designations":["Earth-Moon System"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":true,"primaryBodies":["Earth"],"astroBodies":[{"name":"Earth"},{"name":"Moon"}],"astroObjects":[]},{"name":"Martian System","designations":["Martian System"],"systemSpace":9007199254740991,"containsDynamicBodies":true,"isDynamicObject":false,"primaryBodies":["Mars"],"astroBodies":[{"name":"Mars"},{"name":"Phobos"},{"name":"Deimos"}],"astroObjects":[]}]},{"name":"Alpha Centauri","designations":["AlphaCentauri"],"systemSpace":9007199254740991,"containsDynamicBodies":false,"isDynamicObject":false,"primaryBodies":["Rigil Kentaurus"],"astroBodies":[],"astroObjects":[{"name":"Alpha Centauri AB","designations":["Alpha Centauri AB"],"systemSpace":9007199254740991,"containsDynamicBodies":false,"isDynamicObject":false,"primaryBodies":["Rigil Centaurus"],"astroBodies":[{"name":"Rigil Centaurus"},{"name":"Toliman"}],"astroObjects":[]},{"name":"Proxima Centauri","designations":["Proxima Centauri"],"systemSpace":9007199254740991,"containsDynamicBodies":false,"isDynamicObject":false,"primaryBodies":["Proxima Centauri"],"astroBodies":[{"name":"Proxima Centauri","spectralType":"M","absoluteMagnitude":15.6,"mass":0.122,"d":4.2465,"ra":[14,29,43],"dec":[-62,40,46]},{"name":"Proxima Centauri b"},{"name":"Proxima Centauri c"},{"name":"Proxima Centauri d"}],"astroObjects":[]}]},{"name":"Barnard\'s Star","designations":["Barnard\'s Star"],"systemSpace":9007199254740991,"containsDynamicBodies":false,"isDynamicObject":false,"primaryBodies":["Barnard\'s Star"],"astroBodies":[{"name":"Barnard\'s Star"},{"name":"Barnard\'s Star b"},{"name":"Barnard\'s Star c"},{"name":"Barnard\'s Star d"},{"name":"Barnard\'s Star e"}],"astroObjects":[]}]}]}]}]}]}');

/***/ }),

/***/ "./src/config/astroobjectdata.json":
/*!*****************************************!*\
  !*** ./src/config/astroobjectdata.json ***!
  \*****************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"10":{"name":"Sun","mass":"(1.99 * (10**30))","radius":696349,"axialTilt":0.1265364,"rotationSpeed":0,"systemSpace":9007199254740991,"subsystem":["Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","Ceres","Pluto","Haumea","Makemake","Eris"]},"199":{"name":"Mercury","mass":"(3.285 * (10**23))","radius":24.7,"axialTilt":0.00047,"rotationSpeed":0.0000175,"systemSpace":0,"subsystem":[]},"299":{"name":"Venus","mass":"(48.685 * (10**23))","radius":6051.8,"axialTilt":3.0962,"rotationSpeed":2.99e-7,"systemSpace":0,"subsystem":[]},"301":{"name":"Luna","mass":"(7.3476 * (10**22))","radius":1737.4,"axialTilt":0.0261,"rotationSpeed":0.00000266,"systemSpace":0,"subsystem":[]},"399":{"name":"Earth","mass":"(6 * (10**24))","radius":6378.14,"axialTilt":0.4101,"rotationSpeed":0.0000729,"systemSpace":20,"subsystem":["Luna"]},"401":{"name":"Phobos","mass":"(1.06 * (10**16))","radius":11.267,"axialTilt":0,"rotationSpeed":0.00645,"systemSpace":0,"subsystem":[]},"402":{"name":"Deimos","mass":"(1.51 * (10**15))","radius":6.2,"axialTilt":0.0349,"rotationSpeed":0.03979,"systemSpace":0,"subsystem":[]},"499":{"name":"Mars","mass":"(6.4191 * (10**22))","radius":3389.5,"axialTilt":0.436332,"rotationSpeed":0.004398,"systemSpace":0.8,"subsystem":["Phobos","Deimos"]},"599":{"name":"Jupiter","mass":"(1.898 * (10**27))","radius":71492,"axialTilt":0.05462,"rotationSpeed":0.000176,"systemSpace":0,"subsystem":[]},"699":{"name":"Saturn","mass":"(5.683 * (10**26))","radius":58232,"axialTilt":0.46635,"rotationSpeed":0.000103,"systemSpace":0,"subsystem":[]},"799":{"name":"Uranus","mass":"(8.681 * (10**25))","radius":25362,"axialTilt":1.7069,"rotationSpeed":0.00010124,"systemSpace":0,"subsystem":[]},"899":{"name":"Neptune","mass":"(1.0241 * (10 ** 26))","radius":24622,"axialTilt":0.494277,"rotationSpeed":0.0000307,"systemSpace":0,"subsystem":[]},"999":{"name":"Pluto","mass":"(1.307 * (10**22))","radius":1188.3,"axialTilt":2.0944,"rotationSpeed":0.0000179,"systemSpace":0,"subsystem":[]},"920136108":{"name":"Haumea","mass":"(4.01 * (10**21))","radius":816,"axialTilt":2.19911,"rotationSpeed":0.00044575,"systemSpace":0,"subsystem":[]},"920136199":{"name":"Eris","mass":"(1.67 * (10**22))","radius":1163,"axialTilt":0.767945,"rotationSpeed":0.000434,"systemSpace":0,"subsystem":[]},"Ceres":{"name":"Ceres","mass":"(9.3839 * (10**20))","radius":473,"axialTilt":0.06981,"rotationSpeed":0.0000616,"systemSpace":0,"subsystem":[]},"Makemake":{"name":"Makemake","mass":"(3.1 * (10**21))","radius":715,"axialTilt":0,"rotationSpeed":0.0000423,"systemSpace":0,"subsystem":[]}}');

/***/ }),

/***/ "./src/config/config.ts":
/*!******************************!*\
  !*** ./src/config/config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.config = void 0;
exports.config = {
    apiUrl: "http://localhost:8000",
    environment: "development"
};


/***/ }),

/***/ "./src/config/nearbystars.json":
/*!*************************************!*\
  !*** ./src/config/nearbystars.json ***!
  \*************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"Proxima Centauri":{"name":"Proxima Centauri","system":"Alpha Centauri","spectralType":"M","absoluteMagnitude":15.6,"mass":0.122,"d":4.2465,"ra":[14,29,43],"dec":[-62,40,46]},"Alpha Centauri A":{"name":"Alpha Centauri A","system":"Alpha Centauri","spectralType":"G","absoluteMagnitude":4.4,"mass":1.079,"d":4.3441,"ra":[14,39,36.5],"dec":[-60,50,2]},"Alpha Centauri B":{"name":"Alpha Centauri B","system":"Alpha Centauri","spectralType":"K","absoluteMagnitude":5.8,"mass":0.909,"d":4.3441,"ra":[14,39,35.1],"dec":[-60,50,14]},"Barnard\'s Star":{"name":"Barnard\'s Star","system":"Barnard\'s Star","spectralType":"M","absoluteMagnitude":13.2,"mass":0.144,"d":5.9629,"ra":[17,57,48.5],"dec":[4,41,36]},"Luhman 16 A":{"name":"Luhman 16 A","system":"Luhman 16","spectralType":"L","absoluteMagnitude":19.7,"mass":0.032,"d":6.5018,"ra":[10,49,18.9],"dec":[-53,19,10]},"Luhman 16 B":{"name":"Luhman 16 B","system":"Luhman 16","spectralType":"T","absoluteMagnitude":50,"mass":0.027,"d":6.504,"ra":[10,49,18.9],"dec":[-53,19,10]},"WISE 0855-0714":{"name":"WISE 0855-0714","system":"WISE 0855-0714","spectralType":"Y","absoluteMagnitude":28.2,"mass":0.0065,"d":7.43,"ra":[8,55,10.8],"dec":[-7,14,43]},"Wolf 359":{"name":"Wolf 359","system":"Wolf 359","spectralType":"M","absoluteMagnitude":16.55,"mass":0.09,"d":7.8558,"ra":[10,56,29.2],"dec":[7,0,53]},"Lalande 21185":{"name":"Lalande 21185","system":"Lalande 21185","spectralType":"M","absoluteMagnitude":10.44,"mass":0.39,"d":8.3044,"ra":[11,3,20.2],"dec":[35,58,12]},"Sirius A":{"name":"Sirius A","system":"Sirius","spectralType":"A","absoluteMagnitude":1.42,"mass":2.063,"d":8.7148,"ra":[6,45,8.9],"dec":[-16,42,58]},"Sirius B":{"name":"Sirius B","system":"Sirius","spectralType":"B","absoluteMagnitude":8.44,"mass":1.018,"d":8.704,"ra":[6,45,8.9],"dec":[-16,42,58]},"Gliese 65 A":{"name":"Gliese 65 A","system":"Gliese 65","spectralType":"M","absoluteMagnitude":12.54,"mass":0.102,"d":8.712,"ra":[1,39,1.3],"dec":[-17,57,1]},"Gliese 65 B":{"name":"Gliese 65 B","system":"Gliese 65","spectralType":"M","absoluteMagnitude":15.85,"mass":0.1,"d":8.736,"ra":[1,39,1.3],"dec":[-17,57,1]},"Ross 154":{"name":"Ross 154","system":"Ross 154","spectralType":"M","absoluteMagnitude":10.43,"mass":0.17,"d":9.7063,"ra":[18,49,49.4],"dec":[-23,50,10]},"Ross 248":{"name":"Ross 248","system":"Ross 248","spectralType":"M","absoluteMagnitude":14.79,"mass":0.136,"d":10.3057,"ra":[23,41,54.7],"dec":[44,10,30]},"Epsilon Eridani":{"name":"Epsilon Eridani","system":"Epsilon Eridani","spectralType":"K","absoluteMagnitude":6.19,"mass":0.82,"d":10.4749,"ra":[3,32,55.8],"dec":[-9,27,30]},"Lacaille 9352":{"name":"Lacaille 9352","system":"Lacaille 9352","spectralType":"M","absoluteMagnitude":9.75,"mass":0.486,"d":10.7241,"ra":[23,5,52],"dec":[-35,51,11]},"Ross 128":{"name":"Ross 128","system":"Ross 128","spectralType":"M","absoluteMagnitude":13.51,"mass":0.168,"d":11.0074,"ra":[11,47,44.4],"dec":[0,48,16]},"EZ Aquarii B":{"name":"EZ Aquarii B","system":"EZ Aquarii","spectralType":"M","absoluteMagnitude":15.58,"mass":0.11,"d":11.109,"ra":[22,38,33.4],"dec":[-15,17,57]},"EZ Aquarii C":{"name":"EZ Aquarii C","system":"EZ Aquarii","spectralType":"M","absoluteMagnitude":16.34,"mass":0.1,"d":11.075,"ra":[22,38,33.4],"dec":[-15,17,57]},"EZ Aquarii A":{"name":"EZ Aquarii A","system":"EZ Aquarii","spectralType":"M","absoluteMagnitude":15.64,"mass":0.11,"d":11.143,"ra":[22,38,33.4],"dec":[-15,17,57]},"Procyon B":{"name":"Procyon B","system":"Procyon","spectralType":"D","absoluteMagnitude":12.98,"mass":0.602,"d":11.37,"ra":[7,39,18.1],"dec":[5,13,30]},"Procyon A":{"name":"Procyon A","system":"Procyon","spectralType":"F","absoluteMagnitude":2.66,"mass":1.499,"d":11.434,"ra":[7,39,18.1],"dec":[5,13,30]},"61 Cygni A":{"name":"61 Cygni A","system":"61 Cygni","spectralType":"K","absoluteMagnitude":7.49,"mass":0.7,"d":11.4039,"ra":[21,6,53.9],"dec":[38,44,58]},"61 Cygni B":{"name":"61 Cygni B","system":"61 Cygni","spectralType":"K","absoluteMagnitude":8.31,"mass":0.63,"d":11.4039,"ra":[21,6,55.3],"dec":[38,44,31]},"Struve 2398 A":{"name":"Struve 2398 A","system":"Struve 2398","spectralType":"M","absoluteMagnitude":11.16,"mass":0.334,"d":11.4908,"ra":[18,42,46.7],"dec":[59,37,49]},"Struve 2398 B":{"name":"Struve 2398 B","system":"Struve 2398","spectralType":"M","absoluteMagnitude":11.95,"mass":0.248,"d":11.4908,"ra":[18,42,46.9],"dec":[59,37,37]},"Groombridge 34 A":{"name":"Groombridge 34 A","system":"Groombridge 34","spectralType":"M","absoluteMagnitude":10.32,"mass":0.38,"d":11.6183,"ra":[0,18,22.9],"dec":[44,1,23]},"Groombridge 34 B":{"name":"Groombridge 34 B","system":"Groombridge 34","spectralType":"M","absoluteMagnitude":13.3,"mass":0.15,"d":11.6199,"ra":[0,18,22.9],"dec":[44,1,23]},"DX Cancri":{"name":"DX Cancri","system":"Cancri","spectralType":"M","absoluteMagnitude":16.98,"mass":0.09,"d":11.6797,"ra":[8,29,49.5],"dec":[26,46,37]},"Epsilon Indi A":{"name":"Epsilon Indi A","system":"Epsilon Indi","spectralType":"K","absoluteMagnitude":6.89,"mass":0.754,"d":11.867,"ra":[22,3,21.7],"dec":[-57,47,10]},"Epsilon Indi Ba":{"name":"Epsilon Indi Ba","system":"Epsilon Indi","spectralType":"T","absoluteMagnitude":14.5,"mass":0.065,"d":11.8711,"ra":[22,4,10.5],"dec":[-56,46,58]},"Epsilon Indi Bb":{"name":"Epsilon Indi Bb","system":"Epsilon Indi","spectralType":"T","absoluteMagnitude":15.4,"mass":0.05,"d":11.8629,"ra":[22,4,10.5],"dec":[-56,46,58]},"Tau Ceti":{"name":"Tau Ceti","system":"Tau Ceti","spectralType":"G","absoluteMagnitude":5.68,"mass":0.783,"d":11.9118,"ra":[1,44,4.1],"dec":[-15,56,15]},"GJ 1061":{"name":"GJ 1061","system":"GJ 1061","spectralType":"M","absoluteMagnitude":15.26,"mass":0.113,"d":11.9839,"ra":[3,35,59.7],"dec":[-44,30,45]},"YZ Ceti":{"name":"YZ Ceti","system":"YZ Ceti","spectralType":"M","absoluteMagnitude":14.17,"mass":0.13,"d":12.1222,"ra":[1,12,30.6],"dec":[-16,59,56]},"Luyten\'s Star":{"name":"Luyten\'s Star","system":"Luyten\'s Star","spectralType":"M","absoluteMagnitude":11.97,"mass":0.26,"d":12.3485,"ra":[7,27,24.5],"dec":[5,13,33]},"Teegarden\'s Star":{"name":"Teegarden\'s Star","system":"Teegarden\'s Star","spectralType":"M","absoluteMagnitude":17.22,"mass":0.08,"d":12.497,"ra":[2,53,0.9],"dec":[16,52,53]},"Kapteyn\'s Star":{"name":"Kapteyn\'s Star","system":"Kapteyn\'s Star","spectralType":"M","absoluteMagnitude":10.87,"mass":0.281,"d":12.8308,"ra":[5,11,40.6],"dec":[-45,1,6]},"Lacaille 8760":{"name":"Lacaille 8760","system":"Lacaille 8760","spectralType":"M","absoluteMagnitude":8.69,"mass":0.6,"d":12.9472,"ra":[21,17,15.3],"dec":[-38,52,3]},"SCR 1845-6357 A":{"name":"SCR 1845-6357 A","system":"SCR 1845-6357","spectralType":"M","absoluteMagnitude":19.41,"mass":0.07,"d":13.0638,"ra":[18,45,5.3],"dec":[-63,57,48]},"SCR 1845-6357 B":{"name":"SCR 1845-6357 B","system":"SCR 1845-6357","spectralType":"T","absoluteMagnitude":15.3,"mass":0.03,"d":13.0638,"ra":[18,45,2.6],"dec":[-63,57,52]},"Kruger 60 A":{"name":"Kruger 60 A","system":"Kruger 60","spectralType":"M","absoluteMagnitude":11.76,"mass":0.271,"d":13.0672,"ra":[22,27,59.5],"dec":[57,41,45]},"Kruger 60 B":{"name":"Kruger 60 B","system":"Kruger 60","spectralType":"M","absoluteMagnitude":13.38,"mass":0.276,"d":13.0776,"ra":[22,27,59.5],"dec":[57,41,45]},"DENIS J1048-3956":{"name":"DENIS J1048","system":"DENIS J1048","spectralType":"M","absoluteMagnitude":19.37,"mass":0.08,"d":13.1932,"ra":[10,48,14.7],"dec":[-39,56,6]},"Ross 614 A":{"name":"Ross 614 A","system":"Ross 614","spectralType":"M","absoluteMagnitude":13.09,"mass":0.223,"d":13.403,"ra":[6,29,23.4],"dec":[-2,40,30]},"Ross 614 B":{"name":"Ross 614 B","system":"Ross 614","spectralType":"M","absoluteMagnitude":16.17,"mass":0.111,"d":13.323,"ra":[6,29,23.4],"dec":[-2,40,30]},"UGPS J0722-0540":{"name":"UGPS J0722-0540","system":"UGPS J0722-0540","spectralType":"T","absoluteMagnitude":18.45,"mass":0.01,"d":13.43,"ra":[7,22,27.3],"dec":[-5,40,30]},"Wolf 1061":{"name":"Wolf 1061","system":"Wolf 1061","spectralType":"M","absoluteMagnitude":11.93,"mass":0.294,"d":14.05,"ra":[16,30,18.1],"dec":[-12,39,45]},"Van Maanen\'s Star":{"name":"Van Maanen\'s Star","system":"Van Maanen\'s Star","spectralType":"D","absoluteMagnitude":14.21,"mass":0.67,"d":14.0718,"ra":[0,49,9.9],"dec":[5,23,19]},"Gliese 1":{"name":"Gliese 1","system":"Gliese 1","spectralType":"M","absoluteMagnitude":10.35,"mass":0.45,"d":14.1747,"ra":[0,5,24.4],"dec":[-37,21,27]},"TZ Arietis":{"name":"TZ Arietis","system":"TZ Arietis","spectralType":"M","absoluteMagnitude":14.03,"mass":0.14,"d":14.578,"ra":[2,0,13.2],"dec":[13,3,8]},"Wolf 424 A":{"name":"Wolf 424 A","system":"Wolf 424","spectralType":"M","absoluteMagnitude":14.97,"mass":0.143,"d":14.626,"ra":[12,33,17.2],"dec":[9,1,15]},"Wolf 424 B":{"name":"Wolf 424 B","system":"Wolf 424","spectralType":"M","absoluteMagnitude":14.96,"mass":0.131,"d":14.564,"ra":[12,33,17.2],"dec":[9,1,15]},"Gliese 687":{"name":"Gliese 687","system":"Gliese 687","spectralType":"M","absoluteMagnitude":10.89,"mass":0.401,"d":14.8395,"ra":[17,36,25.9],"dec":[68,20,21]},"Gliese 674":{"name":"Gliese 674","system":"Gliese 674","spectralType":"M","absoluteMagnitude":11.09,"mass":0.35,"d":14.8492,"ra":[17,28,39.9],"dec":[-46,53,43]},"LHS 292":{"name":"LHS 292","system":"LHS 292","spectralType":"M","absoluteMagnitude":17.32,"mass":0.08,"d":14.8706,"ra":[10,48,12.6],"dec":[-11,20,14]},"Gliese 440":{"name":"Gliese 440","system":"Gliese 440","spectralType":"D","absoluteMagnitude":13.18,"mass":0.75,"d":15.1226,"ra":[11,45,42.9],"dec":[-64,50,29]},"GJ 1245 A":{"name":"GJ 1245 A","system":"GJ 1245","spectralType":"M","absoluteMagnitude":15.17,"mass":0.11,"d":15.2035,"ra":[19,53,54.2],"dec":[44,24,55]},"GJ 1245 B":{"name":"GJ 1245 B","system":"GJ 1245","spectralType":"M","absoluteMagnitude":15.72,"mass":0.1,"d":15.2001,"ra":[19,53,55.2],"dec":[44,24,56]},"GJ 1245 C":{"name":"GJ 1245 C","system":"GJ 1245","spectralType":"M","absoluteMagnitude":18.46,"mass":0.07,"d":15.1967,"ra":[19,53,54.2],"dec":[44,24,55]},"WISE 1741+2553":{"name":"WISE 1741+2553","system":"WISE 1741+2553","spectralType":"T","absoluteMagnitude":18.18,"mass":0.3,"d":15.22,"ra":[17,41,24.2],"dec":[25,53,19]},"Gliese 876":{"name":"Gliese 876","system":"Gliese 876","spectralType":"M","absoluteMagnitude":11.81,"mass":0.37,"d":15.2382,"ra":[22,53,16.7],"dec":[-14,15,49]},"WISE 1639-6847":{"name":"WISE 1639-6847","system":"WISE 1639-6847","spectralType":"Y","absoluteMagnitude":22.1,"mass":0.15,"d":15.336,"ra":[19,39,40.9],"dec":[-68,47,46]},"LHS 288":{"name":"LHS 288","system":"LHS 288","spectralType":"M","absoluteMagnitude":15.51,"mass":0.11,"d":15.7586,"ra":[10,44,21.2],"dec":[-61,12,36]},"GJ 1002":{"name":"GJ 1002","system":"GJ 1002","spectralType":"M","absoluteMagnitude":15.4,"mass":0.11,"d":15.806,"ra":[0,6,43.8],"dec":[-7,32,22]},"DENIS 0255-4700":{"name":"DENIS 0255-4700","system":"DENIS 0255-4700","spectralType":"L","absoluteMagnitude":24.44,"mass":0.11,"d":15.877,"ra":[2,55,3.7],"dec":[-47,0,52]},"Groombridge 1618":{"name":"Groombridge 1618","system":"Groombridge 1618","spectralType":"K","absoluteMagnitude":8.16,"mass":0.67,"d":15.8857,"ra":[10,11,22.1],"dec":[49,27,15]},"Gliese 412 A":{"name":"Gliese 412 A","system":"Gliese 412","spectralType":"M","absoluteMagnitude":10.34,"mass":0.48,"d":15.9969,"ra":[11,5,28.6],"dec":[43,31,36]},"Gliese 412 B":{"name":"Gliese 412 B","system":"Gliese 412","spectralType":"M","absoluteMagnitude":16.05,"mass":0.1,"d":15.9969,"ra":[11,5,28.6],"dec":[11,5,30.4]},"AD Leonis":{"name":"AD Leonis","system":"AD Leonis","spectralType":"M","absoluteMagnitude":10.87,"mass":0.39,"d":16.1939,"ra":[10,19,36.4],"dec":[19,52,10]},"Gliese 832":{"name":"Gliese 832","system":"Gliese 832","spectralType":"M","absoluteMagnitude":10.2,"mass":0.45,"d":16.2005,"ra":[21,33,34],"dec":[-49,0,32]},"Gliese 682":{"name":"Gliese 682","system":"Gliese 682","spectralType":"M","absoluteMagnitude":12.45,"mass":0.27,"d":16.3328,"ra":[17,37,3.7],"dec":[-44,19,9]},"Keid (A)":{"name":"Keid (A)","system":"Omicron[squared] Eridani","spectralType":"K","absoluteMagnitude":5.93,"mass":0.84,"d":16.333,"ra":[4,15,16.3],"dec":[-7,39,10]},"Omicron[squared] Eridani B":{"name":"Omicron[squared] Eridani B","system":"Omicron[squared] Eridani","spectralType":"D","absoluteMagnitude":11.02,"mass":0.573,"d":16.333,"ra":[4,15,21.8],"dec":[-7,39,29]},"Omicron[squared] Eridani C":{"name":"Omicron[squared] Eridani C","system":"Omicron[squared] Eridani","spectralType":"M","absoluteMagnitude":12.74,"mass":0.2036,"d":16.333,"ra":[4,15,21.5],"dec":[-7,39,22]},"EV Lacertae":{"name":"EV Lacertae","system":"EV Lacertae","spectralType":"M","absoluteMagnitude":11.7,"mass":0.35,"d":16.4761,"ra":[22,46,49.7],"dec":[44,20,2]},"70 Ophiuchi A":{"name":"70 Ophiuchi A","system":"70 Ophiuchi","spectralType":"K","absoluteMagnitude":5.66,"mass":0.9,"d":16.7074,"ra":[18,5,27.4],"dec":[2,29,59]},"70 Ophiuchi B":{"name":"70 Ophiuchi B","system":"70 Ophiuchi","spectralType":"K","absoluteMagnitude":7.46,"mass":0.7,"d":16.7074,"ra":[18,5,27.5],"dec":[2,29,56]},"Altair":{"name":"Altair","system":"Altair","spectralType":"A","absoluteMagnitude":2.22,"mass":1.79,"d":16.73,"ra":[19,50,47],"dec":[8,52,6]},"El Cancri A":{"name":"El Cancri A","system":"El Cancri","spectralType":"M","absoluteMagnitude":15.5,"mass":0.12,"d":16.789,"ra":[8,58,15.2],"dec":[19,45,47]},"El Cancri B":{"name":"El Cancri B","system":"El Cancri","spectralType":"M","absoluteMagnitude":16.36,"mass":0.1,"d":16.811,"ra":[8,58,15.2],"dec":[19,45,47]},"WISE J150649.97+702736.1":{"name":"WISE J150649.97+702736.1","system":"WISE J150649.97+702736.1","spectralType":"T","absoluteMagnitude":15.17,"mass":0.09,"d":16.856,"ra":[15,6,52.4],"dec":[70,27,25]},"GJ 3379":{"name":"GJ 3379","system":"GJ 3379","spectralType":"M","absoluteMagnitude":12.73,"mass":0.2312,"d":16.9861,"ra":[6,0,3.5],"dec":[2,42,24]},"DENIS J081730.0-615520":{"name":"DENIS J081730.0-615520","system":"DENIS J081730.0-615520","spectralType":"T","absoluteMagnitude":15.03,"mass":0.015,"d":17.002,"ra":[8,17,30.1],"dec":[-61,55,16]},"Gliese 445":{"name":"Gliese 445","system":"Gliese 445","spectralType":"M","absoluteMagnitude":12.19,"mass":0.14,"d":17.1368,"ra":[11,47,41.4],"dec":[78,41,28]},"2MASS J15404342-5101357":{"name":"2MASS J15404342-5101357","system":"2MASS J15404342-5101357","spectralType":"M","absoluteMagnitude":16.63,"mass":0.09,"d":17.3738,"ra":[15,40,43.5],"dec":[-51,1,36]},"2MASS 0939-2448 A":{"name":"2MASS 0939-2448 A","system":"2MASS 0939-2448","spectralType":"T","absoluteMagnitude":16.97,"mass":0.019,"d":16.97,"ra":[9,39,35.5],"dec":[-24,48,28]},"2MASS 0939-2448 B":{"name":"2MASS 0939-2448 B","system":"2MASS 0939-2448","spectralType":"T","absoluteMagnitude":50,"mass":0.019,"d":17.85,"ra":[9,39,35.5],"dec":[-24,48,28]},"GJ 3323":{"name":"GJ 3323","system":"GJ 3323","spectralType":"M","absoluteMagnitude":13.57,"mass":0.1705,"d":17.5309,"ra":[5,1,57.4],"dec":[-6,56,46]},"Gliese 526":{"name":"Gliese 526","system":"Gliese 526","spectralType":"M","absoluteMagnitude":9.78,"mass":0.28,"d":17.7263,"ra":[13,45,43.8],"dec":[14,53,29]},"WISE 0350-5658":{"name":"WISE 0350-5658","system":"WISE 0350-5658","spectralType":"Y","absoluteMagnitude":23.7,"mass":0.02,"d":17.84,"ra":[3,50,0.3],"dec":[-56,58,30]},"Stein 2051 A":{"name":"Stein 2051 A","system":"Stein 2051","spectralType":"M","absoluteMagnitude":12.33,"mass":0.252,"d":17.9925,"ra":[4,31,11.5],"dec":[58,58,37]},"Stein 2051 B":{"name":"Stein 2051 B","system":"Stein 2051","spectralType":"D","absoluteMagnitude":13.72,"mass":0.675,"d":17.9925,"ra":[4,31,12.6],"dec":[58,58,41]},"2MASS J11145133-2618235":{"name":"2MASS J11145133-2618235","system":"2MASS J11145133-2618235","spectralType":"T","absoluteMagnitude":17.12,"mass":0.029,"d":18.2,"ra":[11,14,51.3],"dec":[-26,18,24]},"Gliese 251":{"name":"Gliese 251","system":"Gliese 251","spectralType":"M","absoluteMagnitude":11.29,"mass":0.36,"d":18.2146,"ra":[6,54,49],"dec":[33,16,5]},"LP 816-60":{"name":"LP 816-60","system":"LP 816-60","spectralType":"M","absoluteMagnitude":12.75,"mass":0.224,"d":18.3305,"ra":[20,52,33],"dec":[-16,58,29]},"LSR J1835+3259":{"name":"LSR J1835+3259","system":"LSR J1835+3259","spectralType":"M","absoluteMagnitude":19.5,"mass":0.053,"d":18.5534,"ra":[18,35,37.9],"dec":[32,59,55]},"Gliese 205":{"name":"Gliese 205","system":"Gliese 205","spectralType":"M","absoluteMagnitude":9.17,"mass":0.556,"d":18.6042,"ra":[5,31,27.4],"dec":[-3,40,38]},"2MASS J04151954-0935066":{"name":"2MASS J04151954-0935066","system":"2MASS J04151954-0935066","spectralType":"T","absoluteMagnitude":16.56,"mass":0.03,"d":18.62,"ra":[4,15,19.5],"dec":[-9,35,7]},"Gliese 229 A":{"name":"Gliese 229 A","system":"Gliese 229","spectralType":"M","absoluteMagnitude":9.34,"mass":0.579,"d":18.7906,"ra":[6,10,34.6],"dec":[-21,51,53]},"Gliese 229 Ba":{"name":"Gliese 229 Ba","system":"Gliese 229","spectralType":"T","absoluteMagnitude":15.21,"mass":0.036,"d":18.7888,"ra":[6,10,34.6],"dec":[-21,51,53]},"Gliese 229 Bb":{"name":"Gliese 229 Bb","system":"Gliese 229","spectralType":"T","absoluteMagnitude":15.21,"mass":0.033,"d":18.7924,"ra":[6,10,34.6],"dec":[-21,51,53]},"Alsafi":{"name":"Alsafi","system":"Alsafi","spectralType":"G","absoluteMagnitude":5.87,"mass":0.85,"d":18.7993,"ra":[19,32,21.6],"dec":[69,39,40]},"Ross 47":{"name":"Ross 47","system":"Ross 47","spectralType":"M","absoluteMagnitude":12.76,"mass":0.35,"d":18.8883,"ra":[5,42,9.3],"dec":[12,29,21]},"WISE 1541-2250":{"name":"WISE 1541-2250","system":"WISE 1541-2250","spectralType":"Y","absoluteMagnitude":22.1,"mass":0.011,"d":18.93,"ra":[15,41,51.6],"dec":[-22,50,25]},"Gliese 570 A":{"name":"Gliese 570 A","system":"Gliese 570","spectralType":"K","absoluteMagnitude":6.79,"mass":0.802,"d":19.195,"ra":[14,57,28],"dec":[-21,24,56]},"Gliese 570 B":{"name":"Gliese 570 B","system":"Gliese 570","spectralType":"M","absoluteMagnitude":9.45,"mass":0.55,"d":19.2024,"ra":[14,57,28],"dec":[-21,24,56]},"Gliese 570 C":{"name":"Gliese 570 A","system":"Gliese 570","spectralType":"M","absoluteMagnitude":11.11,"mass":0.35,"d":19.1913,"ra":[14,57,28],"dec":[-21,24,56]},"Gliese 570 D":{"name":"Gliese 570 D","system":"Gliese 570","spectralType":"T","absoluteMagnitude":16.47,"mass":0.05,"d":19.2061,"ra":[14,57,28],"dec":[-21,24,56]},"Gliese 693":{"name":"Gliese 693","system":"Gliese 693","spectralType":"M","absoluteMagnitude":11.91,"mass":0.26,"d":19.2078,"ra":[17,46,32.4],"dec":[-57,19,9]},"Gliese 754":{"name":"Gliese 754","system":"Gliese 754","spectralType":"M","absoluteMagnitude":13.37,"mass":0.173,"d":19.2724,"ra":[19,20,48],"dec":[-45,33,30]},"Gliese 908":{"name":"Gliese 908","system":"Gliese 908","spectralType":"M","absoluteMagnitude":10.12,"mass":0.37,"d":19.2745,"ra":[23,49,12.5],"dec":[2,24,4]},"Gliese 752 A":{"name":"Gliese 752 A","system":"Gliese 752","spectralType":"M","absoluteMagnitude":10.24,"mass":0.46,"d":19.2922,"ra":[19,16,55.3],"dec":[5,10,8]},"Gliese 752 B":{"name":"Gliese 752 B","system":"Gliese 752","spectralType":"M","absoluteMagnitude":18.59,"mass":0.075,"d":19.2922,"ra":[19,16,57.6],"dec":[5,9,2]},"Gliese 588":{"name":"Gliese 588","system":"Gliese 588","spectralType":"M","absoluteMagnitude":10.45,"mass":0.43,"d":19.2996,"ra":[15,32,12.9],"dec":[-41,16,32]},"Achird (A)":{"name":"Achird (A)","system":"Eta Cassiopeiae","spectralType":"G","absoluteMagnitude":4.6,"mass":0.972,"d":19.3289,"ra":[0,49,6.3],"dec":[57,48,55]},"Eta Cassiopeiae B":{"name":"Eta Cassiopeiae B","system":"Eta Cassiopeiae","spectralType":"K","absoluteMagnitude":8.65,"mass":0.57,"d":19.3339,"ra":[0,49,6.3],"dec":[57,48,55]},"Guniibuu (A)":{"name":"Guniibuu (A)","system":"36 Ophiuchi","spectralType":"K","absoluteMagnitude":6.2,"mass":0.85,"d":19.4185,"ra":[17,15,20.9],"dec":[-26,36,9]},"36 Ophiuchi B":{"name":"36 Ophiuchi B","system":"36 Ophiuchi","spectralType":"K","absoluteMagnitude":6.21,"mass":0.85,"d":19.4185,"ra":[17,15,21],"dec":[-26,36,10]},"36 Ophiuchi C":{"name":"36 Ophiuchi C","system":"36 Ophiuchi","spectralType":"K","absoluteMagnitude":7.45,"mass":0.71,"d":19.4185,"ra":[17,16,13.4],"dec":[-26,32,46]},"YZ Canis Minoris":{"name":"YZ Canis Minoris","system":"YZ Canis Minoris","spectralType":"M","absoluteMagnitude":12.3,"mass":0.308,"d":19.533,"ra":[7,44,40.2],"dec":[3,33,9]},"GJ 1005 A":{"name":"GJ 1005 A","system":"GJ 1005","spectralType":"M","absoluteMagnitude":12.71,"mass":0.179,"d":19.542,"ra":[0,15,28.1],"dec":[-16,8,2]},"GJ 1005 B":{"name":"GJ 1005 B","system":"GJ 1005","spectralType":"M","absoluteMagnitude":15.13,"mass":0.112,"d":19.612,"ra":[0,15,28.1],"dec":[-16,8,2]},"HR 7703 A":{"name":"HR 7703 A","system":"HR 7703","spectralType":"K","absoluteMagnitude":6.41,"mass":0.65,"d":19.596,"ra":[20,11,11.93],"dec":[-36,6,4]},"HR 7703 B":{"name":"HR 7703 B","system":"HR 7703","spectralType":"M","absoluteMagnitude":12.6,"mass":0.24,"d":19.622,"ra":[20,11,11.93],"dec":[-36,6,4]},"82 G. Eridani":{"name":"82 G. Eridani","system":"82 G. Eridani","spectralType":"G","absoluteMagnitude":5.35,"mass":0.7,"d":19.7045,"ra":[3,19,55.7],"dec":[-43,4,11]},"Gliese 268 A":{"name":"Gliese 268 A","system":"Gliese 268","spectralType":"M","absoluteMagnitude":13.14,"mass":0.226,"d":19.7338,"ra":[7,10,1.8],"dec":[38,31,46]},"Gliese 268 B":{"name":"Gliese 268 B","system":"Gliese 268","spectralType":"M","absoluteMagnitude":13.54,"mass":0.192,"d":19.749,"ra":[7,10,1.8],"dec":[38,31,46]},"Delta Pavonis":{"name":"Delta Pavonis","system":"Delta Pavonis","spectralType":"G","absoluteMagnitude":4.62,"mass":1.051,"d":19.893,"ra":[20,8,43.6],"dec":[-66,10,55]},"SIMP J013656.5+093347":{"name":"SIMP J013656.5+093347","system":"SIMP J013656.5+093347","spectralType":"T","absoluteMagnitude":14.32,"mass":0.012,"d":19.955,"ra":[1,36,56.5],"dec":[9,33,47]},"2MASS 0937+2931":{"name":"2MASS 0937+2931","system":"2MASS 0937+2931","spectralType":"T","absoluteMagnitude":15.71,"mass":0.04,"d":19.96,"ra":[9,37,34.9],"dec":[29,31,41]},"J0927-6335":{"name":"J0927-6335","system":"J0927-6335","spectralType":"D","absoluteMagnitude":-50,"mass":0.04,"d":25846.32,"ra":[9,27,42.691],"dec":[-63,35,40.328]},"Gaia20eae":{"name":"Gaia20eae","system":"Gaia20eae","spectralType":"T","absoluteMagnitude":-50,"mass":0.04,"d":28487.15,"ra":[19,25,40.63],"dec":[15,7,46.582]},"2MASS J05241392-0336543":{"name":"2MASS J05241392-0336543","system":"2MASS J05241392-0336543","spectralType":"M","absoluteMagnitude":-50,"mass":0.04,"d":29500,"ra":[5,24,13.932],"dec":[-3,36,54.329]},"LAMOST J1645+4357":{"name":"LAMOST J1645+4357","system":"LAMOST J1645+4357","spectralType":"M","absoluteMagnitude":-50,"mass":0.04,"d":37035.92,"ra":[16,45,14.955],"dec":[43,57,11.976]},"J1235-3752":{"name":"J1235-3752","system":"J1235-3752","spectralType":"D","absoluteMagnitude":-50,"mass":0.04,"d":62116,"ra":[12,35,31.807],"dec":[-37,52,35.526]},"4XMM J0520-6544 B":{"name":"4XMM J0520-6544 B","system":"4XMM J0520-6544","spectralType":"D","absoluteMagnitude":-50,"mass":0.04,"d":65088.5205,"ra":[5,20,15.497],"dec":[-65,44,27.074]},"4XMM J0520-6544 A":{"name":"4XMM J0520-6544 A","system":"4XMM J0520-6544","spectralType":"D","absoluteMagnitude":-50,"mass":0.04,"d":65088.52,"ra":[5,20,15.497],"dec":[-65,44,27.074]},"SMCSGS-FS 69 A":{"name":"SMCSGS-FS 69 A","system":"SMCSGS-FS 69 A","spectralType":"T","absoluteMagnitude":-50,"mass":0.04,"d":72618,"ra":[1,24,10.795],"dec":[-73,22,9.942]},"Test Distance Star":{"name":"Test Distance Star","system":"Test Distance Star","spectralType":"O","absoluteMagnitude":-5000000000000000,"mass":0.04,"d":12900000000000000000,"ra":[12,2,10],"dec":[-60,2,15]}}');

/***/ }),

/***/ "./src/controllers/UserController.ts":
/*!*******************************************!*\
  !*** ./src/controllers/UserController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserController = void 0;
const gl_matrix_1 = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
class UserController {
    constructor() {
        this.userPosition = gl_matrix_1.vec3.fromValues(0, 0, 10000);
        this.velocity = gl_matrix_1.vec3.fromValues(0, 0, 0);
        this.userOrientation = gl_matrix_1.vec3.fromValues(0, -90, 0);
        this.viewVec = gl_matrix_1.vec3.fromValues(0, 0, -1);
        this.setUserOrientation = gl_matrix_1.vec3.fromValues(0, 0, 0);
        this.targetUserOrientation = gl_matrix_1.vec3.fromValues(0, 0, 0);
        this.rotationVec = gl_matrix_1.vec3.fromValues(0, 0, 0);
        this.isMoving = false;
        this.speed = 10000;
        this.coupledAstroObject = null;
    }
    translate(dt) {
        let movementVec = gl_matrix_1.vec3.create();
        let curSpeed = this._getCurSpeed() * dt;
        if (this.velocity[2] > 0) {
            if (this.coupledAstroObject != null) {
                let iVec = gl_matrix_1.vec3.create();
                let tVec = this.coupledAstroObject.getDrawPosition();
                gl_matrix_1.vec3.subtract(iVec, tVec, this.userPosition);
                gl_matrix_1.vec3.normalize(iVec, iVec);
                gl_matrix_1.vec3.scale(movementVec, iVec, curSpeed);
            }
            else {
                gl_matrix_1.vec3.scale(movementVec, gl_matrix_1.vec3.fromValues(Math.cos(gl_matrix_1.glMatrix.toRadian(this.userOrientation[1])), 0, Math.sin(gl_matrix_1.glMatrix.toRadian(this.userOrientation[1]))), curSpeed);
            }
        }
        else if (this.velocity[2] < 0) {
            if (this.coupledAstroObject != null) {
                let iVec = gl_matrix_1.vec3.create();
                gl_matrix_1.vec3.subtract(iVec, this.coupledAstroObject.getDrawPosition(), this.userPosition);
                gl_matrix_1.vec3.normalize(iVec, iVec);
                gl_matrix_1.vec3.scale(movementVec, iVec, -curSpeed);
            }
            else {
                gl_matrix_1.vec3.scale(movementVec, gl_matrix_1.vec3.fromValues(Math.cos(gl_matrix_1.glMatrix.toRadian(this.userOrientation[1])), 0, Math.sin(gl_matrix_1.glMatrix.toRadian(this.userOrientation[1]))), -curSpeed);
            }
        }
        if (this.velocity[0] > 0) {
            if (this.coupledAstroObject != null) {
                let iVec = gl_matrix_1.vec3.create();
                let qVec = gl_matrix_1.vec3.create();
                let cVec = gl_matrix_1.vec3.fromValues(0, 1, 0);
                gl_matrix_1.vec3.subtract(iVec, this.coupledAstroObject.getDrawPosition(), this.userPosition);
                gl_matrix_1.vec3.cross(qVec, cVec, iVec);
                gl_matrix_1.vec3.normalize(qVec, qVec);
                gl_matrix_1.vec3.scale(movementVec, qVec, -curSpeed);
            }
            else {
                gl_matrix_1.vec3.scale(movementVec, gl_matrix_1.vec3.fromValues(Math.cos(gl_matrix_1.glMatrix.toRadian(90 + this.userOrientation[1])), 0, Math.sin(gl_matrix_1.glMatrix.toRadian(90 + this.userOrientation[1]))), curSpeed);
            }
        }
        else if (this.velocity[0] < 0) {
            if (this.coupledAstroObject != null) {
                let iVec = gl_matrix_1.vec3.create();
                let qVec = gl_matrix_1.vec3.create();
                let cVec = gl_matrix_1.vec3.fromValues(0, 1, 0);
                gl_matrix_1.vec3.subtract(iVec, this.coupledAstroObject.getDrawPosition(), this.userPosition);
                gl_matrix_1.vec3.cross(qVec, cVec, iVec);
                gl_matrix_1.vec3.normalize(qVec, qVec);
                gl_matrix_1.vec3.scale(movementVec, qVec, curSpeed);
            }
            else {
                gl_matrix_1.vec3.scale(movementVec, gl_matrix_1.vec3.fromValues(Math.cos(gl_matrix_1.glMatrix.toRadian(90 + this.userOrientation[1])), 0, Math.sin(gl_matrix_1.glMatrix.toRadian(90 + this.userOrientation[1]))), -curSpeed);
            }
        }
        if (this.velocity[1] > 0) {
            if (this.coupledAstroObject != null) {
                let iVec = gl_matrix_1.vec3.create();
                let qVec = gl_matrix_1.vec3.create();
                let cVec = gl_matrix_1.vec3.fromValues(0, 1, 0);
                gl_matrix_1.vec3.subtract(iVec, this.coupledAstroObject.getDrawPosition(), this.userPosition);
                gl_matrix_1.vec3.cross(qVec, cVec, iVec);
                gl_matrix_1.vec3.cross(cVec, qVec, iVec);
                gl_matrix_1.vec3.normalize(cVec, cVec);
                gl_matrix_1.vec3.scale(movementVec, cVec, -curSpeed);
            }
            else {
                gl_matrix_1.vec3.scale(movementVec, gl_matrix_1.vec3.fromValues(0, 1, 0), curSpeed);
            }
        }
        else if (this.velocity[1] < 0) {
            if (this.coupledAstroObject != null) {
                let iVec = gl_matrix_1.vec3.create();
                let qVec = gl_matrix_1.vec3.create();
                let cVec = gl_matrix_1.vec3.fromValues(0, 1, 0);
                gl_matrix_1.vec3.subtract(iVec, this.coupledAstroObject.getDrawPosition(), this.userPosition);
                gl_matrix_1.vec3.cross(qVec, cVec, iVec);
                gl_matrix_1.vec3.cross(cVec, qVec, iVec);
                gl_matrix_1.vec3.normalize(cVec, cVec);
                gl_matrix_1.vec3.scale(movementVec, cVec, curSpeed);
            }
            else {
                gl_matrix_1.vec3.scale(movementVec, gl_matrix_1.vec3.fromValues(0, 1, 0), -curSpeed);
            }
        }
        gl_matrix_1.vec3.add(this.userPosition, this.userPosition, movementVec);
    }
    rotate(dt) {
        //this.userOrientation[0] += 1
        // console.log(this.setUserOrientation[0], this.targetUserOrientation[0])
        if (this.coupledAstroObject == null) {
            let d = Math.sqrt((this.targetUserOrientation[0] - this.setUserOrientation[0]) ** 2 + (this.targetUserOrientation[1] - this.setUserOrientation[1]) ** 2);
            if (d >= 5) {
                let newX = this.setUserOrientation[0] + (10 / d) * (this.targetUserOrientation[0] - this.setUserOrientation[0]);
                let newY = this.setUserOrientation[1] + (10 / d) * (this.targetUserOrientation[1] - this.setUserOrientation[1]);
                //console.log(this.userOrientation[0], this.userOrientation[1])
                this.userOrientation[1] -= (newX - this.setUserOrientation[0]) / 5;
                this.userOrientation[0] += (newY - this.setUserOrientation[1]) / 5;
                /*
                        cameraX+(Math.cos(glMatrix.toRadian(user.userOrientation[0]))*Math.cos(glMatrix.toRadian(user.userOrientation[1])))
                    cameraY+Math.sin(glMatrix.toRadian(user.userOrientation[0]))
                    cameraZ+(Math.cos(glMatrix.toRadian(user.userOrientation[0]))*Math.sin(glMatrix.toRadian(user.userOrientation[1])))
            */
                //this.viewVec[0] = this.userPosition[0]+(Math.cos(glMatrix.toRadian(this.userOrientation[0]))*Math.cos(glMatrix.toRadian(this.userOrientation[1]))) 
                //this.viewVec[1] = this.userPosition[1]+Math.sin(glMatrix.toRadian(this.userOrientation[0]))
                //this.viewVec[2] = this.userPosition[2]+(Math.cos(glMatrix.toRadian(this.userOrientation[0]))*Math.sin(glMatrix.toRadian(this.userOrientation[1])))
                this.setUserOrientation[0] = newX;
                this.setUserOrientation[1] = newY;
            }
            else {
                this.targetUserOrientation[0] = this.setUserOrientation[0];
                this.targetUserOrientation[1] = this.setUserOrientation[1];
            }
            this.viewVec[0] = this.userPosition[0] + (Math.cos(gl_matrix_1.glMatrix.toRadian(this.userOrientation[0])) * Math.cos(gl_matrix_1.glMatrix.toRadian(this.userOrientation[1])));
            this.viewVec[1] = this.userPosition[1] + Math.sin(gl_matrix_1.glMatrix.toRadian(this.userOrientation[0]));
            this.viewVec[2] = this.userPosition[2] + (Math.cos(gl_matrix_1.glMatrix.toRadian(this.userOrientation[0])) * Math.sin(gl_matrix_1.glMatrix.toRadian(this.userOrientation[1])));
        }
        else {
            let i1 = this.coupledAstroObject.getDrawPosition();
            gl_matrix_1.vec3.subtract(this.viewVec, i1, this.userPosition);
            gl_matrix_1.vec3.add(this.viewVec, this.viewVec, this.userPosition);
            let tVec = gl_matrix_1.vec3.create();
            gl_matrix_1.vec3.normalize(tVec, this.viewVec);
            let theta = Math.asin(tVec[0]);
            let phi = Math.asin((tVec[1]) / Math.cos(theta));
            this.userOrientation[0] = (theta * 180) / Math.PI;
            this.userOrientation[1] = (phi * 180) / Math.PI;
        }
    }
    setCoupledAstroObject(obj) {
        this.coupledAstroObject = obj;
        //console.log(`Coupled object set to ${obj.name}`);
    }
    _getCurSpeed() {
        let curSpeed = this.speed;
        if (this.coupledAstroObject != null) {
            let dist = gl_matrix_1.vec3.distance(this.userPosition, this.coupledAstroObject.getDrawPosition());
            curSpeed = dist;
        }
        return curSpeed;
    }
}
exports.UserController = UserController;


/***/ }),

/***/ "./src/geometry.ts":
/*!*************************!*\
  !*** ./src/geometry.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TABLE_INDICES = exports.TABLE_VERTICES = exports.CUBE_INDICES = exports.CUBE_VERTICES = exports.PYRAMID_INDICES = exports.PYRAMID_VERTICES = exports.SPHERE_VERTICES = exports.Sphere = void 0;
exports.create3dPosColorInterleavedVao = create3dPosColorInterleavedVao;
const gl_utils_1 = __webpack_require__(/*! ./utils/gl-utils */ "./src/utils/gl-utils.ts");
// Iterate through each sector
// Iterate through each stack
// Get x, y, and z values. Need to tie them together to create faces
class Vertex {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
}
class Sphere {
    constructor(stacks, sectors, xScalar, yScalar) {
        let verticesSize = (6 * 3 * sectors) + (6 * 3 * sectors) + (6 * 4 * sectors * (stacks - 2));
        let indicesSize = (3 * sectors) + (3 * sectors) + (6 * sectors * (stacks - 2)); // need to add extra for bottom indices/vertices
        this.vertices = new Float32Array(verticesSize);
        this.indices = new Uint16Array(indicesSize);
        let verts = [];
        this.calculateVertices(verts, stacks, sectors, xScalar, yScalar);
        // link top
        let m = 0;
        let n = 0;
        let l = 0;
        let q = 0;
        while (l < verts[0].length) {
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 1.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 1.0;
            this.indices[q] = q;
            q++;
            this.vertices[m++] = verts[0][n].x;
            this.vertices[m++] = verts[0][n].y;
            this.vertices[m++] = verts[0][n].z;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 1.0;
            this.indices[q] = q;
            q++;
            if (n + 1 >= verts[0].length) {
                n = 0;
            }
            else {
                n++;
            }
            this.vertices[m++] = verts[0][n].x;
            this.vertices[m++] = verts[0][n].y;
            this.vertices[m++] = verts[0][n].z;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 1.0;
            this.indices[q] = q;
            q++;
            l++;
        }
        let tracker = q;
        for (let k = 0; k < verts.length - 1; k++) {
            for (let n = 0; n < verts[k].length; n++) {
                let tempN = n;
                if (tempN + 1 >= verts[k].length) {
                    tempN = -1;
                }
                this.vertices[m++] = verts[k][n].x; // left corner
                this.vertices[m++] = verts[k][n].y;
                this.vertices[m++] = verts[k][n].z;
                this.vertices[m++] = 1.0;
                this.vertices[m++] = 0.0;
                this.vertices[m++] = 0.0;
                this.indices[q] = tracker;
                tracker++;
                q++;
                this.vertices[m++] = verts[k][tempN + 1].x; // right corner
                this.vertices[m++] = verts[k][tempN + 1].y;
                this.vertices[m++] = verts[k][tempN + 1].z;
                this.vertices[m++] = 1.0;
                this.vertices[m++] = 0.0;
                this.vertices[m++] = 0.0;
                let rightCornerIndex = tracker;
                this.indices[q] = rightCornerIndex;
                tracker++;
                q++;
                this.vertices[m++] = verts[k + 1][n].x; // bottom left corner
                this.vertices[m++] = verts[k + 1][n].y;
                this.vertices[m++] = verts[k + 1][n].z;
                this.vertices[m++] = 0.0;
                this.vertices[m++] = 1.0;
                this.vertices[m++] = 0.0;
                let bottomLeftCornerIndex = tracker;
                this.indices[q] = bottomLeftCornerIndex;
                tracker++;
                q++;
                this.indices[q] = rightCornerIndex;
                q++;
                this.indices[q] = bottomLeftCornerIndex;
                q++;
                this.vertices[m++] = verts[k + 1][tempN + 1].x; // bottom right corner
                this.vertices[m++] = verts[k + 1][tempN + 1].y;
                this.vertices[m++] = verts[k + 1][tempN + 1].z;
                this.vertices[m++] = 0.0;
                this.vertices[m++] = 0.0;
                this.vertices[m++] = 1.0;
                this.indices[q] = tracker;
                tracker++;
                q++;
            }
        }
        l = 0;
        console.log(verts[verts.length - 1]);
        while (l < verts[verts.length - 1].length) {
            this.vertices[m++] = 0.0;
            this.vertices[m++] = -1.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 1.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.indices[q] = tracker;
            tracker++;
            q++;
            this.vertices[m++] = verts[verts.length - 1][n].x;
            this.vertices[m++] = verts[verts.length - 1][n].y;
            this.vertices[m++] = verts[verts.length - 1][n].z;
            this.vertices[m++] = 1.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.indices[q] = tracker;
            tracker++;
            q++;
            if (n + 1 >= verts[0].length) {
                n = 0;
            }
            else {
                n++;
            }
            this.vertices[m++] = verts[verts.length - 1][n].x;
            this.vertices[m++] = verts[verts.length - 1][n].y;
            this.vertices[m++] = verts[verts.length - 1][n].z;
            this.vertices[m++] = 1.0;
            this.vertices[m++] = 0.0;
            this.vertices[m++] = 0.0;
            this.indices[q] = tracker;
            tracker++;
            q++;
            l++;
            console.log(m);
        }
        // link middle
        // link bottom\
        console.log(this.vertices);
        console.log(this.indices);
    }
    calculateVertices(verts, stacks, sectors, xScalar, yScalar) {
        let stackStep = 180 / stacks;
        let sectorStep = 360 / sectors;
        let i = 0;
        let theta = stackStep;
        let thetaRadians;
        let phi;
        let phiRadians;
        let x, y, z;
        while (theta < 180) {
            verts[i] = [];
            phi = 0;
            thetaRadians = (90 - theta) * Math.PI / 180;
            y = yScalar * Math.sin(thetaRadians);
            let tempX = xScalar * Math.cos(thetaRadians);
            while (phi < 360) {
                phiRadians = phi * Math.PI / 180;
                x = tempX * Math.cos(phiRadians);
                z = tempX * Math.sin(phiRadians);
                verts[i].push(new Vertex(x, y, z));
                phi += sectorStep;
            }
            theta += stackStep;
            i++;
        }
    }
}
exports.Sphere = Sphere;
exports.SPHERE_VERTICES = new Float32Array([
    0, 1, 0 // Top point
]);
exports.PYRAMID_VERTICES = new Float32Array([
    1.0, -1.0, 1.0, 1, 0, 0,
    -1.0, -1.0, 1.0, 1, 0, 0,
    0.0, 1.0, 0.0, 1, 0, 0, // front
    -1.0, -1.0, 1.0, 0, 1, 0,
    -1.0, -1.0, -1.0, 0, 1, 0,
    0.0, 1.0, 0.0, 0, 1, 0, // left
    1.0, -1.0, 1.0, 0, 0, 1,
    1.0, -1.0, -1.0, 0, 0, 1,
    0.0, 1.0, 0.0, 0, 0, 1, // right
    1.0, -1.0, -1.0, 1, 0, 0,
    -1.0, -1.0, -1.0, 1, 0, 0,
    0.0, 1.0, 0.0, 1, 0, 0, // back
    -1.0, -1.0, -1.0, 0, 1, 0,
    1.0, -1.0, -1.0, 0, 1, 0,
    1.0, -1.0, 1.0, 0, 1, 0,
    -1.0, -1.0, 1.0, 0, 1, 0, // bottom
]);
exports.PYRAMID_INDICES = new Uint16Array([
    0, 1, 2,
    3, 4, 5,
    6, 7, 8,
    9, 10, 11,
    12, 13, 14,
    12, 14, 15, // bottom
]);
exports.CUBE_VERTICES = new Float32Array([
    -1.0, -1.0, 1.0, 1, 0, 0,
    1.0, -1.0, 1.0, 1, 0, 0,
    1.0, 1.0, 1.0, 1, 0, 0,
    -1.0, 1.0, 1.0, 1, 0, 0,
    // Back face
    -1.0, -1.0, -1.0, 1, 0, 0,
    -1.0, 1.0, -1.0, 1, 0, 0,
    1.0, 1.0, -1.0, 1, 0, 0,
    1.0, -1.0, -1.0, 1, 0, 0,
    // Top face
    -1.0, 1.0, -1.0, 0, 1, 0,
    -1.0, 1.0, 1.0, 0, 1, 0,
    1.0, 1.0, 1.0, 0, 1, 0,
    1.0, 1.0, -1.0, 0, 1, 0,
    // Bottom face
    -1.0, -1.0, -1.0, 0, 1, 0,
    1.0, -1.0, -1.0, 0, 1, 0,
    1.0, -1.0, 1.0, 0, 1, 0,
    -1.0, -1.0, 1.0, 0, 1, 0,
    // Right face
    1.0, -1.0, -1.0, 0, 0, 1,
    1.0, 1.0, -1.0, 0, 0, 1,
    1.0, 1.0, 1.0, 0, 0, 1,
    1.0, -1.0, 1.0, 0, 0, 1,
    // Left face
    -1.0, -1.0, -1.0, 0, 0, 1,
    -1.0, -1.0, 1.0, 0, 0, 1,
    -1.0, 1.0, 1.0, 0, 0, 1,
    -1.0, 1.0, -1.0, 0, 0, 1,
]);
exports.CUBE_INDICES = new Uint16Array([
    0, 1, 2,
    0, 2, 3, // front
    4, 5, 6,
    4, 6, 7, // back
    8, 9, 10,
    8, 10, 11, // top
    12, 13, 14,
    12, 14, 15, // bottom
    16, 17, 18,
    16, 18, 19, // right
    20, 21, 22,
    20, 22, 23, // left
]);
exports.TABLE_VERTICES = new Float32Array([
    // Top face
    -10.0, 0.0, -10.0, 0.2, 0.2, 0.2,
    -10.0, 0.0, 10.0, 0.2, 0.2, 0.2,
    10.0, 0.0, 10.0, 0.2, 0.2, 0.2,
    10.0, 0.0, -10.0, 0.2, 0.2, 0.2,
]);
exports.TABLE_INDICES = new Uint16Array([
    0, 1, 2,
    0, 2, 3, // top
]);
function create3dPosColorInterleavedVao(gl, vertexBuffer, indexBuffer, posAttrib, colorAttrib) {
    const vao = gl.createVertexArray();
    if (!vao) {
        (0, gl_utils_1.showError)('Failed to create VAO');
        return null;
    }
    gl.bindVertexArray(vao);
    gl.enableVertexAttribArray(posAttrib);
    gl.enableVertexAttribArray(colorAttrib);
    // Interleaved format: (x, y, z, r, g, b) (all f32)
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.vertexAttribPointer(posAttrib, 3, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 0);
    gl.vertexAttribPointer(colorAttrib, 3, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 3 * Float32Array.BYTES_PER_ELEMENT);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bindVertexArray(null);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    return vao;
}


/***/ }),

/***/ "./src/models/AstroBody.ts":
/*!*********************************!*\
  !*** ./src/models/AstroBody.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StellarBody = exports.PlanetaryBody = exports.AstroBody = void 0;
const gl_matrix_1 = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
const bigdecimal_js_1 = __webpack_require__(/*! bigdecimal.js */ "./node_modules/bigdecimal.js/lib/bigdecimal.js");
const bVec3 = __importStar(__webpack_require__(/*! ../utils/big-vec3 */ "./src/utils/big-vec3.ts"));
/**
 * Represents the generic type for astronomical bodies such as stars, planets, and moons.
 * Holds generic information for astronomical bodies and handles kinematic updates.
 */
class AstroBody {
    constructor(name, designations, classification, mass, temperature, position, velocity, acceleration, polarRadius, equatorialRadius, lodManager, subsystem) {
        this.subsystem = subsystem;
        this.name = name;
        this.designations = designations;
        this.classification = classification;
        this.mass = mass;
        this._temperature = temperature;
        this._position = position;
        this._velocity = velocity;
        this._acceleration = acceleration;
        this._drawPosition = AstroBody._setDrawPosition(this._position, -9);
        this._polarRadius = polarRadius;
        this._equatorialRadius = equatorialRadius;
        this._lodManager = lodManager;
    }
    updatePhysics(dt) {
        this._updatePosition(dt);
        this._updateVelocity(dt);
        this._drawPosition = AstroBody._setDrawPosition(this._position, -9);
    }
    /**
     *  Updates an AstroBody's position using it's current velocity and acceleration.
     *  @param dt - The change of time since the last update.
     */
    _updatePosition(dt) {
        const DT = (0, bigdecimal_js_1.Big)(dt.toString());
        let v0 = bVec3.create();
        bVec3.scale(v0, this._velocity, DT);
        let r0 = bVec3.create();
        bVec3.add(r0, this._position, v0);
        let a0 = bVec3.create();
        let aScale = (0, bigdecimal_js_1.Big)("0.5").multiply(DT);
        bVec3.scale(a0, this._acceleration, aScale);
        bVec3.add(this._position, r0, a0);
    }
    /**
     *  Updates an AstroBody's velocity using it's current acceleration.
     *  @param dt - The change of time since the last update.
     */
    _updateVelocity(dt) {
        const DT = (0, bigdecimal_js_1.Big)(dt.toString());
        // Intermediate vec3's to copy vec3 operations into
        let i1 = bVec3.create();
        // Copy initial velocity values
        let v0 = bVec3.create();
        bVec3.copy(v0, this._velocity);
        // Set new velocity
        bVec3.scale(i1, this._acceleration, DT);
        bVec3.add(this._velocity, v0, i1);
    }
    static _setDrawPosition(position, scalar) {
        let bVecA = bVec3.create();
        bVec3.scale(bVecA, position, (0, bigdecimal_js_1.Big)("10").pow(scalar, new bigdecimal_js_1.MC(20)));
        return gl_matrix_1.vec3.fromValues(Number(bVecA[0].toEngineeringString()), Number(bVecA[1].toEngineeringString()), Number(bVecA[2].toEngineeringString()));
    }
    getDrawPosition() {
        return this._drawPosition;
    }
    getPosition() {
        return this._position;
    }
    getVelocity() {
        return this._velocity;
    }
    getAcceleration() {
        return this._acceleration;
    }
    getLODManager() {
        return this._lodManager;
    }
}
exports.AstroBody = AstroBody;
class PlanetaryBody extends AstroBody {
    constructor(name, designations, classification, mass, temperature, position, velocity, acceleration, polarRadius, equatorialRadius, lodManager, subsystem) {
        super(name, designations, classification, mass, temperature, position, velocity, acceleration, polarRadius, equatorialRadius, lodManager, subsystem);
    }
}
exports.PlanetaryBody = PlanetaryBody;
class StellarBody extends AstroBody {
    constructor(name, designations, classification, mass, temperature, velocity, acceleration, radius, lodManager, rightAscension, declination, parallax, apparentMagnitude, absoluteMagnitude, luminosity, subsystem) {
        super(name, designations, classification, mass, temperature, StellarBody._getPositionFromStellarCoords(rightAscension, declination, parallax), velocity, acceleration, radius, radius, lodManager, subsystem);
        this._rightAscension = rightAscension;
        this._declination = declination;
        this._parallax = parallax;
        this._apparentMagnitude = apparentMagnitude;
        this._absoluteMagnitude = absoluteMagnitude;
        this._luminosity = luminosity;
    }
    static _getPositionFromStellarCoords(rightAscension, declination, parallax) {
        const alpha = (rightAscension[0] + (rightAscension[1] / 60) + (rightAscension[2] / 3600)) * 15 * (Math.PI / 180);
        const delta = (declination[0] + (declination[1] / 60) + (declination[2] / 3600)) * (Math.PI / 180);
        const parsecsDistance = 1000 / (parallax[0] + Math.random() * (parallax[1] - (-1 * parallax[1])) + (-1 * parallax[1]));
        const metersDistance = (0, bigdecimal_js_1.Big)(parsecsDistance.toString()).multiply((0, bigdecimal_js_1.Big)("3.086").multiply((0, bigdecimal_js_1.Big)("10").pow(16)));
        const x0 = metersDistance.multiply((0, bigdecimal_js_1.Big)(Math.cos(delta).toString()).multiply((0, bigdecimal_js_1.Big)(Math.cos(alpha).toString()))).toString();
        const y0 = metersDistance.multiply((0, bigdecimal_js_1.Big)(Math.cos(delta).toString()).multiply((0, bigdecimal_js_1.Big)(Math.sin(alpha).toString()))).toString();
        const z0 = metersDistance.multiply((0, bigdecimal_js_1.Big)(Math.sin(delta).toString())).toString();
        return bVec3.fromValues(x0, z0, y0);
    }
}
exports.StellarBody = StellarBody;


/***/ }),

/***/ "./src/models/AstroSystem.ts":
/*!***********************************!*\
  !*** ./src/models/AstroSystem.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AstroSystem = void 0;
const bigdecimal_js_1 = __webpack_require__(/*! bigdecimal.js */ "./node_modules/bigdecimal.js/lib/bigdecimal.js");
const bVec3 = __importStar(__webpack_require__(/*! ../utils/big-vec3 */ "./src/utils/big-vec3.ts"));
// Gravitational constant in m^3*kg^-1*s^-2
const G = (6.6743 * (10 ** -11));
// This handles physics for an entire Astronomical system
// Examples would be The Solar System and Alpha Centauri.
class AstroSystem {
    constructor(_astroObjectList) {
        this._astroObjectList = _astroObjectList;
    }
    // Calculates new acceleration values due to gravity and computes new positions of each astro object in the system
    updateAstroSystem(dt) {
        this._computeGravityVectors();
        const tft = performance.now();
        for (const astroObject of this._astroObjectList) {
            astroObject.updatePhysics(dt);
        }
    }
    _computeGravityVectors() {
        // Zero out every AstroObject's acceleration
        for (const astroObject of this._astroObjectList) {
            bVec3.zero(astroObject.getAcceleration());
        }
        // Recalculate the acceleration due to gravity for every AstroObject in the system
        // The invariant is that the gravity is completely calculated for every AstroObject to the left of i
        for (let i = 0; i < (this._astroObjectList.length - 1); i++) {
            for (let j = (i + 1); j < this._astroObjectList.length; j++) {
                let gravityAccelI = bVec3.create();
                let gravityAccelJ = bVec3.create();
                // Find directional vectors for the force of gravity between the 2 AstroObjects
                bVec3.subtract(gravityAccelI, this._astroObjectList[j].getPosition(), this._astroObjectList[i].getPosition());
                bVec3.negate(gravityAccelJ, gravityAccelI);
                // Normalize the directional vectors
                bVec3.normalize(gravityAccelI, gravityAccelI);
                bVec3.normalize(gravityAccelJ, gravityAccelJ);
                const sqDistance = bVec3.distance(this._astroObjectList[i].getPosition(), this._astroObjectList[j].getPosition());
                // Calculate the magnitude of the force of gravity for both objects				
                const gMagI = ((0, bigdecimal_js_1.Big)(G.toString()).multiply(this._astroObjectList[j].mass)).divide(sqDistance.pow(2), 20, bigdecimal_js_1.RoundingMode.CEILING);
                const gMagJ = ((0, bigdecimal_js_1.Big)(G.toString()).multiply(this._astroObjectList[i].mass)).divide(sqDistance.pow(2), 20, bigdecimal_js_1.RoundingMode.CEILING);
                bVec3.scale(gravityAccelI, gravityAccelI, gMagI);
                bVec3.scale(gravityAccelJ, gravityAccelJ, gMagJ);
                // Compound acceleration due to gravity for both objects to get their overall acceleration
                bVec3.add(this._astroObjectList[i].getAcceleration(), this._astroObjectList[i].getAcceleration(), gravityAccelI);
                bVec3.add(this._astroObjectList[j].getAcceleration(), this._astroObjectList[j].getAcceleration(), gravityAccelJ);
            }
        }
    }
    getDrawList(userPosition) {
        /*let evalList: AstroObject[] = []
        for(let k = 0; k < this._astroObjectList.length; k++) {
            if(this._astroObjectList[k].name == "Sun") {
                evalList.push(this._astroObjectList[k])
            }
        }
        let retList: AstroObject[] = []
        while (evalList.length != 0) {
            retList.push(evalList.shift()!);
            let v = bVec3.create()
            bVec3.scale(v, retList[retList.length-1].position, Big("10").pow(-9, new MC(20)))
            if (Big((retList[retList.length-1].systemSpace).toString()).greaterThan(bVec3.distance(bVec3.fromValues(userPosition[0].toString(), userPosition[1].toString(), userPosition[2].toString()), v))) {
                for(let i = 0; i < this._astroObjectList.length; i++) {
                    for(let j = 0; j < retList[retList.length-1].subsystem.length; j++) {
                        if (retList[retList.length-1].subsystem[j] == this._astroObjectList[i].name) {
                            evalList.push(this._astroObjectList[i])
                        }
                    }
                }
            }
        }
        console.log(retList)*/
        return this._astroObjectList;
    }
}
exports.AstroSystem = AstroSystem;


/***/ }),

/***/ "./src/models/LODManager.ts":
/*!**********************************!*\
  !*** ./src/models/LODManager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LODManager = void 0;
const gl_matrix_1 = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
class LODManager {
    constructor(_shape, divContainerElement, name, userController, classification, absMag, _type) {
        this._shape = _shape;
        this.name = name;
        this.userController = userController;
        this.absMag = absMag;
        this._type = _type;
        this._isPlanet = false;
        this._div = document.createElement("div");
        this._drawable = document.createElement("div");
        if (name == "Sun") {
            this._type = "G";
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "O") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "B") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "A") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "F" || classification == "D") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "G") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "K") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "M") {
            this._div.className = "star-hoverable";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else if (classification == "Y" || classification == "T" || classification == "L") {
            this._div.className = "star-hoverable";
            this._type = "M";
            this._drawable.className = this._type + "-type-dim";
            this._div.appendChild(this._drawable);
        }
        else {
            this._isPlanet = true;
            this._div.className = classification;
        }
        let txt = document.createElement("div");
        txt.className = "text-node";
        let dot = document.createElement("div");
        let textNode = document.createTextNode(name);
        txt.appendChild(textNode);
        this._div.appendChild(txt);
        divContainerElement.appendChild(this._div);
        this.astroObject = null;
    }
    setAstroObject(ast) {
        this.astroObject = ast;
        let that = this;
        this._div.onclick = function () { if (that.astroObject != null) {
            that.userController.setCoupledAstroObject(that.astroObject);
        } };
    }
    testClick() {
        if (this.astroObject != null) {
            this.userController.setCoupledAstroObject(this.astroObject);
        }
        else {
            console.log("No coupled object", this.astroObject);
        }
    }
    draw(dt, isVisible, gl, matWorldUniform, drawPos, mvp, drawOrder, cameraDist) {
        if (!isVisible) {
            this._div.style.visibility = 'hidden';
        }
        else {
            let clipspace = gl_matrix_1.vec4.create();
            gl_matrix_1.vec4.transformMat4(clipspace, [drawPos[0], drawPos[1], drawPos[2], 1], mvp);
            clipspace[0] /= clipspace[2];
            clipspace[1] /= clipspace[2];
            let pixelX = (clipspace[0] * 0.5 + 0.5) * gl.canvas.width;
            let pixelY = (clipspace[1] * -0.5 + 0.5) * gl.canvas.height;
            if (clipspace[2] >= 0) {
                let apparentMagnitude = this.absMag + (5 * Math.log10((cameraDist * (10 ** -8)) / 10)) - 5;
                if (!this._isPlanet) {
                    if (apparentMagnitude <= -20) {
                        this._shape.draw(gl, matWorldUniform, drawPos, dt);
                        this._drawable.className = this._type + "-type-near";
                    }
                    else if (apparentMagnitude <= -3.5) {
                        this._drawable.className = this._type + "-type-very-bright";
                    }
                    else if (apparentMagnitude <= 0) {
                        this._drawable.className = this._type + "-type-bright";
                    }
                    else if (apparentMagnitude <= 3.5) {
                        this._drawable.className = this._type + "-type-dim";
                    }
                    else {
                        this._drawable.className = this._type + "-type-very-dim";
                    }
                }
                else {
                    this._shape.draw(gl, matWorldUniform, drawPos, dt);
                }
                this._div.style.visibility = 'visible';
                this._div.style.zIndex = `${drawOrder}`;
                this._div.style.left = `${Math.floor(pixelX)}px`;
                this._div.style.top = `${Math.floor(pixelY)}px`;
            }
            else {
                this._div.style.visibility = 'hidden';
            }
        }
    }
}
exports.LODManager = LODManager;


/***/ }),

/***/ "./src/models/WebGLShape.ts":
/*!**********************************!*\
  !*** ./src/models/WebGLShape.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLShape = void 0;
const gl_matrix_1 = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
const gl_utils_1 = __webpack_require__(/*! ../utils/gl-utils */ "./src/utils/gl-utils.ts");
const geometry_1 = __webpack_require__(/*! ../geometry */ "./src/geometry.ts");
class WebGLShape {
    constructor(_pos, _scale, _rotationAxis, _yRotationAngle, _zRotationAngle, _rotationSpeed, gl, posAttrib, colorAttrib) {
        this._pos = _pos;
        this._scale = _scale;
        this._rotationAxis = _rotationAxis;
        this._yRotationAngle = _yRotationAngle;
        this._zRotationAngle = _zRotationAngle;
        this._rotationSpeed = _rotationSpeed;
        this._matWorld = gl_matrix_1.mat4.create();
        this._scaleVec = gl_matrix_1.vec3.create();
        this._rotation = gl_matrix_1.quat.create();
        let ellipsoid = new geometry_1.Sphere(36, 36, 1, 1);
        let ellipsoidVertices = (0, gl_utils_1.createStaticVertexBuffer)(gl, ellipsoid.vertices);
        let ellipsoidIndices = (0, gl_utils_1.createStaticIndexBuffer)(gl, ellipsoid.indices);
        if (!ellipsoidVertices || !ellipsoidIndices) {
            throw new Error(`Failed to create geo: ellipsoid (v=${!!ellipsoidVertices}, i=${ellipsoidIndices})`);
        }
        let ellipsoidVao = (0, geometry_1.create3dPosColorInterleavedVao)(gl, ellipsoidVertices, ellipsoidIndices, posAttrib, colorAttrib);
        if (!ellipsoidVao) {
            throw new Error(`Failed to create geo: ellipsoid=${!!ellipsoidVao}`);
        }
        this.vao = ellipsoidVao;
        this.numIndices = ellipsoid.indices.length;
    }
    draw(gl, matWorldUniform, drawPos, dt) {
        this._rotate(dt);
        let iQuat = gl_matrix_1.quat.create();
        let yQuat = gl_matrix_1.quat.create();
        let zQuat = gl_matrix_1.quat.create();
        gl_matrix_1.quat.setAxisAngle(yQuat, gl_matrix_1.vec3.fromValues(0, 1, 0), this._yRotationAngle);
        gl_matrix_1.quat.setAxisAngle(zQuat, gl_matrix_1.vec3.fromValues(0, 0, 1), this._zRotationAngle);
        gl_matrix_1.quat.multiply(this._rotation, zQuat, yQuat);
        gl_matrix_1.vec3.set(this._scaleVec, this._scale, this._scale, this._scale);
        gl_matrix_1.mat4.fromRotationTranslationScale(this._matWorld, this._rotation, drawPos, this._scaleVec);
        gl.uniformMatrix4fv(matWorldUniform, false, this._matWorld);
        gl.bindVertexArray(this.vao);
        gl.drawElements(gl.TRIANGLES, this.numIndices, gl.UNSIGNED_SHORT, 0);
        gl.bindVertexArray(null);
    }
    _rotate(dt) {
        this._yRotationAngle += (this._rotationSpeed * dt);
        if (this._yRotationAngle >= (2 * Math.PI)) {
            this._yRotationAngle -= (2 * Math.PI);
        }
    }
}
exports.WebGLShape = WebGLShape;


/***/ }),

/***/ "./src/services/ApiClient.ts":
/*!***********************************!*\
  !*** ./src/services/ApiClient.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApiClient = void 0;
const config_1 = __webpack_require__(/*! ../config/config */ "./src/config/config.ts");
const api_utils_1 = __webpack_require__(/*! ../utils/api-utils */ "./src/utils/api-utils.ts");
class ApiClient {
    constructor() {
        this._baseApiUrl = `${config_1.config.apiUrl}`;
    }
    // Calls Api to get the positions and velocities of AstroObjects at a certain time. Returns a dictionary where the key is the AstroObject Id and the value has the position and velocity data
    async getEphemeris(dateTime, astroIdList) {
        let ephemerisDict = {};
        const dateTimeStr = this._formatDateTime(dateTime);
        // Calls the Api for each AstroObject Id
        for (const id of astroIdList) {
            let response = await fetch(`${this._baseApiUrl}/planet-state?id=${id}&timestamp=${dateTimeStr}`, { method: 'GET' });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            let data = await response.json();
            ephemerisDict[id] = data;
        }
        return ephemerisDict;
    }
    // Formats Date object into string of format YYYY-MM-DD-HH:mm
    _formatDateTime(dateTime) {
        const year = (0, api_utils_1.addLeadingZeroes)(String(dateTime.getFullYear()), 4);
        const month = (0, api_utils_1.addLeadingZeroes)(String(dateTime.getMonth()), 2);
        const day = (0, api_utils_1.addLeadingZeroes)(String(dateTime.getDate()), 2);
        const hour = (0, api_utils_1.addLeadingZeroes)(String(dateTime.getHours()), 2);
        const minute = (0, api_utils_1.addLeadingZeroes)(String(dateTime.getMinutes()), 2);
        return `${year}-${month}-${day}-${hour}:${minute}`;
    }
}
exports.ApiClient = ApiClient;


/***/ }),

/***/ "./src/utils/api-utils.ts":
/*!********************************!*\
  !*** ./src/utils/api-utils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addLeadingZeroes = addLeadingZeroes;
// Pads strings with leading zeroes to obtain a certain length. Primarily used for formatting the Date strings in Api calls.
function addLeadingZeroes(str, targetLen) {
    while (str.length < targetLen) {
        str = '0' + str;
    }
    return str;
}


/***/ }),

/***/ "./src/utils/big-vec3.ts":
/*!*******************************!*\
  !*** ./src/utils/big-vec3.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.create = create;
exports.clone = clone;
exports.length = length;
exports.fromValues = fromValues;
exports.copy = copy;
exports.set = set;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.ceil = ceil;
exports.floor = floor;
exports.min = min;
exports.max = max;
exports.round = round;
exports.scale = scale;
exports.scaleAndAdd = scaleAndAdd;
exports.distance = distance;
exports.squaredDistance = squaredDistance;
exports.squaredLength = squaredLength;
exports.negate = negate;
exports.inverse = inverse;
exports.normalize = normalize;
exports.zero = zero;
exports.getScaledVec3 = getScaledVec3;
const bigdecimal_js_1 = __webpack_require__(/*! bigdecimal.js */ "./node_modules/bigdecimal.js/lib/bigdecimal.js");
const gl_matrix_1 = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
function create() {
    let out = [(0, bigdecimal_js_1.Big)("0"), (0, bigdecimal_js_1.Big)("0"), (0, bigdecimal_js_1.Big)("0")];
    return out;
}
function clone(a) {
    let out = [a[0], a[1], a[2]];
    return out;
}
function length(a) {
    const mc = new bigdecimal_js_1.MC(20, bigdecimal_js_1.RoundingMode.CEILING);
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const sumSquares = (((x.multiply(x)).add(y.multiply(y))).add(z.multiply(z)));
    return sumSquares.sqrt(mc);
}
function fromValues(x, y, z) {
    let out = [(0, bigdecimal_js_1.Big)(x), (0, bigdecimal_js_1.Big)(y), (0, bigdecimal_js_1.Big)(z)];
    return out;
}
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
}
function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
}
function add(out, a, b) {
    const mc = new bigdecimal_js_1.MC(20);
    out[0] = a[0].add(b[0], mc);
    out[1] = a[1].add(b[1], mc);
    out[2] = a[2].add(b[2], mc);
    return out;
}
function subtract(out, a, b) {
    out[0] = a[0].subtract(b[0]);
    out[1] = a[1].subtract(b[1]);
    out[2] = a[2].subtract(b[2]);
    return out;
}
function multiply(out, a, b) {
    out[0] = a[0].multiply(b[0]);
    out[1] = a[1].multiply(b[1]);
    out[2] = a[2].multiply(b[2]);
    return out;
}
function divide(out, a, b) {
    out[0] = a[0].divide(b[0], 20, bigdecimal_js_1.RoundingMode.CEILING);
    out[1] = a[1].divide(b[1], 20, bigdecimal_js_1.RoundingMode.CEILING);
    out[2] = a[2].divide(b[2], 20, bigdecimal_js_1.RoundingMode.CEILING);
    return out;
}
function getCeilMC(num) {
    if (num.precision() == num.scale()) {
        return new bigdecimal_js_1.MC(1, bigdecimal_js_1.RoundingMode.CEILING);
    }
    else {
        return new bigdecimal_js_1.MC(num.precision() - num.scale(), bigdecimal_js_1.RoundingMode.CEILING);
    }
}
function ceil(out, a) {
    out[0] = a[0].round(getCeilMC(a[0]));
    out[1] = a[1].round(getCeilMC(a[1]));
    out[2] = a[2].round(getCeilMC(a[2]));
    return out;
}
function getFloorMC(num) {
    if (num.precision() == num.scale()) {
        return new bigdecimal_js_1.MC(1, bigdecimal_js_1.RoundingMode.FLOOR);
    }
    else {
        return new bigdecimal_js_1.MC(num.precision() - num.scale(), bigdecimal_js_1.RoundingMode.FLOOR);
    }
}
function floor(out, a) {
    out[0] = a[0].round(getFloorMC(a[0]));
    out[1] = a[1].round(getFloorMC(a[1]));
    out[2] = a[2].round(getFloorMC(a[2]));
    return out;
}
function min(out, a, b) {
    out[0] = a[0].min(b[0]);
    out[1] = a[1].min(b[1]);
    out[2] = a[2].min(b[2]);
    return out;
}
function max(out, a, b) {
    out[0] = a[0].max(b[0]);
    out[1] = a[1].max(b[1]);
    out[2] = a[2].max(b[2]);
    return out;
}
function getRoundMC(num) {
    if (num.greaterThan("0")) {
        if (num.precision() == num.scale()) {
            return new bigdecimal_js_1.MC(1, bigdecimal_js_1.RoundingMode.HALF_UP);
        }
        else {
            return new bigdecimal_js_1.MC(num.precision() - num.scale(), bigdecimal_js_1.RoundingMode.HALF_UP);
        }
    }
    else {
        if (num.precision() == num.scale()) {
            return new bigdecimal_js_1.MC(1, bigdecimal_js_1.RoundingMode.HALF_DOWN);
        }
        else {
            return new bigdecimal_js_1.MC(num.precision() - num.scale(), bigdecimal_js_1.RoundingMode.HALF_DOWN);
        }
    }
}
function round(out, a) {
    out[0] = a[0].round(getRoundMC(a[0]));
    out[1] = a[1].round(getRoundMC(a[1]));
    out[2] = a[2].round(getRoundMC(a[2]));
    return out;
}
function scale(out, a, b) {
    out[0] = a[0].multiply(b);
    out[1] = a[1].multiply(b);
    out[2] = a[2].multiply(b);
    return out;
}
function scaleAndAdd(out, a, b, scale) {
    out[0] = (a[0].add(b[0])).multiply(scale);
    out[1] = (a[1].add(b[1])).multiply(scale);
    out[2] = (a[2].add(b[2])).multiply(scale);
    return out;
}
function distance(a, b) {
    const mc = new bigdecimal_js_1.MC(20, bigdecimal_js_1.RoundingMode.CEILING);
    const x = b[0].subtract(a[0]);
    const y = b[1].subtract(a[1]);
    const z = b[2].subtract(a[2]);
    const sumSquares = (((x.multiply(x)).add(y.multiply(y))).add(z.multiply(z)));
    return sumSquares.sqrt(mc);
}
function squaredDistance(a, b) {
    const x = b[0].subtract(a[0]);
    const y = b[1].subtract(a[1]);
    const z = b[2].subtract(a[2]);
    const sumSquares = (((x.multiply(x)).add(y.multiply(y))).add(z.multiply(z)));
    return sumSquares;
}
function squaredLength(a) {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const sumSquares = (((x.multiply(x)).add(y.multiply(y))).add(z.multiply(z)));
    return sumSquares;
}
function negate(out, a) {
    out[0] = a[0].negate();
    out[1] = a[1].negate();
    out[2] = a[2].negate();
    return out;
}
function inverse(out, a) {
    out[0] = (0, bigdecimal_js_1.Big)("1").divide(a[0]);
    out[1] = (0, bigdecimal_js_1.Big)("1").divide(a[1]);
    out[2] = (0, bigdecimal_js_1.Big)("1").divide(a[2]);
    return out;
}
function normalize(out, a) {
    let len = squaredLength(a);
    if (len.greaterThan((0, bigdecimal_js_1.Big)("0"))) {
        len = (0, bigdecimal_js_1.Big)("1").divide(length(a), 20, bigdecimal_js_1.RoundingMode.CEILING);
    }
    out[0] = a[0].multiply(len);
    out[1] = a[1].multiply(len);
    out[2] = a[2].multiply(len);
    return out;
}
function zero(out) {
    out[0] = (0, bigdecimal_js_1.Big)(0);
    out[1] = (0, bigdecimal_js_1.Big)(0);
    out[2] = (0, bigdecimal_js_1.Big)(0);
    return out;
}
function getScaledVec3(bVec, num, power) {
    let sV = create();
    scale(sV, bVec, (0, bigdecimal_js_1.Big)(num.toString()).pow(power, new bigdecimal_js_1.MC(20)));
    let out = gl_matrix_1.vec3.create();
    out[0] = Number(sV[0].toEngineeringString());
    out[1] = Number(sV[1].toEngineeringString());
    out[2] = Number(sV[2].toEngineeringString());
    return out;
}


/***/ }),

/***/ "./src/utils/gl-utils.ts":
/*!*******************************!*\
  !*** ./src/utils/gl-utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.showError = showError;
exports.getRandomInRange = getRandomInRange;
exports.createStaticVertexBuffer = createStaticVertexBuffer;
exports.createStaticIndexBuffer = createStaticIndexBuffer;
exports.createProgram = createProgram;
exports.getContext = getContext;
function showError(errorText) {
    console.error(errorText);
    const errorBoxDiv = document.getElementById('error-box');
    if (errorBoxDiv === null) {
        return;
    }
    const errorElement = document.createElement('p');
    errorElement.innerText = errorText;
    errorBoxDiv.appendChild(errorElement);
}
function getRandomInRange(min, max) {
    return Math.random() * (max - min) + min;
}
function createStaticVertexBuffer(gl, data) {
    const buffer = gl.createBuffer();
    if (!buffer) {
        showError('Failed to allocated buffer');
        return null;
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return buffer;
}
function createStaticIndexBuffer(gl, data) {
    const buffer = gl.createBuffer();
    if (!buffer) {
        showError('Failed to allocated buffer');
        return null;
    }
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    return buffer;
}
function createProgram(gl, vertexShaderSource, fragmentShaderSource) {
    const vertexShader = gl.createShader(gl.VERTEX_SHADER);
    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!vertexShader || !fragmentShader || !program) {
        showError(`Failed to allocate GL objects (`
            + `vs=${!!vertexShader}, `
            + `fs=${!!fragmentShader}, `
            + `program=${!!program})`);
        return null;
    }
    gl.shaderSource(vertexShader, vertexShaderSource);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        const errorMessage = gl.getShaderInfoLog(vertexShader);
        showError(`Failed to compile vertex shader: ${errorMessage}`);
        return null;
    }
    gl.shaderSource(fragmentShader, fragmentShaderSource);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        const errorMessage = gl.getShaderInfoLog(fragmentShader);
        showError(`Failed to compile fragment shader: ${errorMessage}`);
        return null;
    }
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        const errorMessage = gl.getProgramInfoLog(program);
        showError(`Failed to link GPU program: ${errorMessage}`);
        return null;
    }
    return program;
}
function getContext(canvas) {
    const gl = canvas.getContext('webgl2');
    if (!gl) {
        const isWebGl1Supported = !!(document.createElement('canvas')).getContext('webgl');
        if (isWebGl1Supported) {
            throw new Error('WebGL 1 is supported, but not v2 - try using a different device or browser');
        }
        else {
            throw new Error('WebGL is not supported on this device - try using a different device or browser');
        }
    }
    return gl;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,